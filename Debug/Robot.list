
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006828  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  08006934  08006934  00007934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007440  08007440  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  08007440  08007440  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007440  08007440  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007440  08007440  00008440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007444  08007444  00008444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007448  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  20000010  08007454  00009010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  08007454  0000983c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001324d  00000000  00000000  00009035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003204  00000000  00000000  0001c282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0001f488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dea  00000000  00000000  00020630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ebf  00000000  00000000  0002141a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018aff  00000000  00000000  0003b2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de1e  00000000  00000000  00053dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1bf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048cc  00000000  00000000  000e1c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e6508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800691c 	.word	0x0800691c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800691c 	.word	0x0800691c

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b10      	ldr	r3, [pc, #64]	@ (8000194 <MX_DMA_Init+0x48>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0f      	ldr	r2, [pc, #60]	@ (8000194 <MX_DMA_Init+0x48>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b0d      	ldr	r3, [pc, #52]	@ (8000194 <MX_DMA_Init+0x48>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200e      	movs	r0, #14
 8000170:	f002 fe4f 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000174:	200e      	movs	r0, #14
 8000176:	f002 fe68 	bl	8002e4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200f      	movs	r0, #15
 8000180:	f002 fe47 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000184:	200f      	movs	r0, #15
 8000186:	f002 fe60 	bl	8002e4a <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0310 	add.w	r3, r7, #16
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ac:	4b30      	ldr	r3, [pc, #192]	@ (8000270 <MX_GPIO_Init+0xd8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000270 <MX_GPIO_Init+0xd8>)
 80001b2:	f043 0310 	orr.w	r3, r3, #16
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000270 <MX_GPIO_Init+0xd8>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0310 	and.w	r3, r3, #16
 80001c0:	60fb      	str	r3, [r7, #12]
 80001c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000270 <MX_GPIO_Init+0xd8>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a29      	ldr	r2, [pc, #164]	@ (8000270 <MX_GPIO_Init+0xd8>)
 80001ca:	f043 0320 	orr.w	r3, r3, #32
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b27      	ldr	r3, [pc, #156]	@ (8000270 <MX_GPIO_Init+0xd8>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001dc:	4b24      	ldr	r3, [pc, #144]	@ (8000270 <MX_GPIO_Init+0xd8>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a23      	ldr	r2, [pc, #140]	@ (8000270 <MX_GPIO_Init+0xd8>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6193      	str	r3, [r2, #24]
 80001e8:	4b21      	ldr	r3, [pc, #132]	@ (8000270 <MX_GPIO_Init+0xd8>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f003 0304 	and.w	r3, r3, #4
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000270 <MX_GPIO_Init+0xd8>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000270 <MX_GPIO_Init+0xd8>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b1b      	ldr	r3, [pc, #108]	@ (8000270 <MX_GPIO_Init+0xd8>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0308 	and.w	r3, r3, #8
 8000208:	603b      	str	r3, [r7, #0]
 800020a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000212:	4818      	ldr	r0, [pc, #96]	@ (8000274 <MX_GPIO_Init+0xdc>)
 8000214:	f003 fa71 	bl	80036fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_Pin;
 8000218:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800021c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800021e:	2301      	movs	r3, #1
 8000220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000222:	2301      	movs	r3, #1
 8000224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000226:	2303      	movs	r3, #3
 8000228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	4619      	mov	r1, r3
 8000230:	4810      	ldr	r0, [pc, #64]	@ (8000274 <MX_GPIO_Init+0xdc>)
 8000232:	f003 f8c7 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin|KEY3_Pin|KEY4_Pin
 8000236:	23ff      	movs	r3, #255	@ 0xff
 8000238:	613b      	str	r3, [r7, #16]
                          |KEY5_Pin|KEY6_Pin|KEY7_Pin|KEY8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800023e:	2301      	movs	r3, #1
 8000240:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000242:	f107 0310 	add.w	r3, r7, #16
 8000246:	4619      	mov	r1, r3
 8000248:	480b      	ldr	r0, [pc, #44]	@ (8000278 <MX_GPIO_Init+0xe0>)
 800024a:	f003 f8bb 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = KEY9_Pin|KEY10_Pin;
 800024e:	2303      	movs	r3, #3
 8000250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000256:	2301      	movs	r3, #1
 8000258:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	4619      	mov	r1, r3
 8000260:	4806      	ldr	r0, [pc, #24]	@ (800027c <MX_GPIO_Init+0xe4>)
 8000262:	f003 f8af 	bl	80033c4 <HAL_GPIO_Init>

}
 8000266:	bf00      	nop
 8000268:	3720      	adds	r7, #32
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40021000 	.word	0x40021000
 8000274:	40011000 	.word	0x40011000
 8000278:	40010800 	.word	0x40010800
 800027c:	40010c00 	.word	0x40010c00

08000280 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000284:	4b12      	ldr	r3, [pc, #72]	@ (80002d0 <MX_I2C2_Init+0x50>)
 8000286:	4a13      	ldr	r2, [pc, #76]	@ (80002d4 <MX_I2C2_Init+0x54>)
 8000288:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800028a:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <MX_I2C2_Init+0x50>)
 800028c:	4a12      	ldr	r2, [pc, #72]	@ (80002d8 <MX_I2C2_Init+0x58>)
 800028e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000290:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <MX_I2C2_Init+0x50>)
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000296:	4b0e      	ldr	r3, [pc, #56]	@ (80002d0 <MX_I2C2_Init+0x50>)
 8000298:	2200      	movs	r2, #0
 800029a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800029c:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <MX_I2C2_Init+0x50>)
 800029e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <MX_I2C2_Init+0x50>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002aa:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <MX_I2C2_Init+0x50>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <MX_I2C2_Init+0x50>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002b6:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <MX_I2C2_Init+0x50>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <MX_I2C2_Init+0x50>)
 80002be:	f003 fa35 	bl	800372c <HAL_I2C_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002c8:	f000 f8a2 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000002c 	.word	0x2000002c
 80002d4:	40005800 	.word	0x40005800
 80002d8:	00061a80 	.word	0x00061a80

080002dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e4:	f107 0310 	add.w	r3, r7, #16
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a16      	ldr	r2, [pc, #88]	@ (8000350 <HAL_I2C_MspInit+0x74>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d124      	bne.n	8000346 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b15      	ldr	r3, [pc, #84]	@ (8000354 <HAL_I2C_MspInit+0x78>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a14      	ldr	r2, [pc, #80]	@ (8000354 <HAL_I2C_MspInit+0x78>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b12      	ldr	r3, [pc, #72]	@ (8000354 <HAL_I2C_MspInit+0x78>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000314:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000318:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800031a:	2312      	movs	r3, #18
 800031c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800031e:	2303      	movs	r3, #3
 8000320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	4619      	mov	r1, r3
 8000328:	480b      	ldr	r0, [pc, #44]	@ (8000358 <HAL_I2C_MspInit+0x7c>)
 800032a:	f003 f84b 	bl	80033c4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800032e:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <HAL_I2C_MspInit+0x78>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	4a08      	ldr	r2, [pc, #32]	@ (8000354 <HAL_I2C_MspInit+0x78>)
 8000334:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000338:	61d3      	str	r3, [r2, #28]
 800033a:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <HAL_I2C_MspInit+0x78>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000342:	60bb      	str	r3, [r7, #8]
 8000344:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000346:	bf00      	nop
 8000348:	3720      	adds	r7, #32
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40005800 	.word	0x40005800
 8000354:	40021000 	.word	0x40021000
 8000358:	40010c00 	.word	0x40010c00

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000360:	f002 fbfa 	bl	8002b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000364:	f000 f80f 	bl	8000386 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000368:	f7ff ff16 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 800036c:	f7ff feee 	bl	800014c <MX_DMA_Init>
  MX_TIM4_Init();
 8000370:	f000 f8e0 	bl	8000534 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000374:	f000 f9d0 	bl	8000718 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000378:	f7ff ff82 	bl	8000280 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  Usr_main();
 800037c:	f000 fec4 	bl	8001108 <Usr_main>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Usr_whilemain();
 8000380:	f001 f848 	bl	8001414 <Usr_whilemain>
 8000384:	e7fc      	b.n	8000380 <main+0x24>

08000386 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000386:	b580      	push	{r7, lr}
 8000388:	b090      	sub	sp, #64	@ 0x40
 800038a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038c:	f107 0318 	add.w	r3, r7, #24
 8000390:	2228      	movs	r2, #40	@ 0x28
 8000392:	2100      	movs	r1, #0
 8000394:	4618      	mov	r0, r3
 8000396:	f006 fa87 	bl	80068a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a8:	2301      	movs	r3, #1
 80003aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003b0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b6:	2301      	movs	r3, #1
 80003b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ba:	2302      	movs	r3, #2
 80003bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ca:	f107 0318 	add.w	r3, r7, #24
 80003ce:	4618      	mov	r0, r3
 80003d0:	f003 fe48 	bl	8004064 <HAL_RCC_OscConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003da:	f000 f819 	bl	8000410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003de:	230f      	movs	r3, #15
 80003e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e2:	2302      	movs	r3, #2
 80003e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2102      	movs	r1, #2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f004 f8b5 	bl	8004568 <HAL_RCC_ClockConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000404:	f000 f804 	bl	8000410 <Error_Handler>
  }
}
 8000408:	bf00      	nop
 800040a:	3740      	adds	r7, #64	@ 0x40
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000414:	b672      	cpsid	i
}
 8000416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <Error_Handler+0x8>

0800041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000422:	4b15      	ldr	r3, [pc, #84]	@ (8000478 <HAL_MspInit+0x5c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a14      	ldr	r2, [pc, #80]	@ (8000478 <HAL_MspInit+0x5c>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <HAL_MspInit+0x5c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a0e      	ldr	r2, [pc, #56]	@ (8000478 <HAL_MspInit+0x5c>)
 8000440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000452:	4b0a      	ldr	r3, [pc, #40]	@ (800047c <HAL_MspInit+0x60>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	@ (800047c <HAL_MspInit+0x60>)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	40010000 	.word	0x40010000

08000480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <NMI_Handler+0x4>

08000488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <HardFault_Handler+0x4>

08000490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <MemManage_Handler+0x4>

08000498 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <BusFault_Handler+0x4>

080004a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <UsageFault_Handler+0x4>

080004a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d0:	f002 fb88 	bl	8002be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80004dc:	4802      	ldr	r0, [pc, #8]	@ (80004e8 <DMA1_Channel4_IRQHandler+0x10>)
 80004de:	f002 fe3d 	bl	800315c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000154 	.word	0x20000154

080004ec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80004f0:	4802      	ldr	r0, [pc, #8]	@ (80004fc <DMA1_Channel5_IRQHandler+0x10>)
 80004f2:	f002 fe33 	bl	800315c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000110 	.word	0x20000110

08000500 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000504:	4802      	ldr	r0, [pc, #8]	@ (8000510 <TIM4_IRQHandler+0x10>)
 8000506:	f004 fb07 	bl	8004b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000080 	.word	0x20000080

08000514 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000518:	4802      	ldr	r0, [pc, #8]	@ (8000524 <USART1_IRQHandler+0x10>)
 800051a:	f005 fa39 	bl	8005990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200000c8 	.word	0x200000c8

08000528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08e      	sub	sp, #56	@ 0x38
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000548:	f107 0320 	add.w	r3, r7, #32
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
 8000560:	615a      	str	r2, [r3, #20]
 8000562:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000564:	4b3d      	ldr	r3, [pc, #244]	@ (800065c <MX_TIM4_Init+0x128>)
 8000566:	4a3e      	ldr	r2, [pc, #248]	@ (8000660 <MX_TIM4_Init+0x12c>)
 8000568:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 800056a:	4b3c      	ldr	r3, [pc, #240]	@ (800065c <MX_TIM4_Init+0x128>)
 800056c:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000570:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000572:	4b3a      	ldr	r3, [pc, #232]	@ (800065c <MX_TIM4_Init+0x128>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000578:	4b38      	ldr	r3, [pc, #224]	@ (800065c <MX_TIM4_Init+0x128>)
 800057a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800057e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000580:	4b36      	ldr	r3, [pc, #216]	@ (800065c <MX_TIM4_Init+0x128>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000586:	4b35      	ldr	r3, [pc, #212]	@ (800065c <MX_TIM4_Init+0x128>)
 8000588:	2280      	movs	r2, #128	@ 0x80
 800058a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800058c:	4833      	ldr	r0, [pc, #204]	@ (800065c <MX_TIM4_Init+0x128>)
 800058e:	f004 f979 	bl	8004884 <HAL_TIM_Base_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000598:	f7ff ff3a 	bl	8000410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80005a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005a6:	4619      	mov	r1, r3
 80005a8:	482c      	ldr	r0, [pc, #176]	@ (800065c <MX_TIM4_Init+0x128>)
 80005aa:	f004 fc7f 	bl	8004eac <HAL_TIM_ConfigClockSource>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80005b4:	f7ff ff2c 	bl	8000410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80005b8:	4828      	ldr	r0, [pc, #160]	@ (800065c <MX_TIM4_Init+0x128>)
 80005ba:	f004 f9b2 	bl	8004922 <HAL_TIM_PWM_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80005c4:	f7ff ff24 	bl	8000410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4619      	mov	r1, r3
 80005d6:	4821      	ldr	r0, [pc, #132]	@ (800065c <MX_TIM4_Init+0x128>)
 80005d8:	f005 f800 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80005e2:	f7ff ff15 	bl	8000410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e6:	2360      	movs	r3, #96	@ 0x60
 80005e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	4817      	ldr	r0, [pc, #92]	@ (800065c <MX_TIM4_Init+0x128>)
 80005fe:	f004 fb93 	bl	8004d28 <HAL_TIM_PWM_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000608:	f7ff ff02 	bl	8000410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2204      	movs	r2, #4
 8000610:	4619      	mov	r1, r3
 8000612:	4812      	ldr	r0, [pc, #72]	@ (800065c <MX_TIM4_Init+0x128>)
 8000614:	f004 fb88 	bl	8004d28 <HAL_TIM_PWM_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800061e:	f7ff fef7 	bl	8000410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2208      	movs	r2, #8
 8000626:	4619      	mov	r1, r3
 8000628:	480c      	ldr	r0, [pc, #48]	@ (800065c <MX_TIM4_Init+0x128>)
 800062a:	f004 fb7d 	bl	8004d28 <HAL_TIM_PWM_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000634:	f7ff feec 	bl	8000410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	220c      	movs	r2, #12
 800063c:	4619      	mov	r1, r3
 800063e:	4807      	ldr	r0, [pc, #28]	@ (800065c <MX_TIM4_Init+0x128>)
 8000640:	f004 fb72 	bl	8004d28 <HAL_TIM_PWM_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 800064a:	f7ff fee1 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800064e:	4803      	ldr	r0, [pc, #12]	@ (800065c <MX_TIM4_Init+0x128>)
 8000650:	f000 f82e 	bl	80006b0 <HAL_TIM_MspPostInit>

}
 8000654:	bf00      	nop
 8000656:	3738      	adds	r7, #56	@ 0x38
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000080 	.word	0x20000080
 8000660:	40000800 	.word	0x40000800

08000664 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <HAL_TIM_Base_MspInit+0x44>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d113      	bne.n	800069e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000676:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <HAL_TIM_Base_MspInit+0x48>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a0c      	ldr	r2, [pc, #48]	@ (80006ac <HAL_TIM_Base_MspInit+0x48>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <HAL_TIM_Base_MspInit+0x48>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	201e      	movs	r0, #30
 8000694:	f002 fbbd 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000698:	201e      	movs	r0, #30
 800069a:	f002 fbd6 	bl	8002e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40000800 	.word	0x40000800
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a10      	ldr	r2, [pc, #64]	@ (800070c <HAL_TIM_MspPostInit+0x5c>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d118      	bne.n	8000702 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <HAL_TIM_MspPostInit+0x60>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000710 <HAL_TIM_MspPostInit+0x60>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <HAL_TIM_MspPostInit+0x60>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80006e8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80006ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2302      	movs	r3, #2
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	@ (8000714 <HAL_TIM_MspPostInit+0x64>)
 80006fe:	f002 fe61 	bl	80033c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000702:	bf00      	nop
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40000800 	.word	0x40000800
 8000710:	40021000 	.word	0x40021000
 8000714:	40010c00 	.word	0x40010c00

08000718 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <MX_USART1_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 8000750:	f004 ffb4 	bl	80056bc <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f7ff fe59 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000c8 	.word	0x200000c8
 8000768:	40013800 	.word	0x40013800

0800076c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a47      	ldr	r2, [pc, #284]	@ (80008a4 <HAL_UART_MspInit+0x138>)
 8000788:	4293      	cmp	r3, r2
 800078a:	f040 8086 	bne.w	800089a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800078e:	4b46      	ldr	r3, [pc, #280]	@ (80008a8 <HAL_UART_MspInit+0x13c>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	4a45      	ldr	r2, [pc, #276]	@ (80008a8 <HAL_UART_MspInit+0x13c>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000798:	6193      	str	r3, [r2, #24]
 800079a:	4b43      	ldr	r3, [pc, #268]	@ (80008a8 <HAL_UART_MspInit+0x13c>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b40      	ldr	r3, [pc, #256]	@ (80008a8 <HAL_UART_MspInit+0x13c>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a3f      	ldr	r2, [pc, #252]	@ (80008a8 <HAL_UART_MspInit+0x13c>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	4b3d      	ldr	r3, [pc, #244]	@ (80008a8 <HAL_UART_MspInit+0x13c>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	4836      	ldr	r0, [pc, #216]	@ (80008ac <HAL_UART_MspInit+0x140>)
 80007d4:	f002 fdf6 	bl	80033c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	482f      	ldr	r0, [pc, #188]	@ (80008ac <HAL_UART_MspInit+0x140>)
 80007ee:	f002 fde9 	bl	80033c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80007f2:	4b2f      	ldr	r3, [pc, #188]	@ (80008b0 <HAL_UART_MspInit+0x144>)
 80007f4:	4a2f      	ldr	r2, [pc, #188]	@ (80008b4 <HAL_UART_MspInit+0x148>)
 80007f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f8:	4b2d      	ldr	r3, [pc, #180]	@ (80008b0 <HAL_UART_MspInit+0x144>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fe:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <HAL_UART_MspInit+0x144>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000804:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <HAL_UART_MspInit+0x144>)
 8000806:	2280      	movs	r2, #128	@ 0x80
 8000808:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800080a:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <HAL_UART_MspInit+0x144>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000810:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <HAL_UART_MspInit+0x144>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000816:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <HAL_UART_MspInit+0x144>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800081c:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <HAL_UART_MspInit+0x144>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000822:	4823      	ldr	r0, [pc, #140]	@ (80008b0 <HAL_UART_MspInit+0x144>)
 8000824:	f002 fb2c 	bl	8002e80 <HAL_DMA_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800082e:	f7ff fdef 	bl	8000410 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a1e      	ldr	r2, [pc, #120]	@ (80008b0 <HAL_UART_MspInit+0x144>)
 8000836:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000838:	4a1d      	ldr	r2, [pc, #116]	@ (80008b0 <HAL_UART_MspInit+0x144>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800083e:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <HAL_UART_MspInit+0x14c>)
 8000840:	4a1e      	ldr	r2, [pc, #120]	@ (80008bc <HAL_UART_MspInit+0x150>)
 8000842:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000844:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <HAL_UART_MspInit+0x14c>)
 8000846:	2210      	movs	r2, #16
 8000848:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800084a:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <HAL_UART_MspInit+0x14c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <HAL_UART_MspInit+0x14c>)
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <HAL_UART_MspInit+0x14c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <HAL_UART_MspInit+0x14c>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <HAL_UART_MspInit+0x14c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000868:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <HAL_UART_MspInit+0x14c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800086e:	4812      	ldr	r0, [pc, #72]	@ (80008b8 <HAL_UART_MspInit+0x14c>)
 8000870:	f002 fb06 	bl	8002e80 <HAL_DMA_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800087a:	f7ff fdc9 	bl	8000410 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <HAL_UART_MspInit+0x14c>)
 8000882:	639a      	str	r2, [r3, #56]	@ 0x38
 8000884:	4a0c      	ldr	r2, [pc, #48]	@ (80008b8 <HAL_UART_MspInit+0x14c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2025      	movs	r0, #37	@ 0x25
 8000890:	f002 fabf 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000894:	2025      	movs	r0, #37	@ 0x25
 8000896:	f002 fad8 	bl	8002e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800089a:	bf00      	nop
 800089c:	3720      	adds	r7, #32
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40013800 	.word	0x40013800
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010800 	.word	0x40010800
 80008b0:	20000110 	.word	0x20000110
 80008b4:	40020058 	.word	0x40020058
 80008b8:	20000154 	.word	0x20000154
 80008bc:	40020044 	.word	0x40020044

080008c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c0:	f7ff fe32 	bl	8000528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c4:	480b      	ldr	r0, [pc, #44]	@ (80008f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008c6:	490c      	ldr	r1, [pc, #48]	@ (80008f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008c8:	4a0c      	ldr	r2, [pc, #48]	@ (80008fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a09      	ldr	r2, [pc, #36]	@ (8000900 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008dc:	4c09      	ldr	r4, [pc, #36]	@ (8000904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ea:	f005 ffe5 	bl	80068b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ee:	f7ff fd35 	bl	800035c <main>
  bx lr
 80008f2:	4770      	bx	lr
  ldr r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008fc:	08007448 	.word	0x08007448
  ldr r2, =_sbss
 8000900:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000904:	2000083c 	.word	0x2000083c

08000908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC1_2_IRQHandler>

0800090a <Stack_init>:
    int top;
    int capacity;
    Pos array[10];
} Stack;

void Stack_init(Stack *stack) {
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
    stack->top = -1;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f04f 32ff 	mov.w	r2, #4294967295
 8000918:	601a      	str	r2, [r3, #0]
    stack->capacity = 10;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	220a      	movs	r2, #10
 800091e:	605a      	str	r2, [r3, #4]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <Stack_isEmpty>:

int Stack_isEmpty(Stack *stack) {
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
    return stack->top == -1;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093a:	bf0c      	ite	eq
 800093c:	2301      	moveq	r3, #1
 800093e:	2300      	movne	r3, #0
 8000940:	b2db      	uxtb	r3, r3
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <Stack_isFull>:

int Stack_isFull(Stack *stack) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    return stack->top == stack->capacity - 1;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	3b01      	subs	r3, #1
 800095e:	429a      	cmp	r2, r3
 8000960:	bf0c      	ite	eq
 8000962:	2301      	moveq	r3, #1
 8000964:	2300      	movne	r3, #0
 8000966:	b2db      	uxtb	r3, r3
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <Stack_push>:

void Stack_push(Stack *stack, int j1, int j2, int j3, int j4) {
 8000972:	b580      	push	{r7, lr}
 8000974:	b088      	sub	sp, #32
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	603b      	str	r3, [r7, #0]
    if (Stack_isFull(stack)) {
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f7ff ffe3 	bl	800094c <Stack_isFull>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d120      	bne.n	80009ce <Stack_push+0x5c>
        return;
    }
    stack->array[++(stack->top)] = (Pos){j1, j2, j3, j4};
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	68f9      	ldr	r1, [r7, #12]
 800099c:	011a      	lsls	r2, r3, #4
 800099e:	440a      	add	r2, r1
 80009a0:	3208      	adds	r2, #8
 80009a2:	68b9      	ldr	r1, [r7, #8]
 80009a4:	6011      	str	r1, [r2, #0]
 80009a6:	68f9      	ldr	r1, [r7, #12]
 80009a8:	011a      	lsls	r2, r3, #4
 80009aa:	440a      	add	r2, r1
 80009ac:	320c      	adds	r2, #12
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	6011      	str	r1, [r2, #0]
 80009b2:	68f9      	ldr	r1, [r7, #12]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	0112      	lsls	r2, r2, #4
 80009b8:	440a      	add	r2, r1
 80009ba:	6839      	ldr	r1, [r7, #0]
 80009bc:	6011      	str	r1, [r2, #0]
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	3301      	adds	r3, #1
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	4413      	add	r3, r2
 80009c6:	3304      	adds	r3, #4
 80009c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	e000      	b.n	80009d0 <Stack_push+0x5e>
        return;
 80009ce:	bf00      	nop
}
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <Stack_pop>:
        return;
    }
    stack->array[++(stack->top)] = item;
}

int Stack_pop(Stack *stack, ROBOT_DATA *data) {
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
    if (Stack_isEmpty(stack)) {
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ffa2 	bl	800092a <Stack_isEmpty>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <Stack_pop+0x1a>
        return 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e02e      	b.n	8000a4e <Stack_pop+0x78>
    }
    data->move_j4 = stack->array[stack->top].j1;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	4413      	add	r3, r2
 80009fa:	3308      	adds	r3, #8
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	70da      	strb	r2, [r3, #3]
    data->move_j3 = stack->array[stack->top].j2;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	4413      	add	r3, r2
 8000a0e:	330c      	adds	r3, #12
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	709a      	strb	r2, [r3, #2]
    data->move_j2 = stack->array[stack->top].j3;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	011b      	lsls	r3, r3, #4
 8000a22:	4413      	add	r3, r2
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	705a      	strb	r2, [r3, #1]
    data->move_j1 = stack->array[stack->top].j4;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	3301      	adds	r3, #1
 8000a34:	011b      	lsls	r3, r3, #4
 8000a36:	4413      	add	r3, r2
 8000a38:	3304      	adds	r3, #4
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	701a      	strb	r2, [r3, #0]
    stack->top--;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	601a      	str	r2, [r3, #0]
    return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <Robot_Move>:

#endif

// 机器人移动
void Robot_Move(ROBOT_DATA *data, unsigned int Mot)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
    unsigned char move_j, now_j;
    // 根据选择的电机进行不同的数据读取和处理
    switch (Mot)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b0c      	cmp	r3, #12
 8000a66:	d849      	bhi.n	8000afc <Robot_Move+0xa4>
 8000a68:	a201      	add	r2, pc, #4	@ (adr r2, 8000a70 <Robot_Move+0x18>)
 8000a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6e:	bf00      	nop
 8000a70:	08000ae7 	.word	0x08000ae7
 8000a74:	08000afd 	.word	0x08000afd
 8000a78:	08000afd 	.word	0x08000afd
 8000a7c:	08000afd 	.word	0x08000afd
 8000a80:	08000ad1 	.word	0x08000ad1
 8000a84:	08000afd 	.word	0x08000afd
 8000a88:	08000afd 	.word	0x08000afd
 8000a8c:	08000afd 	.word	0x08000afd
 8000a90:	08000abb 	.word	0x08000abb
 8000a94:	08000afd 	.word	0x08000afd
 8000a98:	08000afd 	.word	0x08000afd
 8000a9c:	08000afd 	.word	0x08000afd
 8000aa0:	08000aa5 	.word	0x08000aa5
    {
    case Mot1:
        // 读取目标值的数据
        move_j = data->move_j1;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	73fb      	strb	r3, [r7, #15]
        // 读取当前坐标数据
        now_j = data->now_j1;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	73bb      	strb	r3, [r7, #14]
        // 将目标值的数据传递给当前坐标数据以方便下次使用
        data->now_j1 = data->move_j1;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	711a      	strb	r2, [r3, #4]
        break;
 8000ab8:	e021      	b.n	8000afe <Robot_Move+0xa6>
    case Mot2:
        move_j = data->move_j2;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	785b      	ldrb	r3, [r3, #1]
 8000abe:	73fb      	strb	r3, [r7, #15]
        now_j = data->now_j2;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	795b      	ldrb	r3, [r3, #5]
 8000ac4:	73bb      	strb	r3, [r7, #14]
        data->now_j2 = data->move_j2;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	785a      	ldrb	r2, [r3, #1]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	715a      	strb	r2, [r3, #5]
        break;
 8000ace:	e016      	b.n	8000afe <Robot_Move+0xa6>
    case Mot3:
        move_j = data->move_j3;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	789b      	ldrb	r3, [r3, #2]
 8000ad4:	73fb      	strb	r3, [r7, #15]
        now_j = data->now_j3;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	799b      	ldrb	r3, [r3, #6]
 8000ada:	73bb      	strb	r3, [r7, #14]
        data->now_j3 = data->move_j3;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	789a      	ldrb	r2, [r3, #2]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	719a      	strb	r2, [r3, #6]
        break;
 8000ae4:	e00b      	b.n	8000afe <Robot_Move+0xa6>
    case Mot4:
        move_j = data->move_j4;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	78db      	ldrb	r3, [r3, #3]
 8000aea:	73fb      	strb	r3, [r7, #15]
        now_j = data->now_j4;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	79db      	ldrb	r3, [r3, #7]
 8000af0:	73bb      	strb	r3, [r7, #14]
        data->now_j4 = data->move_j4;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	78da      	ldrb	r2, [r3, #3]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	71da      	strb	r2, [r3, #7]
        break;
 8000afa:	e000      	b.n	8000afe <Robot_Move+0xa6>
    default:
        break;
 8000afc:	bf00      	nop
    }
    // 判断当前的目标值和当前值来进行不同的移动
    if (move_j >= now_j)
 8000afe:	7bfa      	ldrb	r2, [r7, #15]
 8000b00:	7bbb      	ldrb	r3, [r7, #14]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d336      	bcc.n	8000b74 <Robot_Move+0x11c>
    {
        for (unsigned char i = 0; i < move_j - now_j; i++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	737b      	strb	r3, [r7, #13]
 8000b0a:	e02c      	b.n	8000b66 <Robot_Move+0x10e>
        {
            __HAL_TIM_SetCompare(&htim4, Mot, now_j + i); //
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d106      	bne.n	8000b20 <Robot_Move+0xc8>
 8000b12:	7bba      	ldrb	r2, [r7, #14]
 8000b14:	7b7b      	ldrb	r3, [r7, #13]
 8000b16:	441a      	add	r2, r3
 8000b18:	4b35      	ldr	r3, [pc, #212]	@ (8000bf0 <Robot_Move+0x198>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b1e:	e01c      	b.n	8000b5a <Robot_Move+0x102>
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d107      	bne.n	8000b36 <Robot_Move+0xde>
 8000b26:	7bba      	ldrb	r2, [r7, #14]
 8000b28:	7b7b      	ldrb	r3, [r7, #13]
 8000b2a:	18d1      	adds	r1, r2, r3
 8000b2c:	4b30      	ldr	r3, [pc, #192]	@ (8000bf0 <Robot_Move+0x198>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	460b      	mov	r3, r1
 8000b32:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b34:	e011      	b.n	8000b5a <Robot_Move+0x102>
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d107      	bne.n	8000b4c <Robot_Move+0xf4>
 8000b3c:	7bba      	ldrb	r2, [r7, #14]
 8000b3e:	7b7b      	ldrb	r3, [r7, #13]
 8000b40:	18d1      	adds	r1, r2, r3
 8000b42:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf0 <Robot_Move+0x198>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	460b      	mov	r3, r1
 8000b48:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000b4a:	e006      	b.n	8000b5a <Robot_Move+0x102>
 8000b4c:	7bba      	ldrb	r2, [r7, #14]
 8000b4e:	7b7b      	ldrb	r3, [r7, #13]
 8000b50:	18d1      	adds	r1, r2, r3
 8000b52:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <Robot_Move+0x198>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	460b      	mov	r3, r1
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
            HAL_Delay(15);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f002 f85e 	bl	8002c1c <HAL_Delay>
        for (unsigned char i = 0; i < move_j - now_j; i++)
 8000b60:	7b7b      	ldrb	r3, [r7, #13]
 8000b62:	3301      	adds	r3, #1
 8000b64:	737b      	strb	r3, [r7, #13]
 8000b66:	7b7a      	ldrb	r2, [r7, #13]
 8000b68:	7bf9      	ldrb	r1, [r7, #15]
 8000b6a:	7bbb      	ldrb	r3, [r7, #14]
 8000b6c:	1acb      	subs	r3, r1, r3
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dbcc      	blt.n	8000b0c <Robot_Move+0xb4>
        {
            __HAL_TIM_SetCompare(&htim4, Mot, now_j - i); //
            HAL_Delay(15);
        }
    }
}
 8000b72:	e039      	b.n	8000be8 <Robot_Move+0x190>
    else if (move_j < now_j)
 8000b74:	7bfa      	ldrb	r2, [r7, #15]
 8000b76:	7bbb      	ldrb	r3, [r7, #14]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d235      	bcs.n	8000be8 <Robot_Move+0x190>
        for (unsigned char i = 0; i < now_j - move_j; i++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	733b      	strb	r3, [r7, #12]
 8000b80:	e02c      	b.n	8000bdc <Robot_Move+0x184>
            __HAL_TIM_SetCompare(&htim4, Mot, now_j - i); //
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d106      	bne.n	8000b96 <Robot_Move+0x13e>
 8000b88:	7bba      	ldrb	r2, [r7, #14]
 8000b8a:	7b3b      	ldrb	r3, [r7, #12]
 8000b8c:	1ad2      	subs	r2, r2, r3
 8000b8e:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <Robot_Move+0x198>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b94:	e01c      	b.n	8000bd0 <Robot_Move+0x178>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d107      	bne.n	8000bac <Robot_Move+0x154>
 8000b9c:	7bba      	ldrb	r2, [r7, #14]
 8000b9e:	7b3b      	ldrb	r3, [r7, #12]
 8000ba0:	1ad1      	subs	r1, r2, r3
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <Robot_Move+0x198>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	6393      	str	r3, [r2, #56]	@ 0x38
 8000baa:	e011      	b.n	8000bd0 <Robot_Move+0x178>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b08      	cmp	r3, #8
 8000bb0:	d107      	bne.n	8000bc2 <Robot_Move+0x16a>
 8000bb2:	7bba      	ldrb	r2, [r7, #14]
 8000bb4:	7b3b      	ldrb	r3, [r7, #12]
 8000bb6:	1ad1      	subs	r1, r2, r3
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <Robot_Move+0x198>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000bc0:	e006      	b.n	8000bd0 <Robot_Move+0x178>
 8000bc2:	7bba      	ldrb	r2, [r7, #14]
 8000bc4:	7b3b      	ldrb	r3, [r7, #12]
 8000bc6:	1ad1      	subs	r1, r2, r3
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <Robot_Move+0x198>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	6413      	str	r3, [r2, #64]	@ 0x40
            HAL_Delay(15);
 8000bd0:	200f      	movs	r0, #15
 8000bd2:	f002 f823 	bl	8002c1c <HAL_Delay>
        for (unsigned char i = 0; i < now_j - move_j; i++)
 8000bd6:	7b3b      	ldrb	r3, [r7, #12]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	733b      	strb	r3, [r7, #12]
 8000bdc:	7b3a      	ldrb	r2, [r7, #12]
 8000bde:	7bb9      	ldrb	r1, [r7, #14]
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	1acb      	subs	r3, r1, r3
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbcc      	blt.n	8000b82 <Robot_Move+0x12a>
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000080 	.word	0x20000080

08000bf4 <Robot_Move_Start>:

}

// 机器人初始化移动
void Robot_Move_Start(ROBOT_DATA *data, UART_DATA *Usr_UART)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
    // 初始化顺序，先进行电机2初始化，然后电机3，其次电机4，最后电机1
    __HAL_TIM_SetCompare(&htim4, Mot1, 220); // 电机1的初始化
 8000bfe:	4b57      	ldr	r3, [pc, #348]	@ (8000d5c <Robot_Move_Start+0x168>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	22dc      	movs	r2, #220	@ 0xdc
 8000c04:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_Delay(1000);
 8000c06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c0a:	f002 f807 	bl	8002c1c <HAL_Delay>
    __HAL_TIM_SetCompare(&htim4, Mot2, 100); // 首先进行电机2的初始化
 8000c0e:	4b53      	ldr	r3, [pc, #332]	@ (8000d5c <Robot_Move_Start+0x168>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2264      	movs	r2, #100	@ 0x64
 8000c14:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_Delay(1000);
 8000c16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c1a:	f001 ffff 	bl	8002c1c <HAL_Delay>
    __HAL_TIM_SetCompare(&htim4, Mot3, 100); // 电机3的初始化
 8000c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d5c <Robot_Move_Start+0x168>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2264      	movs	r2, #100	@ 0x64
 8000c24:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(1000);
 8000c26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c2a:	f001 fff7 	bl	8002c1c <HAL_Delay>
    __HAL_TIM_SetCompare(&htim4, Mot4, 220); // 电机4的初始化
 8000c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8000d5c <Robot_Move_Start+0x168>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	22dc      	movs	r2, #220	@ 0xdc
 8000c34:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(1000);
 8000c36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c3a:	f001 ffef 	bl	8002c1c <HAL_Delay>
    // 位置初始化
    data->now_j1 = 220;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	22dc      	movs	r2, #220	@ 0xdc
 8000c42:	711a      	strb	r2, [r3, #4]
    data->now_j2 = 100;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2264      	movs	r2, #100	@ 0x64
 8000c48:	715a      	strb	r2, [r3, #5]
    data->now_j3 = 100;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2264      	movs	r2, #100	@ 0x64
 8000c4e:	719a      	strb	r2, [r3, #6]
    data->now_j4 = 220;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	22dc      	movs	r2, #220	@ 0xdc
 8000c54:	71da      	strb	r2, [r3, #7]
    data->move_j4 = 0xE0;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	22e0      	movs	r2, #224	@ 0xe0
 8000c5a:	70da      	strb	r2, [r3, #3]
    data->move_j3 = 0x64;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2264      	movs	r2, #100	@ 0x64
 8000c60:	709a      	strb	r2, [r3, #2]
    data->move_j2 = 0x64;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2264      	movs	r2, #100	@ 0x64
 8000c66:	705a      	strb	r2, [r3, #1]
    data->move_j1 = 0xDC;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	22dc      	movs	r2, #220	@ 0xdc
 8000c6c:	701a      	strb	r2, [r3, #0]
    data->mod = 0x01;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    // E0 64 64 8D
    // 前往home位置，完成初始化
    Robot_Move(data, Mot2);
 8000c76:	2108      	movs	r1, #8
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff feed 	bl	8000a58 <Robot_Move>
    Robot_Move(data, Mot3);
 8000c7e:	2104      	movs	r1, #4
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fee9 	bl	8000a58 <Robot_Move>
    Robot_Move(data, Mot4);
 8000c86:	2100      	movs	r1, #0
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff fee5 	bl	8000a58 <Robot_Move>
    Robot_Move(data, Mot1);
 8000c8e:	210c      	movs	r1, #12
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff fee1 	bl	8000a58 <Robot_Move>
    // 完成初始化
    Usr_UART->head = 0x00; // 重新循环
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart1, (uint8_t *)Usr_UART, UART_TRAN_NUM);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	482f      	ldr	r0, [pc, #188]	@ (8000d60 <Robot_Move_Start+0x16c>)
 8000ca2:	f004 fddf 	bl	8005864 <HAL_UART_Transmit_DMA>
    
    Stack_init(&whiteStack);
 8000ca6:	482f      	ldr	r0, [pc, #188]	@ (8000d64 <Robot_Move_Start+0x170>)
 8000ca8:	f7ff fe2f 	bl	800090a <Stack_init>
    Stack_init(&blackStack);
 8000cac:	482e      	ldr	r0, [pc, #184]	@ (8000d68 <Robot_Move_Start+0x174>)
 8000cae:	f7ff fe2c 	bl	800090a <Stack_init>
    Stack_push(&whiteStack, 0x7D, 0xA5, 0x85, 0xC9);
 8000cb2:	23c9      	movs	r3, #201	@ 0xc9
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2385      	movs	r3, #133	@ 0x85
 8000cb8:	22a5      	movs	r2, #165	@ 0xa5
 8000cba:	217d      	movs	r1, #125	@ 0x7d
 8000cbc:	4829      	ldr	r0, [pc, #164]	@ (8000d64 <Robot_Move_Start+0x170>)
 8000cbe:	f7ff fe58 	bl	8000972 <Stack_push>
    Stack_push(&whiteStack, 0x93, 0x98, 0x82, 0xC0);
 8000cc2:	23c0      	movs	r3, #192	@ 0xc0
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2382      	movs	r3, #130	@ 0x82
 8000cc8:	2298      	movs	r2, #152	@ 0x98
 8000cca:	2193      	movs	r1, #147	@ 0x93
 8000ccc:	4825      	ldr	r0, [pc, #148]	@ (8000d64 <Robot_Move_Start+0x170>)
 8000cce:	f7ff fe50 	bl	8000972 <Stack_push>
    Stack_push(&whiteStack, 0x9B, 0x8B, 0x86, 0xBA);
 8000cd2:	23ba      	movs	r3, #186	@ 0xba
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2386      	movs	r3, #134	@ 0x86
 8000cd8:	228b      	movs	r2, #139	@ 0x8b
 8000cda:	219b      	movs	r1, #155	@ 0x9b
 8000cdc:	4821      	ldr	r0, [pc, #132]	@ (8000d64 <Robot_Move_Start+0x170>)
 8000cde:	f7ff fe48 	bl	8000972 <Stack_push>
    Stack_push(&whiteStack, 0x9B, 0x79, 0x8E, 0xB4);
 8000ce2:	23b4      	movs	r3, #180	@ 0xb4
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	238e      	movs	r3, #142	@ 0x8e
 8000ce8:	2279      	movs	r2, #121	@ 0x79
 8000cea:	219b      	movs	r1, #155	@ 0x9b
 8000cec:	481d      	ldr	r0, [pc, #116]	@ (8000d64 <Robot_Move_Start+0x170>)
 8000cee:	f7ff fe40 	bl	8000972 <Stack_push>
    Stack_push(&whiteStack, 0xAA, 0x5E, 0x95, 0xB0);
 8000cf2:	23b0      	movs	r3, #176	@ 0xb0
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2395      	movs	r3, #149	@ 0x95
 8000cf8:	225e      	movs	r2, #94	@ 0x5e
 8000cfa:	21aa      	movs	r1, #170	@ 0xaa
 8000cfc:	4819      	ldr	r0, [pc, #100]	@ (8000d64 <Robot_Move_Start+0x170>)
 8000cfe:	f7ff fe38 	bl	8000972 <Stack_push>


    Stack_push(&blackStack, 0x7D, 0xAD, 0x81, 0x60);
 8000d02:	2360      	movs	r3, #96	@ 0x60
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2381      	movs	r3, #129	@ 0x81
 8000d08:	22ad      	movs	r2, #173	@ 0xad
 8000d0a:	217d      	movs	r1, #125	@ 0x7d
 8000d0c:	4816      	ldr	r0, [pc, #88]	@ (8000d68 <Robot_Move_Start+0x174>)
 8000d0e:	f7ff fe30 	bl	8000972 <Stack_push>
    Stack_push(&blackStack, 0x8E, 0xA0, 0x80, 0x69);
 8000d12:	2369      	movs	r3, #105	@ 0x69
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2380      	movs	r3, #128	@ 0x80
 8000d18:	22a0      	movs	r2, #160	@ 0xa0
 8000d1a:	218e      	movs	r1, #142	@ 0x8e
 8000d1c:	4812      	ldr	r0, [pc, #72]	@ (8000d68 <Robot_Move_Start+0x174>)
 8000d1e:	f7ff fe28 	bl	8000972 <Stack_push>
    Stack_push(&blackStack, 0xA0, 0x8F, 0x80, 0x70);
 8000d22:	2370      	movs	r3, #112	@ 0x70
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2380      	movs	r3, #128	@ 0x80
 8000d28:	228f      	movs	r2, #143	@ 0x8f
 8000d2a:	21a0      	movs	r1, #160	@ 0xa0
 8000d2c:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <Robot_Move_Start+0x174>)
 8000d2e:	f7ff fe20 	bl	8000972 <Stack_push>
    Stack_push(&blackStack, 0xAD, 0x7B, 0x8A, 0x78);
 8000d32:	2378      	movs	r3, #120	@ 0x78
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	238a      	movs	r3, #138	@ 0x8a
 8000d38:	227b      	movs	r2, #123	@ 0x7b
 8000d3a:	21ad      	movs	r1, #173	@ 0xad
 8000d3c:	480a      	ldr	r0, [pc, #40]	@ (8000d68 <Robot_Move_Start+0x174>)
 8000d3e:	f7ff fe18 	bl	8000972 <Stack_push>
    Stack_push(&blackStack, 0xAd, 0x62, 0x92, 0x7C);
 8000d42:	237c      	movs	r3, #124	@ 0x7c
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2392      	movs	r3, #146	@ 0x92
 8000d48:	2262      	movs	r2, #98	@ 0x62
 8000d4a:	21ad      	movs	r1, #173	@ 0xad
 8000d4c:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <Robot_Move_Start+0x174>)
 8000d4e:	f7ff fe10 	bl	8000972 <Stack_push>

}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000080 	.word	0x20000080
 8000d60:	200000c8 	.word	0x200000c8
 8000d64:	20000198 	.word	0x20000198
 8000d68:	20000240 	.word	0x20000240

08000d6c <Robot_move_point>:
    data->calcu_data.j4_data = (((data->calcu_data.j4 / 180) * 2 + 0.5) / 20 * 2000);
}

// 机器人点移动
void Robot_move_point(ROBOT_DATA *data, unsigned char point)
{ // 初始化位置
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70fb      	strb	r3, [r7, #3]
    // FF A0 8B 76 6A 00 FF FF FF FF
    // 物品9点
    // FF 90 9A 75 64 00 FF FF FF FF
    // 物品10点
    // FF 80 A4 76 5A 00 FF FF FF FF
    switch (point)
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	2b0c      	cmp	r3, #12
 8000d7c:	f200 81bb 	bhi.w	80010f6 <Robot_move_point+0x38a>
 8000d80:	a201      	add	r2, pc, #4	@ (adr r2, 8000d88 <Robot_move_point+0x1c>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	080010b5 	.word	0x080010b5
 8000d8c:	08000dbd 	.word	0x08000dbd
 8000d90:	08000dff 	.word	0x08000dff
 8000d94:	08000e41 	.word	0x08000e41
 8000d98:	08000e83 	.word	0x08000e83
 8000d9c:	08000ec5 	.word	0x08000ec5
 8000da0:	08000f07 	.word	0x08000f07
 8000da4:	08000f49 	.word	0x08000f49
 8000da8:	08000f8b 	.word	0x08000f8b
 8000dac:	08000fcd 	.word	0x08000fcd
 8000db0:	0800100f 	.word	0x0800100f
 8000db4:	08001041 	.word	0x08001041
 8000db8:	08001073 	.word	0x08001073
    {
    case 1:
        data->move_j4 = 0x92;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2292      	movs	r2, #146	@ 0x92
 8000dc0:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0x92;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2292      	movs	r2, #146	@ 0x92
 8000dc6:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x80;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2280      	movs	r2, #128	@ 0x80
 8000dcc:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0xA0;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	22a0      	movs	r2, #160	@ 0xa0
 8000dd2:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot1);
 8000ddc:	210c      	movs	r1, #12
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fe3a 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 8000de4:	2100      	movs	r1, #0
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fe36 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 8000dec:	2104      	movs	r1, #4
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff fe32 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot2);
 8000df4:	2108      	movs	r1, #8
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fe2e 	bl	8000a58 <Robot_Move>
        break;
 8000dfc:	e17c      	b.n	80010f8 <Robot_move_point+0x38c>
    case 2:
        data->move_j4 = 0x8E;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	228e      	movs	r2, #142	@ 0x8e
 8000e02:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0x97;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2297      	movs	r2, #151	@ 0x97
 8000e08:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x82;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2282      	movs	r2, #130	@ 0x82
 8000e0e:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x94;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2294      	movs	r2, #148	@ 0x94
 8000e14:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot1);
 8000e1e:	210c      	movs	r1, #12
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff fe19 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 8000e26:	2100      	movs	r1, #0
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fe15 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 8000e2e:	2104      	movs	r1, #4
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fe11 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot2);
 8000e36:	2108      	movs	r1, #8
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fe0d 	bl	8000a58 <Robot_Move>
        break;
 8000e3e:	e15b      	b.n	80010f8 <Robot_move_point+0x38c>
    case 3:
        data->move_j4 = 0x92;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2292      	movs	r2, #146	@ 0x92
 8000e44:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0x96;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2296      	movs	r2, #150	@ 0x96
 8000e4a:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x7D;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	227d      	movs	r2, #125	@ 0x7d
 8000e50:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x84;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2284      	movs	r2, #132	@ 0x84
 8000e56:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot1);
 8000e60:	210c      	movs	r1, #12
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fdf8 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fdf4 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 8000e70:	2104      	movs	r1, #4
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fdf0 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot2);
 8000e78:	2108      	movs	r1, #8
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fdec 	bl	8000a58 <Robot_Move>
        break;
 8000e80:	e13a      	b.n	80010f8 <Robot_move_point+0x38c>
    case 4:
        data->move_j4 = 0x82;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2282      	movs	r2, #130	@ 0x82
 8000e86:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0xA8;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	22a8      	movs	r2, #168	@ 0xa8
 8000e8c:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x7D;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	227d      	movs	r2, #125	@ 0x7d
 8000e92:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0xA5;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	22a5      	movs	r2, #165	@ 0xa5
 8000e98:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot1);
 8000ea2:	210c      	movs	r1, #12
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fdd7 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff fdd3 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff fdcf 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot2);
 8000eba:	2108      	movs	r1, #8
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff fdcb 	bl	8000a58 <Robot_Move>
        break;
 8000ec2:	e119      	b.n	80010f8 <Robot_move_point+0x38c>
    case 5:
        data->move_j4 = 0x82;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2282      	movs	r2, #130	@ 0x82
 8000ec8:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0xA8;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	22a8      	movs	r2, #168	@ 0xa8
 8000ece:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x80;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2280      	movs	r2, #128	@ 0x80
 8000ed4:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x94;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2294      	movs	r2, #148	@ 0x94
 8000eda:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot1);
 8000ee4:	210c      	movs	r1, #12
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff fdb6 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 8000eec:	2100      	movs	r1, #0
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fdb2 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 8000ef4:	2104      	movs	r1, #4
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff fdae 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot2);
 8000efc:	2108      	movs	r1, #8
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fdaa 	bl	8000a58 <Robot_Move>
        break;
 8000f04:	e0f8      	b.n	80010f8 <Robot_move_point+0x38c>
    case 6:
        data->move_j4 = 0x82;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2282      	movs	r2, #130	@ 0x82
 8000f0a:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0xAB;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	22ab      	movs	r2, #171	@ 0xab
 8000f10:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x7B;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	227b      	movs	r2, #123	@ 0x7b
 8000f16:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x7C;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	227c      	movs	r2, #124	@ 0x7c
 8000f1c:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot1);
 8000f26:	210c      	movs	r1, #12
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fd95 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fd91 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 8000f36:	2104      	movs	r1, #4
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fd8d 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot2);
 8000f3e:	2108      	movs	r1, #8
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fd89 	bl	8000a58 <Robot_Move>
        break;
 8000f46:	e0d7      	b.n	80010f8 <Robot_move_point+0x38c>
    case 7:
        data->move_j4 = 0x6E;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	226e      	movs	r2, #110	@ 0x6e
 8000f4c:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0xBD;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	22bd      	movs	r2, #189	@ 0xbd
 8000f52:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x80;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0xA8;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	22a8      	movs	r2, #168	@ 0xa8
 8000f5e:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot1);
 8000f68:	210c      	movs	r1, #12
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fd74 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 8000f70:	2100      	movs	r1, #0
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fd70 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 8000f78:	2104      	movs	r1, #4
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fd6c 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot2);
 8000f80:	2108      	movs	r1, #8
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fd68 	bl	8000a58 <Robot_Move>
        break;
 8000f88:	e0b6      	b.n	80010f8 <Robot_move_point+0x38c>
    case 8:
        data->move_j4 = 0x6E;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	226e      	movs	r2, #110	@ 0x6e
 8000f8e:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0xC2;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	22c2      	movs	r2, #194	@ 0xc2
 8000f94:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x80;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x8E;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	228e      	movs	r2, #142	@ 0x8e
 8000fa0:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot1);
 8000faa:	210c      	movs	r1, #12
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fd53 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fd4f 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 8000fba:	2104      	movs	r1, #4
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fd4b 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot2);
 8000fc2:	2108      	movs	r1, #8
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff fd47 	bl	8000a58 <Robot_Move>
        break;
 8000fca:	e095      	b.n	80010f8 <Robot_move_point+0x38c>
    case 9:
        data->move_j4 = 0x6E;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	226e      	movs	r2, #110	@ 0x6e
 8000fd0:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0xBE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	22be      	movs	r2, #190	@ 0xbe
 8000fd6:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x7E;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	227e      	movs	r2, #126	@ 0x7e
 8000fdc:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x76;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2276      	movs	r2, #118	@ 0x76
 8000fe2:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot1);
 8000fec:	210c      	movs	r1, #12
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fd32 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fd2e 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fd2a 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot2);
 8001004:	2108      	movs	r1, #8
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fd26 	bl	8000a58 <Robot_Move>
        break;
 800100c:	e074      	b.n	80010f8 <Robot_move_point+0x38c>
    case 10:
        Stack_pop(&whiteStack, data);
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	483b      	ldr	r0, [pc, #236]	@ (8001100 <Robot_move_point+0x394>)
 8001012:	f7ff fce0 	bl	80009d6 <Stack_pop>
        data->mod = 0x00;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot1);
 800101e:	210c      	movs	r1, #12
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff fd19 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 8001026:	2100      	movs	r1, #0
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fd15 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 800102e:	2104      	movs	r1, #4
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fd11 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot2);
 8001036:	2108      	movs	r1, #8
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff fd0d 	bl	8000a58 <Robot_Move>
        break;
 800103e:	e05b      	b.n	80010f8 <Robot_move_point+0x38c>
    case 11:
        Stack_pop(&blackStack, data);
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4830      	ldr	r0, [pc, #192]	@ (8001104 <Robot_move_point+0x398>)
 8001044:	f7ff fcc7 	bl	80009d6 <Stack_pop>
        data->mod = 0x00;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot1);
 8001050:	210c      	movs	r1, #12
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fd00 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 8001058:	2100      	movs	r1, #0
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fcfc 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 8001060:	2104      	movs	r1, #4
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fcf8 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot2);
 8001068:	2108      	movs	r1, #8
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff fcf4 	bl	8000a58 <Robot_Move>
        break;
 8001070:	e042      	b.n	80010f8 <Robot_move_point+0x38c>
    case 12:
        data->move_j4 = 0xE0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	22e0      	movs	r2, #224	@ 0xe0
 8001076:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0x64;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2264      	movs	r2, #100	@ 0x64
 800107c:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x64;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2264      	movs	r2, #100	@ 0x64
 8001082:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x8D;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	228d      	movs	r2, #141	@ 0x8d
 8001088:	701a      	strb	r2, [r3, #0]
        data->mod = 0x01;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot2);
 8001092:	2108      	movs	r1, #8
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff fcdf 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 800109a:	2104      	movs	r1, #4
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fcdb 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 80010a2:	2100      	movs	r1, #0
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fcd7 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot1);
 80010aa:	210c      	movs	r1, #12
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff fcd3 	bl	8000a58 <Robot_Move>
        break;
 80010b2:	e021      	b.n	80010f8 <Robot_move_point+0x38c>
    //     Robot_Move(data, Mot4);
    //     Robot_Move(data, Mot3);
    //     Robot_Move(data, Mot2);
    //     break;
    case 0:
        data->move_j4 = 0xE0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	22e0      	movs	r2, #224	@ 0xe0
 80010b8:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0x64;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2264      	movs	r2, #100	@ 0x64
 80010be:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x64;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2264      	movs	r2, #100	@ 0x64
 80010c4:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0xDC;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	22dc      	movs	r2, #220	@ 0xdc
 80010ca:	701a      	strb	r2, [r3, #0]
        data->mod = 0x01;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Robot_Move(data, Mot2);
 80010d4:	2108      	movs	r1, #8
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fcbe 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot3);
 80010dc:	2104      	movs	r1, #4
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fcba 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot4);
 80010e4:	2100      	movs	r1, #0
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fcb6 	bl	8000a58 <Robot_Move>
        Robot_Move(data, Mot1);
 80010ec:	210c      	movs	r1, #12
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fcb2 	bl	8000a58 <Robot_Move>
        break;
 80010f4:	e000      	b.n	80010f8 <Robot_move_point+0x38c>
    //     Robot_Move(data, Mot2);
    //     Robot_Move(data, Mot3);
    //     Robot_Move(data, Mot4);
    //     break;
    default:
        break;
 80010f6:	bf00      	nop
    }
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000198 	.word	0x20000198
 8001104:	20000240 	.word	0x20000240

08001108 <Usr_main>:
// HAL_Delay(1000);
// Robot_Move(Usr_chessman.calcu_data.pwm_j1, 146, Mot1);
// HAL_Delay(1000);
// }

void Usr_main() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    // 启动PWM定时器
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800110c:	210c      	movs	r1, #12
 800110e:	4817      	ldr	r0, [pc, #92]	@ (800116c <Usr_main+0x64>)
 8001110:	f003 fc60 	bl	80049d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001114:	2108      	movs	r1, #8
 8001116:	4815      	ldr	r0, [pc, #84]	@ (800116c <Usr_main+0x64>)
 8001118:	f003 fc5c 	bl	80049d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800111c:	2104      	movs	r1, #4
 800111e:	4813      	ldr	r0, [pc, #76]	@ (800116c <Usr_main+0x64>)
 8001120:	f003 fc58 	bl	80049d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001124:	2100      	movs	r1, #0
 8001126:	4811      	ldr	r0, [pc, #68]	@ (800116c <Usr_main+0x64>)
 8001128:	f003 fc54 	bl	80049d4 <HAL_TIM_PWM_Start>
    // 重置ok位为0
    Usr_UART.ok = 0;
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <Usr_main+0x68>)
 800112e:	2200      	movs	r2, #0
 8001130:	729a      	strb	r2, [r3, #10]
//    // 开启DMA UART接受中断
//    HAL_UART_Receive_DMA(&huart1, (uint8_t *)&Usr_UART, UART_READ_NUM);
    Robot_Move_Start(&Robot_data, &Usr_UART);
 8001132:	490f      	ldr	r1, [pc, #60]	@ (8001170 <Usr_main+0x68>)
 8001134:	480f      	ldr	r0, [pc, #60]	@ (8001174 <Usr_main+0x6c>)
 8001136:	f7ff fd5d 	bl	8000bf4 <Robot_Move_Start>
    HAL_Delay(20);
 800113a:	2014      	movs	r0, #20
 800113c:	f001 fd6e 	bl	8002c1c <HAL_Delay>
    OLED_Init();
 8001140:	f001 f9e2 	bl	8002508 <OLED_Init>
    HAL_Delay(20);
 8001144:	2014      	movs	r0, #20
 8001146:	f001 fd69 	bl	8002c1c <HAL_Delay>
    OLED_NewFrame();
 800114a:	f001 fa39 	bl	80025c0 <OLED_NewFrame>
    HAL_Delay(100);
 800114e:	2064      	movs	r0, #100	@ 0x64
 8001150:	f001 fd64 	bl	8002c1c <HAL_Delay>
    Key.flag = 0;
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <Usr_main+0x70>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
    Key.Key_point = 0;
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <Usr_main+0x70>)
 800115c:	2200      	movs	r2, #0
 800115e:	705a      	strb	r2, [r3, #1]
    Key.Key_data = 0x30;
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <Usr_main+0x70>)
 8001162:	2230      	movs	r2, #48	@ 0x30
 8001164:	709a      	strb	r2, [r3, #2]
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000080 	.word	0x20000080
 8001170:	200002e8 	.word	0x200002e8
 8001174:	200002f8 	.word	0x200002f8
 8001178:	20000338 	.word	0x20000338

0800117c <task2>:

void task2(int cnt) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
    // 初始化参数
    Robot_data.whitch_one = 0;
 8001184:	4b9a      	ldr	r3, [pc, #616]	@ (80013f0 <task2+0x274>)
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Robot_data.where = 0;
 800118c:	4b98      	ldr	r3, [pc, #608]	@ (80013f0 <task2+0x274>)
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Key.Key_point = 0;
 8001194:	4b97      	ldr	r3, [pc, #604]	@ (80013f4 <task2+0x278>)
 8001196:	2200      	movs	r2, #0
 8001198:	705a      	strb	r2, [r3, #1]
    // OLED初始化显示
    OLED_NewFrame();
 800119a:	f001 fa11 	bl	80025c0 <OLED_NewFrame>
    OLED_PrintString(0, 0, "请输入", &font16x16, OLED_COLOR_NORMAL);
 800119e:	2300      	movs	r3, #0
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4b95      	ldr	r3, [pc, #596]	@ (80013f8 <task2+0x27c>)
 80011a4:	4a95      	ldr	r2, [pc, #596]	@ (80013fc <task2+0x280>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	2000      	movs	r0, #0
 80011aa:	f001 fc2e 	bl	8002a0a <OLED_PrintString>
    OLED_PrintString(0, 15, "第一个棋子颜色", &font16x16, OLED_COLOR_NORMAL);
 80011ae:	2300      	movs	r3, #0
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	4b91      	ldr	r3, [pc, #580]	@ (80013f8 <task2+0x27c>)
 80011b4:	4a92      	ldr	r2, [pc, #584]	@ (8001400 <task2+0x284>)
 80011b6:	210f      	movs	r1, #15
 80011b8:	2000      	movs	r0, #0
 80011ba:	f001 fc26 	bl	8002a0a <OLED_PrintString>
    OLED_ShowFrame();
 80011be:	f001 fa0b 	bl	80025d8 <OLED_ShowFrame>
    // 读取按键直到完成
    while (Robot_data.whitch_one == 0) {
 80011c2:	e00a      	b.n	80011da <task2+0x5e>
        Key_scan_low(&Key);
 80011c4:	488b      	ldr	r0, [pc, #556]	@ (80013f4 <task2+0x278>)
 80011c6:	f000 ffe5 	bl	8002194 <Key_scan_low>
        Key_scan_high(&Key);
 80011ca:	488a      	ldr	r0, [pc, #552]	@ (80013f4 <task2+0x278>)
 80011cc:	f001 f914 	bl	80023f8 <Key_scan_high>
        Robot_data.whitch_one = Key.Key_point;
 80011d0:	4b88      	ldr	r3, [pc, #544]	@ (80013f4 <task2+0x278>)
 80011d2:	785a      	ldrb	r2, [r3, #1]
 80011d4:	4b86      	ldr	r3, [pc, #536]	@ (80013f0 <task2+0x274>)
 80011d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    while (Robot_data.whitch_one == 0) {
 80011da:	4b85      	ldr	r3, [pc, #532]	@ (80013f0 <task2+0x274>)
 80011dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0ef      	beq.n	80011c4 <task2+0x48>
    }
    // 将相关参数重置
    Key.Key_point = 0;
 80011e4:	4b83      	ldr	r3, [pc, #524]	@ (80013f4 <task2+0x278>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	705a      	strb	r2, [r3, #1]
    // OLED再次初始化显示
    OLED_NewFrame();
 80011ea:	f001 f9e9 	bl	80025c0 <OLED_NewFrame>
    OLED_PrintString(0, 0, "请输入", &font16x16, OLED_COLOR_NORMAL);
 80011ee:	2300      	movs	r3, #0
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	4b81      	ldr	r3, [pc, #516]	@ (80013f8 <task2+0x27c>)
 80011f4:	4a81      	ldr	r2, [pc, #516]	@ (80013fc <task2+0x280>)
 80011f6:	2100      	movs	r1, #0
 80011f8:	2000      	movs	r0, #0
 80011fa:	f001 fc06 	bl	8002a0a <OLED_PrintString>
    OLED_PrintString(0, 15, "第一个棋子位置", &font16x16, OLED_COLOR_NORMAL);
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4b7d      	ldr	r3, [pc, #500]	@ (80013f8 <task2+0x27c>)
 8001204:	4a7f      	ldr	r2, [pc, #508]	@ (8001404 <task2+0x288>)
 8001206:	210f      	movs	r1, #15
 8001208:	2000      	movs	r0, #0
 800120a:	f001 fbfe 	bl	8002a0a <OLED_PrintString>
    OLED_ShowFrame();
 800120e:	f001 f9e3 	bl	80025d8 <OLED_ShowFrame>
    // 读取按键直到完成
    while (Robot_data.where == 0) {
 8001212:	e00a      	b.n	800122a <task2+0xae>
        Key_scan_low(&Key);
 8001214:	4877      	ldr	r0, [pc, #476]	@ (80013f4 <task2+0x278>)
 8001216:	f000 ffbd 	bl	8002194 <Key_scan_low>
        Key_scan_high(&Key);
 800121a:	4876      	ldr	r0, [pc, #472]	@ (80013f4 <task2+0x278>)
 800121c:	f001 f8ec 	bl	80023f8 <Key_scan_high>
        Robot_data.where = Key.Key_point;
 8001220:	4b74      	ldr	r3, [pc, #464]	@ (80013f4 <task2+0x278>)
 8001222:	785a      	ldrb	r2, [r3, #1]
 8001224:	4b72      	ldr	r3, [pc, #456]	@ (80013f0 <task2+0x274>)
 8001226:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    while (Robot_data.where == 0) {
 800122a:	4b71      	ldr	r3, [pc, #452]	@ (80013f0 <task2+0x274>)
 800122c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0ef      	beq.n	8001214 <task2+0x98>
    }
    // 移动到棋子位置
    Robot_move_point(&Robot_data, Robot_data.whitch_one <= 4 ? 10 : 11);
 8001234:	4b6e      	ldr	r3, [pc, #440]	@ (80013f0 <task2+0x274>)
 8001236:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800123a:	2b04      	cmp	r3, #4
 800123c:	d801      	bhi.n	8001242 <task2+0xc6>
 800123e:	230a      	movs	r3, #10
 8001240:	e000      	b.n	8001244 <task2+0xc8>
 8001242:	230b      	movs	r3, #11
 8001244:	4619      	mov	r1, r3
 8001246:	486a      	ldr	r0, [pc, #424]	@ (80013f0 <task2+0x274>)
 8001248:	f7ff fd90 	bl	8000d6c <Robot_move_point>
    HAL_Delay(300);
 800124c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001250:	f001 fce4 	bl	8002c1c <HAL_Delay>
    HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800125a:	486b      	ldr	r0, [pc, #428]	@ (8001408 <task2+0x28c>)
 800125c:	f002 fa4d 	bl	80036fa <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001260:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001264:	f001 fcda 	bl	8002c1c <HAL_Delay>
    // 回到home
    Robot_move_point(&Robot_data, 12);
 8001268:	210c      	movs	r1, #12
 800126a:	4861      	ldr	r0, [pc, #388]	@ (80013f0 <task2+0x274>)
 800126c:	f7ff fd7e 	bl	8000d6c <Robot_move_point>
    HAL_Delay(300);
 8001270:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001274:	f001 fcd2 	bl	8002c1c <HAL_Delay>
    // 移动到棋盘
    Robot_move_point(&Robot_data, Robot_data.where);
 8001278:	4b5d      	ldr	r3, [pc, #372]	@ (80013f0 <task2+0x274>)
 800127a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800127e:	4619      	mov	r1, r3
 8001280:	485b      	ldr	r0, [pc, #364]	@ (80013f0 <task2+0x274>)
 8001282:	f7ff fd73 	bl	8000d6c <Robot_move_point>
    HAL_Delay(300);
 8001286:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800128a:	f001 fcc7 	bl	8002c1c <HAL_Delay>
    HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001294:	485c      	ldr	r0, [pc, #368]	@ (8001408 <task2+0x28c>)
 8001296:	f002 fa30 	bl	80036fa <HAL_GPIO_WritePin>
    HAL_Delay(300);
 800129a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800129e:	f001 fcbd 	bl	8002c1c <HAL_Delay>
    // 回到home
    Robot_move_point(&Robot_data, 12);
 80012a2:	210c      	movs	r1, #12
 80012a4:	4852      	ldr	r0, [pc, #328]	@ (80013f0 <task2+0x274>)
 80012a6:	f7ff fd61 	bl	8000d6c <Robot_move_point>
    // 第二次移动
    Robot_data.whitch_one = 0;
 80012aa:	4b51      	ldr	r3, [pc, #324]	@ (80013f0 <task2+0x274>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Robot_data.where = 0;
 80012b2:	4b4f      	ldr	r3, [pc, #316]	@ (80013f0 <task2+0x274>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Key.Key_point = 0;
 80012ba:	4b4e      	ldr	r3, [pc, #312]	@ (80013f4 <task2+0x278>)
 80012bc:	2200      	movs	r2, #0
 80012be:	705a      	strb	r2, [r3, #1]
    Key.flag = 0;
 80012c0:	4b4c      	ldr	r3, [pc, #304]	@ (80013f4 <task2+0x278>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
    OLED_NewFrame();
 80012c6:	f001 f97b 	bl	80025c0 <OLED_NewFrame>
    OLED_PrintString(0, 0, "请输入", &font16x16, OLED_COLOR_NORMAL);
 80012ca:	2300      	movs	r3, #0
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	4b4a      	ldr	r3, [pc, #296]	@ (80013f8 <task2+0x27c>)
 80012d0:	4a4a      	ldr	r2, [pc, #296]	@ (80013fc <task2+0x280>)
 80012d2:	2100      	movs	r1, #0
 80012d4:	2000      	movs	r0, #0
 80012d6:	f001 fb98 	bl	8002a0a <OLED_PrintString>
    OLED_PrintString(0, 15, "第二个棋子颜色", &font16x16, OLED_COLOR_NORMAL);
 80012da:	2300      	movs	r3, #0
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	4b46      	ldr	r3, [pc, #280]	@ (80013f8 <task2+0x27c>)
 80012e0:	4a4a      	ldr	r2, [pc, #296]	@ (800140c <task2+0x290>)
 80012e2:	210f      	movs	r1, #15
 80012e4:	2000      	movs	r0, #0
 80012e6:	f001 fb90 	bl	8002a0a <OLED_PrintString>
    OLED_ShowFrame();
 80012ea:	f001 f975 	bl	80025d8 <OLED_ShowFrame>
    while (Robot_data.whitch_one == 0) {
 80012ee:	e00a      	b.n	8001306 <task2+0x18a>
        Key_scan_low(&Key);
 80012f0:	4840      	ldr	r0, [pc, #256]	@ (80013f4 <task2+0x278>)
 80012f2:	f000 ff4f 	bl	8002194 <Key_scan_low>
        Key_scan_high(&Key);
 80012f6:	483f      	ldr	r0, [pc, #252]	@ (80013f4 <task2+0x278>)
 80012f8:	f001 f87e 	bl	80023f8 <Key_scan_high>
        Robot_data.whitch_one = Key.Key_point;
 80012fc:	4b3d      	ldr	r3, [pc, #244]	@ (80013f4 <task2+0x278>)
 80012fe:	785a      	ldrb	r2, [r3, #1]
 8001300:	4b3b      	ldr	r3, [pc, #236]	@ (80013f0 <task2+0x274>)
 8001302:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    while (Robot_data.whitch_one == 0) {
 8001306:	4b3a      	ldr	r3, [pc, #232]	@ (80013f0 <task2+0x274>)
 8001308:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0ef      	beq.n	80012f0 <task2+0x174>
    }
    Key.Key_point = 0;
 8001310:	4b38      	ldr	r3, [pc, #224]	@ (80013f4 <task2+0x278>)
 8001312:	2200      	movs	r2, #0
 8001314:	705a      	strb	r2, [r3, #1]
    OLED_NewFrame();
 8001316:	f001 f953 	bl	80025c0 <OLED_NewFrame>
    OLED_PrintString(0, 0, "请输入", &font16x16, OLED_COLOR_NORMAL);
 800131a:	2300      	movs	r3, #0
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4b36      	ldr	r3, [pc, #216]	@ (80013f8 <task2+0x27c>)
 8001320:	4a36      	ldr	r2, [pc, #216]	@ (80013fc <task2+0x280>)
 8001322:	2100      	movs	r1, #0
 8001324:	2000      	movs	r0, #0
 8001326:	f001 fb70 	bl	8002a0a <OLED_PrintString>
    OLED_PrintString(0, 15, "第二个棋子位置", &font16x16, OLED_COLOR_NORMAL);
 800132a:	2300      	movs	r3, #0
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4b32      	ldr	r3, [pc, #200]	@ (80013f8 <task2+0x27c>)
 8001330:	4a37      	ldr	r2, [pc, #220]	@ (8001410 <task2+0x294>)
 8001332:	210f      	movs	r1, #15
 8001334:	2000      	movs	r0, #0
 8001336:	f001 fb68 	bl	8002a0a <OLED_PrintString>
    OLED_ShowFrame();
 800133a:	f001 f94d 	bl	80025d8 <OLED_ShowFrame>
    while (Robot_data.where == 0) {
 800133e:	e00a      	b.n	8001356 <task2+0x1da>
        Key_scan_low(&Key);
 8001340:	482c      	ldr	r0, [pc, #176]	@ (80013f4 <task2+0x278>)
 8001342:	f000 ff27 	bl	8002194 <Key_scan_low>
        Key_scan_high(&Key);
 8001346:	482b      	ldr	r0, [pc, #172]	@ (80013f4 <task2+0x278>)
 8001348:	f001 f856 	bl	80023f8 <Key_scan_high>
        Robot_data.where = Key.Key_point;
 800134c:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <task2+0x278>)
 800134e:	785a      	ldrb	r2, [r3, #1]
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <task2+0x274>)
 8001352:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    while (Robot_data.where == 0) {
 8001356:	4b26      	ldr	r3, [pc, #152]	@ (80013f0 <task2+0x274>)
 8001358:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0ef      	beq.n	8001340 <task2+0x1c4>
    }
    // 移动到棋子位置
    Robot_move_point(&Robot_data, Robot_data.whitch_one <= 4 ? 10 : 11);
 8001360:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <task2+0x274>)
 8001362:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001366:	2b04      	cmp	r3, #4
 8001368:	d801      	bhi.n	800136e <task2+0x1f2>
 800136a:	230a      	movs	r3, #10
 800136c:	e000      	b.n	8001370 <task2+0x1f4>
 800136e:	230b      	movs	r3, #11
 8001370:	4619      	mov	r1, r3
 8001372:	481f      	ldr	r0, [pc, #124]	@ (80013f0 <task2+0x274>)
 8001374:	f7ff fcfa 	bl	8000d6c <Robot_move_point>
    HAL_Delay(300);
 8001378:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800137c:	f001 fc4e 	bl	8002c1c <HAL_Delay>
    HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001386:	4820      	ldr	r0, [pc, #128]	@ (8001408 <task2+0x28c>)
 8001388:	f002 f9b7 	bl	80036fa <HAL_GPIO_WritePin>
    HAL_Delay(300);
 800138c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001390:	f001 fc44 	bl	8002c1c <HAL_Delay>
    // 回到home
    Robot_move_point(&Robot_data, 12);
 8001394:	210c      	movs	r1, #12
 8001396:	4816      	ldr	r0, [pc, #88]	@ (80013f0 <task2+0x274>)
 8001398:	f7ff fce8 	bl	8000d6c <Robot_move_point>
    HAL_Delay(300);
 800139c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013a0:	f001 fc3c 	bl	8002c1c <HAL_Delay>
    // 移动到棋盘
    Robot_move_point(&Robot_data, Robot_data.where);
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <task2+0x274>)
 80013a6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80013aa:	4619      	mov	r1, r3
 80013ac:	4810      	ldr	r0, [pc, #64]	@ (80013f0 <task2+0x274>)
 80013ae:	f7ff fcdd 	bl	8000d6c <Robot_move_point>
    HAL_Delay(300);
 80013b2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013b6:	f001 fc31 	bl	8002c1c <HAL_Delay>
    HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013c0:	4811      	ldr	r0, [pc, #68]	@ (8001408 <task2+0x28c>)
 80013c2:	f002 f99a 	bl	80036fa <HAL_GPIO_WritePin>
    HAL_Delay(300);
 80013c6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013ca:	f001 fc27 	bl	8002c1c <HAL_Delay>
    // 回到home
    Robot_move_point(&Robot_data, 0);
 80013ce:	2100      	movs	r1, #0
 80013d0:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <task2+0x274>)
 80013d2:	f7ff fccb 	bl	8000d6c <Robot_move_point>
    // 数据复位
    Key.Key_point = 0;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <task2+0x278>)
 80013d8:	2200      	movs	r2, #0
 80013da:	705a      	strb	r2, [r3, #1]
    Key.Key_data = 0x30;
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <task2+0x278>)
 80013de:	2230      	movs	r2, #48	@ 0x30
 80013e0:	709a      	strb	r2, [r3, #2]
    Key.flag = 0;
 80013e2:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <task2+0x278>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200002f8 	.word	0x200002f8
 80013f4:	20000338 	.word	0x20000338
 80013f8:	0800741c 	.word	0x0800741c
 80013fc:	08006934 	.word	0x08006934
 8001400:	08006940 	.word	0x08006940
 8001404:	08006958 	.word	0x08006958
 8001408:	40011000 	.word	0x40011000
 800140c:	08006970 	.word	0x08006970
 8001410:	08006988 	.word	0x08006988

08001414 <Usr_whilemain>:

void Usr_whilemain() {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af02      	add	r7, sp, #8
    Key_scan_low(&Key);
 800141a:	485d      	ldr	r0, [pc, #372]	@ (8001590 <Usr_whilemain+0x17c>)
 800141c:	f000 feba 	bl	8002194 <Key_scan_low>
    Key_scan_high(&Key);
 8001420:	485b      	ldr	r0, [pc, #364]	@ (8001590 <Usr_whilemain+0x17c>)
 8001422:	f000 ffe9 	bl	80023f8 <Key_scan_high>
    OLED_NewFrame();
 8001426:	f001 f8cb 	bl	80025c0 <OLED_NewFrame>
    OLED_PrintString(0, 0, "主菜单", &font16x16, OLED_COLOR_NORMAL);
 800142a:	2300      	movs	r3, #0
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	4b59      	ldr	r3, [pc, #356]	@ (8001594 <Usr_whilemain+0x180>)
 8001430:	4a59      	ldr	r2, [pc, #356]	@ (8001598 <Usr_whilemain+0x184>)
 8001432:	2100      	movs	r1, #0
 8001434:	2000      	movs	r0, #0
 8001436:	f001 fae8 	bl	8002a0a <OLED_PrintString>
    OLED_PrintString(0, 15, "任务", &font16x16, OLED_COLOR_NORMAL);
 800143a:	2300      	movs	r3, #0
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	4b55      	ldr	r3, [pc, #340]	@ (8001594 <Usr_whilemain+0x180>)
 8001440:	4a56      	ldr	r2, [pc, #344]	@ (800159c <Usr_whilemain+0x188>)
 8001442:	210f      	movs	r1, #15
 8001444:	2000      	movs	r0, #0
 8001446:	f001 fae0 	bl	8002a0a <OLED_PrintString>
    OLED_PrintString(32, 15, &Key.Key_data, &font16x16, OLED_COLOR_NORMAL);
 800144a:	2300      	movs	r3, #0
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	4b51      	ldr	r3, [pc, #324]	@ (8001594 <Usr_whilemain+0x180>)
 8001450:	4a53      	ldr	r2, [pc, #332]	@ (80015a0 <Usr_whilemain+0x18c>)
 8001452:	210f      	movs	r1, #15
 8001454:	2020      	movs	r0, #32
 8001456:	f001 fad8 	bl	8002a0a <OLED_PrintString>
    OLED_ShowFrame();
 800145a:	f001 f8bd 	bl	80025d8 <OLED_ShowFrame>
    //    任务1
    if (Key.Key_data == 0x31) {
 800145e:	4b4c      	ldr	r3, [pc, #304]	@ (8001590 <Usr_whilemain+0x17c>)
 8001460:	789b      	ldrb	r3, [r3, #2]
 8001462:	2b31      	cmp	r3, #49	@ 0x31
 8001464:	d139      	bne.n	80014da <Usr_whilemain+0xc6>
        // 先移动到黑棋位置
        Robot_move_point(&Robot_data, 11);
 8001466:	210b      	movs	r1, #11
 8001468:	484e      	ldr	r0, [pc, #312]	@ (80015a4 <Usr_whilemain+0x190>)
 800146a:	f7ff fc7f 	bl	8000d6c <Robot_move_point>
        HAL_Delay(300);
 800146e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001472:	f001 fbd3 	bl	8002c1c <HAL_Delay>
        HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800147c:	484a      	ldr	r0, [pc, #296]	@ (80015a8 <Usr_whilemain+0x194>)
 800147e:	f002 f93c 	bl	80036fa <HAL_GPIO_WritePin>
        HAL_Delay(300);
 8001482:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001486:	f001 fbc9 	bl	8002c1c <HAL_Delay>
        // 回到home
        Robot_move_point(&Robot_data, 12);
 800148a:	210c      	movs	r1, #12
 800148c:	4845      	ldr	r0, [pc, #276]	@ (80015a4 <Usr_whilemain+0x190>)
 800148e:	f7ff fc6d 	bl	8000d6c <Robot_move_point>
        HAL_Delay(300);
 8001492:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001496:	f001 fbc1 	bl	8002c1c <HAL_Delay>
        // 移动到5号格
        Robot_move_point(&Robot_data, 5);
 800149a:	2105      	movs	r1, #5
 800149c:	4841      	ldr	r0, [pc, #260]	@ (80015a4 <Usr_whilemain+0x190>)
 800149e:	f7ff fc65 	bl	8000d6c <Robot_move_point>
        HAL_Delay(300);
 80014a2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014a6:	f001 fbb9 	bl	8002c1c <HAL_Delay>
        HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014b0:	483d      	ldr	r0, [pc, #244]	@ (80015a8 <Usr_whilemain+0x194>)
 80014b2:	f002 f922 	bl	80036fa <HAL_GPIO_WritePin>
        HAL_Delay(300);
 80014b6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014ba:	f001 fbaf 	bl	8002c1c <HAL_Delay>
        // 回到home
        Robot_move_point(&Robot_data, 0);
 80014be:	2100      	movs	r1, #0
 80014c0:	4838      	ldr	r0, [pc, #224]	@ (80015a4 <Usr_whilemain+0x190>)
 80014c2:	f7ff fc53 	bl	8000d6c <Robot_move_point>
        // 数据复位
        Key.Key_point = 0;
 80014c6:	4b32      	ldr	r3, [pc, #200]	@ (8001590 <Usr_whilemain+0x17c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	705a      	strb	r2, [r3, #1]
        Key.Key_data = 0x30;
 80014cc:	4b30      	ldr	r3, [pc, #192]	@ (8001590 <Usr_whilemain+0x17c>)
 80014ce:	2230      	movs	r2, #48	@ 0x30
 80014d0:	709a      	strb	r2, [r3, #2]
        Key.flag = 0;
 80014d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001590 <Usr_whilemain+0x17c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
    //     // 数据处理完成，返回标志位并返回处理数据结果
    //     Usr_UART.ok = 0;
    //     // 如果这里使用低延迟的执行函数，请使用阻塞式发送
    //     HAL_UART_Transmit(&huart1, (uint8_t *)&Usr_UART, UART_DATA_NUM);
    // }
}
 80014d8:	e056      	b.n	8001588 <Usr_whilemain+0x174>
    } else if (Key.Key_data == 0x32) {
 80014da:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <Usr_whilemain+0x17c>)
 80014dc:	789b      	ldrb	r3, [r3, #2]
 80014de:	2b32      	cmp	r3, #50	@ 0x32
 80014e0:	d106      	bne.n	80014f0 <Usr_whilemain+0xdc>
        task2(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f7ff fe4a 	bl	800117c <task2>
        task2(2);
 80014e8:	2002      	movs	r0, #2
 80014ea:	f7ff fe47 	bl	800117c <task2>
}
 80014ee:	e04b      	b.n	8001588 <Usr_whilemain+0x174>
    } else if (Key.Key_data == 0x34) {
 80014f0:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <Usr_whilemain+0x17c>)
 80014f2:	789b      	ldrb	r3, [r3, #2]
 80014f4:	2b34      	cmp	r3, #52	@ 0x34
 80014f6:	d128      	bne.n	800154a <Usr_whilemain+0x136>
    	HAL_Delay(100);
 80014f8:	2064      	movs	r0, #100	@ 0x64
 80014fa:	f001 fb8f 	bl	8002c1c <HAL_Delay>
    	Robot_data.where = 0;
 80014fe:	4b29      	ldr	r3, [pc, #164]	@ (80015a4 <Usr_whilemain+0x190>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        Board_init(&opeBoard, 1, 2);
 8001506:	2202      	movs	r2, #2
 8001508:	2101      	movs	r1, #1
 800150a:	4828      	ldr	r0, [pc, #160]	@ (80015ac <Usr_whilemain+0x198>)
 800150c:	f000 fa8a 	bl	8001a24 <Board_init>
        uint8_t t = Board_play(&opeBoard, &huart1, &Robot_data, &Key);
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <Usr_whilemain+0x17c>)
 8001512:	4a24      	ldr	r2, [pc, #144]	@ (80015a4 <Usr_whilemain+0x190>)
 8001514:	4926      	ldr	r1, [pc, #152]	@ (80015b0 <Usr_whilemain+0x19c>)
 8001516:	4825      	ldr	r0, [pc, #148]	@ (80015ac <Usr_whilemain+0x198>)
 8001518:	f000 fd88 	bl	800202c <Board_play>
 800151c:	4603      	mov	r3, r0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	71fb      	strb	r3, [r7, #7]
        t+=16;
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	3310      	adds	r3, #16
 8001526:	b2db      	uxtb	r3, r3
 8001528:	71fb      	strb	r3, [r7, #7]
        HAL_UART_Transmit(&huart1, &t, 1, 10);
 800152a:	1df9      	adds	r1, r7, #7
 800152c:	230a      	movs	r3, #10
 800152e:	2201      	movs	r2, #1
 8001530:	481f      	ldr	r0, [pc, #124]	@ (80015b0 <Usr_whilemain+0x19c>)
 8001532:	f004 f913 	bl	800575c <HAL_UART_Transmit>
        Key.Key_point = 0;
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <Usr_whilemain+0x17c>)
 8001538:	2200      	movs	r2, #0
 800153a:	705a      	strb	r2, [r3, #1]
        Key.Key_data = 0x30;
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <Usr_whilemain+0x17c>)
 800153e:	2230      	movs	r2, #48	@ 0x30
 8001540:	709a      	strb	r2, [r3, #2]
        Key.flag = 0;
 8001542:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <Usr_whilemain+0x17c>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
}
 8001548:	e01e      	b.n	8001588 <Usr_whilemain+0x174>
    } else if (Key.Key_data == 0x35) {
 800154a:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <Usr_whilemain+0x17c>)
 800154c:	789b      	ldrb	r3, [r3, #2]
 800154e:	2b35      	cmp	r3, #53	@ 0x35
 8001550:	d11a      	bne.n	8001588 <Usr_whilemain+0x174>
    	HAL_Delay(100);
 8001552:	2064      	movs	r0, #100	@ 0x64
 8001554:	f001 fb62 	bl	8002c1c <HAL_Delay>
    	Robot_data.where = 0;
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <Usr_whilemain+0x190>)
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        Board_init(&opeBoard, 2, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	2102      	movs	r1, #2
 8001564:	4811      	ldr	r0, [pc, #68]	@ (80015ac <Usr_whilemain+0x198>)
 8001566:	f000 fa5d 	bl	8001a24 <Board_init>
        Board_play(&opeBoard, &huart1, &Robot_data, &Key);
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <Usr_whilemain+0x17c>)
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <Usr_whilemain+0x190>)
 800156e:	4910      	ldr	r1, [pc, #64]	@ (80015b0 <Usr_whilemain+0x19c>)
 8001570:	480e      	ldr	r0, [pc, #56]	@ (80015ac <Usr_whilemain+0x198>)
 8001572:	f000 fd5b 	bl	800202c <Board_play>
        Key.Key_point = 0;
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <Usr_whilemain+0x17c>)
 8001578:	2200      	movs	r2, #0
 800157a:	705a      	strb	r2, [r3, #1]
        Key.Key_data = 0x30;
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <Usr_whilemain+0x17c>)
 800157e:	2230      	movs	r2, #48	@ 0x30
 8001580:	709a      	strb	r2, [r3, #2]
        Key.flag = 0;
 8001582:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <Usr_whilemain+0x17c>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000338 	.word	0x20000338
 8001594:	0800741c 	.word	0x0800741c
 8001598:	080069a0 	.word	0x080069a0
 800159c:	080069ac 	.word	0x080069ac
 80015a0:	2000033a 	.word	0x2000033a
 80015a4:	200002f8 	.word	0x200002f8
 80015a8:	40011000 	.word	0x40011000
 80015ac:	2000033c 	.word	0x2000033c
 80015b0:	200000c8 	.word	0x200000c8

080015b4 <evaluate>:
#include "alpha_beta.h"

// 评估函数，判断当前局面的得分
int evaluate(int board[3][3], int computer) {
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
    // 检查行
    for (int row = 0; row < 3; row++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	e049      	b.n	8001658 <evaluate+0xa4>
        if (board[row][0] == board[row][1] && board[row][1] == board[row][2]) {
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4299      	cmp	r1, r3
 80015ea:	d132      	bne.n	8001652 <evaluate+0x9e>
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	461a      	mov	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	6859      	ldr	r1, [r3, #4]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	461a      	mov	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4299      	cmp	r1, r3
 8001612:	d11e      	bne.n	8001652 <evaluate+0x9e>
            if (board[row][0] == computer) {
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	461a      	mov	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d101      	bne.n	8001630 <evaluate+0x7c>
                return 1;
 800162c:	2301      	movs	r3, #1
 800162e:	e08c      	b.n	800174a <evaluate+0x196>
            } else if (board[row][0] == 3-computer) {
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	461a      	mov	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f1c3 0303 	rsb	r3, r3, #3
 8001648:	429a      	cmp	r2, r3
 800164a:	d102      	bne.n	8001652 <evaluate+0x9e>
                return -1;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	e07b      	b.n	800174a <evaluate+0x196>
    for (int row = 0; row < 3; row++) {
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3301      	adds	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b02      	cmp	r3, #2
 800165c:	ddb2      	ble.n	80015c4 <evaluate+0x10>
            }
        }
    }

    // 检查列
    for (int col = 0; col < 3; col++) {
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	e02e      	b.n	80016c2 <evaluate+0x10e>
        if (board[0][col] == board[1][col] && board[1][col] == board[2][col]) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	330c      	adds	r3, #12
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001676:	429a      	cmp	r2, r3
 8001678:	d120      	bne.n	80016bc <evaluate+0x108>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	330c      	adds	r3, #12
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3318      	adds	r3, #24
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800168e:	429a      	cmp	r2, r3
 8001690:	d114      	bne.n	80016bc <evaluate+0x108>
            if (board[0][col] == computer) {
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d101      	bne.n	80016a4 <evaluate+0xf0>
                return 1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e052      	b.n	800174a <evaluate+0x196>
            } else if (board[0][col] == 3-computer) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f1c3 0303 	rsb	r3, r3, #3
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d102      	bne.n	80016bc <evaluate+0x108>
                return -1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e046      	b.n	800174a <evaluate+0x196>
    for (int col = 0; col < 3; col++) {
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	3301      	adds	r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	ddcd      	ble.n	8001664 <evaluate+0xb0>
            }
        }
    }

    // 检查对角线
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	330c      	adds	r3, #12
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d118      	bne.n	8001708 <evaluate+0x154>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	330c      	adds	r3, #12
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3318      	adds	r3, #24
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d110      	bne.n	8001708 <evaluate+0x154>
        if (board[0][0] == computer) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d101      	bne.n	80016f4 <evaluate+0x140>
            return 1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e02a      	b.n	800174a <evaluate+0x196>
        } else if (board[0][0] == 3-computer) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f1c3 0303 	rsb	r3, r3, #3
 80016fe:	429a      	cmp	r2, r3
 8001700:	d102      	bne.n	8001708 <evaluate+0x154>
            return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e020      	b.n	800174a <evaluate+0x196>
        }
    }

    if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	330c      	adds	r3, #12
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	d118      	bne.n	8001748 <evaluate+0x194>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	330c      	adds	r3, #12
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3318      	adds	r3, #24
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d110      	bne.n	8001748 <evaluate+0x194>
        if (board[0][2] == computer) {
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d101      	bne.n	8001734 <evaluate+0x180>
            return 1;
 8001730:	2301      	movs	r3, #1
 8001732:	e00a      	b.n	800174a <evaluate+0x196>
        } else if (board[0][2] == 3-computer) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f1c3 0303 	rsb	r3, r3, #3
 800173e:	429a      	cmp	r2, r3
 8001740:	d102      	bne.n	8001748 <evaluate+0x194>
            return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e000      	b.n	800174a <evaluate+0x196>
        }
    }

    // 如果没有获胜者，返回 0
    return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <alphaBeta>:

// Alpha-Beta 算法核心函数
int alphaBeta(int board[3][3], int depth, int alpha, int beta, int isMaximizing, int cnt, int computer) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b092      	sub	sp, #72	@ 0x48
 8001758:	af04      	add	r7, sp, #16
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
    int score = evaluate(board, computer);
 8001762:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7ff ff25 	bl	80015b4 <evaluate>
 800176a:	61f8      	str	r0, [r7, #28]

    // 如果游戏结束或达到最大深度，返回得分
    if (score == 1 || score == -1 || depth == cnt) {
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d007      	beq.n	8001782 <alphaBeta+0x2e>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d003      	beq.n	8001782 <alphaBeta+0x2e>
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800177e:	429a      	cmp	r2, r3
 8001780:	d101      	bne.n	8001786 <alphaBeta+0x32>
        return score;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	e0bb      	b.n	80018fe <alphaBeta+0x1aa>
    }

    if (isMaximizing) {
 8001786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001788:	2b00      	cmp	r3, #0
 800178a:	d05b      	beq.n	8001844 <alphaBeta+0xf0>
        int bestScore = INT_MIN;
 800178c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
        for (int row = 0; row < 3; row++) {
 8001792:	2300      	movs	r3, #0
 8001794:	633b      	str	r3, [r7, #48]	@ 0x30
 8001796:	e050      	b.n	800183a <alphaBeta+0xe6>
            for (int col = 0; col < 3; col++) {
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800179c:	e045      	b.n	800182a <alphaBeta+0xd6>
                if (board[row][col] == 0) {
 800179e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	461a      	mov	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4413      	add	r3, r2
 80017ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d135      	bne.n	8001824 <alphaBeta+0xd0>
                    board[row][col] = computer;
 80017b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80017cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    int score = alphaBeta(board, depth + 1, alpha, beta, 0, cnt, computer);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c59      	adds	r1, r3, #1
 80017d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017d6:	9302      	str	r3, [sp, #8]
 80017d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7ff ffb5 	bl	8001754 <alphaBeta>
 80017ea:	6178      	str	r0, [r7, #20]
                    board[row][col] = 0;
 80017ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017fe:	2100      	movs	r1, #0
 8001800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    bestScore = (score > bestScore)? score : bestScore;
 8001804:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	4293      	cmp	r3, r2
 800180a:	bfb8      	it	lt
 800180c:	4613      	movlt	r3, r2
 800180e:	637b      	str	r3, [r7, #52]	@ 0x34
                    alpha = (alpha > bestScore)? alpha : bestScore;
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001814:	4293      	cmp	r3, r2
 8001816:	bfb8      	it	lt
 8001818:	4613      	movlt	r3, r2
 800181a:	607b      	str	r3, [r7, #4]
                    if (beta <= alpha) {
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dd06      	ble.n	8001832 <alphaBeta+0xde>
            for (int col = 0; col < 3; col++) {
 8001824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001826:	3301      	adds	r3, #1
 8001828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800182a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800182c:	2b02      	cmp	r3, #2
 800182e:	ddb6      	ble.n	800179e <alphaBeta+0x4a>
 8001830:	e000      	b.n	8001834 <alphaBeta+0xe0>
                        break;  // 剪枝
 8001832:	bf00      	nop
        for (int row = 0; row < 3; row++) {
 8001834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001836:	3301      	adds	r3, #1
 8001838:	633b      	str	r3, [r7, #48]	@ 0x30
 800183a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800183c:	2b02      	cmp	r3, #2
 800183e:	ddab      	ble.n	8001798 <alphaBeta+0x44>
                    }
                }
            }
        }
        return bestScore;
 8001840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001842:	e05c      	b.n	80018fe <alphaBeta+0x1aa>
    } else {
        int bestScore = INT_MAX;
 8001844:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (int row = 0; row < 3; row++) {
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
 800184e:	e052      	b.n	80018f6 <alphaBeta+0x1a2>
            for (int col = 0; col < 3; col++) {
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	e047      	b.n	80018e6 <alphaBeta+0x192>
                if (board[row][col] == 0) {
 8001856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	461a      	mov	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4413      	add	r3, r2
 8001866:	6a3a      	ldr	r2, [r7, #32]
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d137      	bne.n	80018e0 <alphaBeta+0x18c>
                    board[row][col] = 3-computer;
 8001870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001882:	f1c2 0103 	rsb	r1, r2, #3
 8001886:	6a3a      	ldr	r2, [r7, #32]
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    int score = alphaBeta(board, depth + 1, alpha, beta, 1, cnt, computer);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c59      	adds	r1, r3, #1
 8001890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2301      	movs	r3, #1
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff ff57 	bl	8001754 <alphaBeta>
 80018a6:	61b8      	str	r0, [r7, #24]
                    board[row][col] = 0;
 80018a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	6a3a      	ldr	r2, [r7, #32]
 80018ba:	2100      	movs	r1, #0
 80018bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    bestScore = (score < bestScore)? score : bestScore;
 80018c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4293      	cmp	r3, r2
 80018c6:	bfa8      	it	ge
 80018c8:	4613      	movge	r3, r2
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
                    beta = (beta < bestScore)? beta : bestScore;
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d0:	4293      	cmp	r3, r2
 80018d2:	bfa8      	it	ge
 80018d4:	4613      	movge	r3, r2
 80018d6:	603b      	str	r3, [r7, #0]
                    if (beta <= alpha) {
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dd06      	ble.n	80018ee <alphaBeta+0x19a>
            for (int col = 0; col < 3; col++) {
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	3301      	adds	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	ddb4      	ble.n	8001856 <alphaBeta+0x102>
 80018ec:	e000      	b.n	80018f0 <alphaBeta+0x19c>
                        break;  // 剪枝
 80018ee:	bf00      	nop
        for (int row = 0; row < 3; row++) {
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	3301      	adds	r3, #1
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	dda9      	ble.n	8001850 <alphaBeta+0xfc>
                    }
                }
            }
        }
        return bestScore;
 80018fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3738      	adds	r7, #56	@ 0x38
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <findBestMove>:

// 找到最优的下一步
void findBestMove(int board[3][3], int *row, int *col, int cnt, int computer) {
 8001906:	b580      	push	{r7, lr}
 8001908:	b08c      	sub	sp, #48	@ 0x30
 800190a:	af04      	add	r7, sp, #16
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	603b      	str	r3, [r7, #0]
    int bestScore = INT_MIN;
 8001914:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001918:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 3; i++) {
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	e04b      	b.n	80019b8 <findBestMove+0xb2>
        for (int j = 0; j < 3; j++) {
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e042      	b.n	80019ac <findBestMove+0xa6>
            if (board[i][j] == 0) {
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	461a      	mov	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d132      	bne.n	80019a6 <findBestMove+0xa0>
                board[i][j] = computer;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                int score = alphaBeta(board, 1, INT_MIN, INT_MAX, 0, cnt, computer);
 8001958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	2300      	movs	r3, #0
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001968:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800196c:	2101      	movs	r1, #1
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7ff fef0 	bl	8001754 <alphaBeta>
 8001974:	6138      	str	r0, [r7, #16]
                board[i][j] = 0;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	461a      	mov	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4413      	add	r3, r2
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	2100      	movs	r1, #0
 800198a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                if (score > bestScore) {
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	429a      	cmp	r2, r3
 8001994:	dd07      	ble.n	80019a6 <findBestMove+0xa0>
                    bestScore = score;
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	61fb      	str	r3, [r7, #28]
                    *row = i;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	601a      	str	r2, [r3, #0]
                    *col = j;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	ddb9      	ble.n	8001926 <findBestMove+0x20>
    for (int i = 0; i < 3; i++) {
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	ddb0      	ble.n	8001920 <findBestMove+0x1a>
                }
            }
        }
    }
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <count>:
        }
        printf("\n");
    }
}

int count(int board[3][3]) {
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    int res = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 3; i++) {
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	e01b      	b.n	8001a12 <count+0x4a>
        for (int j = 0; j < 3; j++) {
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	e012      	b.n	8001a06 <count+0x3e>
            if (board[i][j] != 0) {
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	461a      	mov	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <count+0x38>
                res++;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 3; j++) {
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	dde9      	ble.n	80019e0 <count+0x18>
    for (int i = 0; i < 3; i++) {
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	dde0      	ble.n	80019da <count+0x12>
            }
        }
    }
    return res;
 8001a18:	697b      	ldr	r3, [r7, #20]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <Board_init>:
#define BLACK 1
#define WHITE 2
#endif

// 初始化 Board 结构体
void Board_init(Board *board, int player, int computer) {
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
    board->cnt = 0;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
    board->player = player;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	605a      	str	r2, [r3, #4]
    board->computer = computer;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	609a      	str	r2, [r3, #8]
    board->turn = 1;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 3; i++) {
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e022      	b.n	8001a94 <Board_init+0x70>
        for (int j = 0; j < 3; j++) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	e019      	b.n	8001a88 <Board_init+0x64>
            board->new_board[i][j] = 0;
 8001a54:	68f9      	ldr	r1, [r7, #12]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4413      	add	r3, r2
 8001a62:	3314      	adds	r3, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            board->old_board[i][j] = 0;
 8001a6a:	68f9      	ldr	r1, [r7, #12]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4413      	add	r3, r2
 8001a78:	330a      	adds	r3, #10
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
        for (int j = 0; j < 3; j++) {
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	3301      	adds	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	dde2      	ble.n	8001a54 <Board_init+0x30>
    for (int i = 0; i < 3; i++) {
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3301      	adds	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	ddd9      	ble.n	8001a4e <Board_init+0x2a>
        }
    }
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <Board_next_turn>:
    board->player = player;
    board->computer = computer;
}

// 交换轮次
void Board_next_turn(Board *board) { board->turn = 3 - board->turn; }
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f1c3 0203 	rsb	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <Board_update_board>:

// 更新棋盘
void Board_update_board(Board *board) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e020      	b.n	8001b14 <Board_update_board+0x50>
        for (int j = 0; j < 3; j++) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	e017      	b.n	8001b08 <Board_update_board+0x44>
            board->old_board[i][j] = board->new_board[i][j];
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3314      	adds	r3, #20
 8001ae8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	4413      	add	r3, r2
 8001afa:	330a      	adds	r3, #10
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4403      	add	r3, r0
 8001b00:	6059      	str	r1, [r3, #4]
        for (int j = 0; j < 3; j++) {
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3301      	adds	r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	dde4      	ble.n	8001ad8 <Board_update_board+0x14>
    for (int i = 0; i < 3; i++) {
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3301      	adds	r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	dddb      	ble.n	8001ad2 <Board_update_board+0xe>
        }
    }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
	...

08001b28 <Board_moveBoard>:

// 棋盘移动函数（需实现）
int Board_moveBoard(Board *board, int id, ROBOT_DATA *data) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
    // 实现棋盘移动逻辑
    if (board->turn == BLACK)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d104      	bne.n	8001b46 <Board_moveBoard+0x1e>
        Robot_move_point(data, 11);
 8001b3c:	210b      	movs	r1, #11
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff f914 	bl	8000d6c <Robot_move_point>
 8001b44:	e003      	b.n	8001b4e <Board_moveBoard+0x26>
    else
        Robot_move_point(data, 10);
 8001b46:	210a      	movs	r1, #10
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff f90f 	bl	8000d6c <Robot_move_point>
    // 吸

    HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b54:	4815      	ldr	r0, [pc, #84]	@ (8001bac <Board_moveBoard+0x84>)
 8001b56:	f001 fdd0 	bl	80036fa <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001b5a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b5e:	f001 f85d 	bl	8002c1c <HAL_Delay>

    Robot_move_point(data, 12);
 8001b62:	210c      	movs	r1, #12
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff f901 	bl	8000d6c <Robot_move_point>
    HAL_Delay(300);
 8001b6a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b6e:	f001 f855 	bl	8002c1c <HAL_Delay>

    Robot_move_point(data, id);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4619      	mov	r1, r3
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff f8f7 	bl	8000d6c <Robot_move_point>
    // 放

    HAL_Delay(300);
 8001b7e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b82:	f001 f84b 	bl	8002c1c <HAL_Delay>
    HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b8c:	4807      	ldr	r0, [pc, #28]	@ (8001bac <Board_moveBoard+0x84>)
 8001b8e:	f001 fdb4 	bl	80036fa <HAL_GPIO_WritePin>

    HAL_Delay(300);
 8001b92:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b96:	f001 f841 	bl	8002c1c <HAL_Delay>
    Robot_move_point(data, 0);
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff f8e5 	bl	8000d6c <Robot_move_point>

    return 0;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40011000 	.word	0x40011000

08001bb0 <Board_currentMove>:

// 当前移动函数（需实现）
int Board_currentMove(Board *board, int x, int y, ROBOT_DATA *data) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
	uint8_t t = y;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	75fb      	strb	r3, [r7, #23]

	        HAL_UART_Transmit(&huart1, &t, 1, 10);
 8001bc4:	f107 0117 	add.w	r1, r7, #23
 8001bc8:	230a      	movs	r3, #10
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4847      	ldr	r0, [pc, #284]	@ (8001cec <Board_currentMove+0x13c>)
 8001bce:	f003 fdc5 	bl	800575c <HAL_UART_Transmit>

	        t = x;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	75fb      	strb	r3, [r7, #23]

	        HAL_UART_Transmit(&huart1, &t, 1, 10);
 8001bd8:	f107 0117 	add.w	r1, r7, #23
 8001bdc:	230a      	movs	r3, #10
 8001bde:	2201      	movs	r2, #1
 8001be0:	4842      	ldr	r0, [pc, #264]	@ (8001cec <Board_currentMove+0x13c>)
 8001be2:	f003 fdbb 	bl	800575c <HAL_UART_Transmit>
    if (board->new_board[(x-1)/3][(x-1)%3] == 0) {
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	4a41      	ldr	r2, [pc, #260]	@ (8001cf0 <Board_currentMove+0x140>)
 8001bec:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf0:	17db      	asrs	r3, r3, #31
 8001bf2:	1ad0      	subs	r0, r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1e59      	subs	r1, r3, #1
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf0 <Board_currentMove+0x140>)
 8001bfa:	fb83 3201 	smull	r3, r2, r3, r1
 8001bfe:	17cb      	asrs	r3, r1, #31
 8001c00:	1ad2      	subs	r2, r2, r3
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	1aca      	subs	r2, r1, r3
 8001c0a:	68f9      	ldr	r1, [r7, #12]
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4403      	add	r3, r0
 8001c12:	4413      	add	r3, r2
 8001c14:	3314      	adds	r3, #20
 8001c16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d130      	bne.n	8001c80 <Board_currentMove+0xd0>
        // 先移动到y

        Robot_move_point(data, y);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4619      	mov	r1, r3
 8001c24:	6838      	ldr	r0, [r7, #0]
 8001c26:	f7ff f8a1 	bl	8000d6c <Robot_move_point>
        // 吸函数
        HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c30:	4830      	ldr	r0, [pc, #192]	@ (8001cf4 <Board_currentMove+0x144>)
 8001c32:	f001 fd62 	bl	80036fa <HAL_GPIO_WritePin>
        HAL_Delay(300);
 8001c36:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c3a:	f000 ffef 	bl	8002c1c <HAL_Delay>

        Robot_move_point(data, 12);
 8001c3e:	210c      	movs	r1, #12
 8001c40:	6838      	ldr	r0, [r7, #0]
 8001c42:	f7ff f893 	bl	8000d6c <Robot_move_point>
        HAL_Delay(300);
 8001c46:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c4a:	f000 ffe7 	bl	8002c1c <HAL_Delay>

        Robot_move_point(data, x);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	6838      	ldr	r0, [r7, #0]
 8001c56:	f7ff f889 	bl	8000d6c <Robot_move_point>

        HAL_Delay(300);
 8001c5a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c5e:	f000 ffdd 	bl	8002c1c <HAL_Delay>
        HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c68:	4822      	ldr	r0, [pc, #136]	@ (8001cf4 <Board_currentMove+0x144>)
 8001c6a:	f001 fd46 	bl	80036fa <HAL_GPIO_WritePin>

        HAL_Delay(300);
 8001c6e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c72:	f000 ffd3 	bl	8002c1c <HAL_Delay>
        Robot_move_point(data, 0);
 8001c76:	2100      	movs	r1, #0
 8001c78:	6838      	ldr	r0, [r7, #0]
 8001c7a:	f7ff f877 	bl	8000d6c <Robot_move_point>
 8001c7e:	e02f      	b.n	8001ce0 <Board_currentMove+0x130>
        // 放
    } else {
        // 先移动到x
        Robot_move_point(data, x);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4619      	mov	r1, r3
 8001c86:	6838      	ldr	r0, [r7, #0]
 8001c88:	f7ff f870 	bl	8000d6c <Robot_move_point>
        // 吸函数
        HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c92:	4818      	ldr	r0, [pc, #96]	@ (8001cf4 <Board_currentMove+0x144>)
 8001c94:	f001 fd31 	bl	80036fa <HAL_GPIO_WritePin>
        HAL_Delay(300);
 8001c98:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c9c:	f000 ffbe 	bl	8002c1c <HAL_Delay>

        Robot_move_point(data, 12);
 8001ca0:	210c      	movs	r1, #12
 8001ca2:	6838      	ldr	r0, [r7, #0]
 8001ca4:	f7ff f862 	bl	8000d6c <Robot_move_point>
        HAL_Delay(300);
 8001ca8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001cac:	f000 ffb6 	bl	8002c1c <HAL_Delay>
        Robot_move_point(data, y);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6838      	ldr	r0, [r7, #0]
 8001cb8:	f7ff f858 	bl	8000d6c <Robot_move_point>
        // 放
        HAL_Delay(300);
 8001cbc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001cc0:	f000 ffac 	bl	8002c1c <HAL_Delay>
        HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cca:	480a      	ldr	r0, [pc, #40]	@ (8001cf4 <Board_currentMove+0x144>)
 8001ccc:	f001 fd15 	bl	80036fa <HAL_GPIO_WritePin>

        HAL_Delay(300);
 8001cd0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001cd4:	f000 ffa2 	bl	8002c1c <HAL_Delay>
        Robot_move_point(data, 0);
 8001cd8:	2100      	movs	r1, #0
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f7ff f846 	bl	8000d6c <Robot_move_point>
    }
    return 0;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200000c8 	.word	0x200000c8
 8001cf0:	55555556 	.word	0x55555556
 8001cf4:	40011000 	.word	0x40011000

08001cf8 <Board_check>:

// 检查棋盘是否改变
int Board_check(Board *board, int *x, int *y) {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b08b      	sub	sp, #44	@ 0x2c
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
    int cnt = 0, flag = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < 3; i++) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	e03b      	b.n	8001d8a <Board_check+0x92>
        for (int j = 0; j < 3; j++) {
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	e032      	b.n	8001d7e <Board_check+0x86>
            if (board->old_board[i][j] &&
 8001d18:	68f9      	ldr	r1, [r7, #12]
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4413      	add	r3, r2
 8001d26:	330a      	adds	r3, #10
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d022      	beq.n	8001d78 <Board_check+0x80>
                board->old_board[i][j] != board->new_board[i][j]) {
 8001d32:	68f9      	ldr	r1, [r7, #12]
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4413      	add	r3, r2
 8001d40:	330a      	adds	r3, #10
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4413      	add	r3, r2
 8001d56:	3314      	adds	r3, #20
 8001d58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
            if (board->old_board[i][j] &&
 8001d5c:	4299      	cmp	r1, r3
 8001d5e:	d00b      	beq.n	8001d78 <Board_check+0x80>
                flag = board->old_board[i][j];
 8001d60:	68f9      	ldr	r1, [r7, #12]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	330a      	adds	r3, #10
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	623b      	str	r3, [r7, #32]
        for (int j = 0; j < 3; j++) {
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	ddc9      	ble.n	8001d18 <Board_check+0x20>
    for (int i = 0; i < 3; i++) {
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	3301      	adds	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	ddc0      	ble.n	8001d12 <Board_check+0x1a>
            }
        }
    }

    if(flag){
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d05d      	beq.n	8001e52 <Board_check+0x15a>
    	for(int i=0;i<3;i++){
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	e057      	b.n	8001e4c <Board_check+0x154>
    		for(int j=0;j<3;j++){
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	e04e      	b.n	8001e40 <Board_check+0x148>
    			if(board->old_board[i][j] == flag &&
 8001da2:	68f9      	ldr	r1, [r7, #12]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4413      	add	r3, r2
 8001db0:	330a      	adds	r3, #10
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	6a3a      	ldr	r2, [r7, #32]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d10b      	bne.n	8001dd6 <Board_check+0xde>
                board->new_board[i][j] == 0 || !board->old_board[i][j] && board->new_board[i][j]==flag){
 8001dbe:	68f9      	ldr	r1, [r7, #12]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4413      	add	r3, r2
 8001dcc:	3314      	adds	r3, #20
 8001dce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    			if(board->old_board[i][j] == flag &&
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d019      	beq.n	8001e0a <Board_check+0x112>
                board->new_board[i][j] == 0 || !board->old_board[i][j] && board->new_board[i][j]==flag){
 8001dd6:	68f9      	ldr	r1, [r7, #12]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	330a      	adds	r3, #10
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d124      	bne.n	8001e3a <Board_check+0x142>
 8001df0:	68f9      	ldr	r1, [r7, #12]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3314      	adds	r3, #20
 8001e00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e04:	6a3a      	ldr	r2, [r7, #32]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d117      	bne.n	8001e3a <Board_check+0x142>
    				if(cnt++){
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <Board_check+0x130>
    					*y=i*3+j+1;
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	441a      	add	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e008      	b.n	8001e3a <Board_check+0x142>
    				} else {
    					*x=i*3+j+1;
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	441a      	add	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	601a      	str	r2, [r3, #0]
    		for(int j=0;j<3;j++){
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	ddad      	ble.n	8001da2 <Board_check+0xaa>
    	for(int i=0;i<3;i++){
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	dda4      	ble.n	8001d9c <Board_check+0xa4>
    		}
    	}
    }


    return flag;
 8001e52:	6a3b      	ldr	r3, [r7, #32]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	372c      	adds	r7, #44	@ 0x2c
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
	...

08001e60 <Board_receiveBoard>:

// 接收棋盘数据
void Board_receiveBoard(Board *board, UART_HandleTypeDef *huart,
                        ROBOT_DATA *data) {
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
    board->send = (uint8_t)0xB1;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	22b1      	movs	r2, #177	@ 0xb1
 8001e70:	779a      	strb	r2, [r3, #30]
    HAL_UART_Transmit(huart, &board->send, 1, 10);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f103 011e 	add.w	r1, r3, #30
 8001e78:	230a      	movs	r3, #10
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	68b8      	ldr	r0, [r7, #8]
 8001e7e:	f003 fc6d 	bl	800575c <HAL_UART_Transmit>
//    sum++;
//    HAL_UART_Transmit(huart, &sum, 1, 10);
    do{
        HAL_UART_Receive_DMA(huart, board->buffer, 10);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	331f      	adds	r3, #31
 8001e86:	220a      	movs	r2, #10
 8001e88:	4619      	mov	r1, r3
 8001e8a:	68b8      	ldr	r0, [r7, #8]
 8001e8c:	f003 fd5a 	bl	8005944 <HAL_UART_Receive_DMA>
    } while(board->buffer[9] != 0xB1);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e96:	2bb1      	cmp	r3, #177	@ 0xb1
 8001e98:	d1f3      	bne.n	8001e82 <Board_receiveBoard+0x22>
    for (int i = 0; i < 9; i++) {
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e01f      	b.n	8001ee0 <Board_receiveBoard+0x80>
        board->new_board[i / 3][i % 3] = board->buffer[i];
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	331f      	adds	r3, #31
 8001ea8:	781c      	ldrb	r4, [r3, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	4a24      	ldr	r2, [pc, #144]	@ (8001f40 <Board_receiveBoard+0xe0>)
 8001eae:	fb82 1203 	smull	r1, r2, r2, r3
 8001eb2:	17db      	asrs	r3, r3, #31
 8001eb4:	1ad0      	subs	r0, r2, r3
 8001eb6:	6979      	ldr	r1, [r7, #20]
 8001eb8:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <Board_receiveBoard+0xe0>)
 8001eba:	fb83 3201 	smull	r3, r2, r3, r1
 8001ebe:	17cb      	asrs	r3, r1, #31
 8001ec0:	1ad2      	subs	r2, r2, r3
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	1aca      	subs	r2, r1, r3
 8001eca:	68f9      	ldr	r1, [r7, #12]
 8001ecc:	4603      	mov	r3, r0
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4403      	add	r3, r0
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3314      	adds	r3, #20
 8001ed6:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
    for (int i = 0; i < 9; i++) {
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	dddc      	ble.n	8001ea0 <Board_receiveBoard+0x40>
    }
    board->buffer[9]=0;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    board->send = (uint8_t)0xB0;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	22b0      	movs	r2, #176	@ 0xb0
 8001ef2:	779a      	strb	r2, [r3, #30]
    HAL_UART_Transmit(huart, &board->send, 1, 10);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f103 011e 	add.w	r1, r3, #30
 8001efa:	230a      	movs	r3, #10
 8001efc:	2201      	movs	r2, #1
 8001efe:	68b8      	ldr	r0, [r7, #8]
 8001f00:	f003 fc2c 	bl	800575c <HAL_UART_Transmit>
    if (Board_check(board, &board->id1, &board->id2)) {
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f103 0114 	add.w	r1, r3, #20
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3318      	adds	r3, #24
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff fef1 	bl	8001cf8 <Board_check>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <Board_receiveBoard+0xd2>
        Board_currentMove(board, board->id1, board->id2, data);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6959      	ldr	r1, [r3, #20]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	699a      	ldr	r2, [r3, #24]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff fe42 	bl	8001bb0 <Board_currentMove>
        Board_next_turn(board);
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7ff fdba 	bl	8001aa6 <Board_next_turn>
    }
    Board_update_board(board);
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff fdc6 	bl	8001ac4 <Board_update_board>
}
 8001f38:	bf00      	nop
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}
 8001f40:	55555556 	.word	0x55555556

08001f44 <FirstPlay>:

int FirstPlay(Board *board, int *x, int *y) {
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
    if(board->cnt != 1) return 0;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d001      	beq.n	8001f5c <FirstPlay+0x18>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e062      	b.n	8002022 <FirstPlay+0xde>
    if(board->new_board[0][0])  {
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <FirstPlay+0x2e>
        *x = 1, *y = 1;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e056      	b.n	8002020 <FirstPlay+0xdc>
    } else if(board->new_board[0][1]){
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <FirstPlay+0x44>
        *x = 0, *y = 0;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e04b      	b.n	8002020 <FirstPlay+0xdc>
    } else if(board->new_board[0][2]){
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <FirstPlay+0x5a>
        *x = 1, *y = 1;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	e040      	b.n	8002020 <FirstPlay+0xdc>
    } else if(board->new_board[1][0]){
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <FirstPlay+0x70>
        *x = 0, *y = 0;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e035      	b.n	8002020 <FirstPlay+0xdc>
    } else if(board->new_board[1][1]){
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <FirstPlay+0x86>
        *x = 0, *y = 0;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e02a      	b.n	8002020 <FirstPlay+0xdc>
    } else if(board->new_board[1][2]){
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <FirstPlay+0x9c>
        *x = 0, *y = 2;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e01f      	b.n	8002020 <FirstPlay+0xdc>
    } else if(board->new_board[2][0]){
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <FirstPlay+0xb2>
        *x = 1, *y = 1;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	e014      	b.n	8002020 <FirstPlay+0xdc>
    } else if(board->new_board[2][1]){
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <FirstPlay+0xc8>
        *x = 0, *y = 1;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e009      	b.n	8002020 <FirstPlay+0xdc>
    } else if(board->new_board[2][2]){
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <FirstPlay+0xdc>
        *x = 1, *y = 1;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]
    }
    return 1;
 8002020:	2301      	movs	r3, #1
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <Board_play>:

// 游戏主循环
int Board_play(Board *board, UART_HandleTypeDef *huart, ROBOT_DATA *data,
               KEY_DATA *Key) {
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b087      	sub	sp, #28
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
	uint8_t t;
    while (board->cnt < 9 && !(board->end = evaluate(board->new_board, board->player))) {
 800203a:	e089      	b.n	8002150 <Board_play+0x124>
//    	OLED_NewFrame();
//    	char t = board->turn + '0';
//    	OLED_PrintString(0, 0, &t, &font16x16, OLED_COLOR_NORMAL);
//		OLED_ShowFrame();
//		HAL_Delay(1000);
        if (board->turn == board->player) {
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	d121      	bne.n	800208c <Board_play+0x60>
            OLED_NewFrame();
 8002048:	f000 faba 	bl	80025c0 <OLED_NewFrame>
            OLED_PrintString(0, 0, "请您下棋", &font16x16, OLED_COLOR_NORMAL);
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4b4d      	ldr	r3, [pc, #308]	@ (8002188 <Board_play+0x15c>)
 8002052:	4a4e      	ldr	r2, [pc, #312]	@ (800218c <Board_play+0x160>)
 8002054:	2100      	movs	r1, #0
 8002056:	2000      	movs	r0, #0
 8002058:	f000 fcd7 	bl	8002a0a <OLED_PrintString>
            OLED_ShowFrame();
 800205c:	f000 fabc 	bl	80025d8 <OLED_ShowFrame>
            while (data->where == 0) {
 8002060:	e00a      	b.n	8002078 <Board_play+0x4c>
                Key_scan_low(Key);
 8002062:	6838      	ldr	r0, [r7, #0]
 8002064:	f000 f896 	bl	8002194 <Key_scan_low>
                Key_scan_high(Key);
 8002068:	6838      	ldr	r0, [r7, #0]
 800206a:	f000 f9c5 	bl	80023f8 <Key_scan_high>
                data->where = Key->Key_point;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	785a      	ldrb	r2, [r3, #1]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            while (data->where == 0) {
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0ef      	beq.n	8002062 <Board_play+0x36>
            }
            data->where = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800208a:	e051      	b.n	8002130 <Board_play+0x104>
//            OLED_NewFrame();
//            OLED_PrintString(0, 0, "123", &font16x16, OLED_COLOR_NORMAL);
//            OLED_ShowFrame();
//            HAL_Delay(1000);
        } else {
            OLED_NewFrame();
 800208c:	f000 fa98 	bl	80025c0 <OLED_NewFrame>
//            OLED_PrintString(0, 0, "机器下棋", &font16x16, OLED_COLOR_NORMAL);
            OLED_PrintString(0, 0, "机器下棋", &font16x16, OLED_COLOR_NORMAL);
 8002090:	2300      	movs	r3, #0
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4b3c      	ldr	r3, [pc, #240]	@ (8002188 <Board_play+0x15c>)
 8002096:	4a3e      	ldr	r2, [pc, #248]	@ (8002190 <Board_play+0x164>)
 8002098:	2100      	movs	r1, #0
 800209a:	2000      	movs	r0, #0
 800209c:	f000 fcb5 	bl	8002a0a <OLED_PrintString>
            OLED_ShowFrame();
 80020a0:	f000 fa9a 	bl	80025d8 <OLED_ShowFrame>
            if (board->cnt == 0) {
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <Board_play+0x8c>

                Board_moveBoard(board, 5, data);
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	2105      	movs	r1, #5
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff fd39 	bl	8001b28 <Board_moveBoard>
 80020b6:	e03b      	b.n	8002130 <Board_play+0x104>
            } else if(FirstPlay(board, &board->id1, &board->id2)) {
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f103 0114 	add.w	r1, r3, #20
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3318      	adds	r3, #24
 80020c2:	461a      	mov	r2, r3
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff ff3d 	bl	8001f44 <FirstPlay>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00e      	beq.n	80020ee <Board_play+0xc2>

                Board_moveBoard(board, board->id1 * 3 + board->id2 + 1, data);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	441a      	add	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	4413      	add	r3, r2
 80020e0:	3301      	adds	r3, #1
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4619      	mov	r1, r3
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff fd1e 	bl	8001b28 <Board_moveBoard>
 80020ec:	e020      	b.n	8002130 <Board_play+0x104>
            } else {
//            	t = 10;
//            	HAL_UART_Transmit(&huart1, &t, 1, 10);
//            	OLED_PrintString(0, 15, "3", &font16x16, OLED_COLOR_NORMAL);
//            	OLED_ShowFrame();
            	findBestMove(board->new_board, &board->id1, &board->id2,
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f103 0114 	add.w	r1, r3, #20
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f103 0218 	add.w	r2, r3, #24
                             9 - board->cnt, board->computer);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
            	findBestMove(board->new_board, &board->id1, &board->id2,
 8002104:	f1c3 0409 	rsb	r4, r3, #9
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	4623      	mov	r3, r4
 8002110:	f7ff fbf9 	bl	8001906 <findBestMove>
                Board_moveBoard(board, board->id1 * 3 + board->id2 + 1, data);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	441a      	add	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	4413      	add	r3, r2
 8002124:	3301      	adds	r3, #1
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4619      	mov	r1, r3
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff fcfc 	bl	8001b28 <Board_moveBoard>
//                t = board->id1 * 3 + board->id2 + 1;
//                HAL_UART_Transmit(&huart1, &t, 1, 10);
            }
        }
        Board_receiveBoard(board, huart, data);
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff fe93 	bl	8001e60 <Board_receiveBoard>
        board->cnt = count(board->new_board);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3350      	adds	r3, #80	@ 0x50
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fc42 	bl	80019c8 <count>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	601a      	str	r2, [r3, #0]
//        t = board->cnt;
//        HAL_UART_Transmit(&huart1, &t, 1, 10);
        Board_next_turn(board);
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f7ff fcab 	bl	8001aa6 <Board_next_turn>
    while (board->cnt < 9 && !(board->end = evaluate(board->new_board, board->player))) {
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b08      	cmp	r3, #8
 8002156:	dc10      	bgt.n	800217a <Board_play+0x14e>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f7ff fa25 	bl	80015b4 <evaluate>
 800216a:	4602      	mov	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	611a      	str	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	f43f af61 	beq.w	800203c <Board_play+0x10>
    }
    return board->end;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	691b      	ldr	r3, [r3, #16]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bd90      	pop	{r4, r7, pc}
 8002186:	bf00      	nop
 8002188:	0800741c 	.word	0x0800741c
 800218c:	080069b4 	.word	0x080069b4
 8002190:	080069c4 	.word	0x080069c4

08002194 <Key_scan_low>:
 */

#include "key.h"

void Key_scan_low(KEY_DATA *data)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	if (data->flag == 1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	f000 8120 	beq.w	80023e6 <Key_scan_low+0x252>
		return;
	if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == 0)
 80021a6:	2101      	movs	r1, #1
 80021a8:	4891      	ldr	r0, [pc, #580]	@ (80023f0 <Key_scan_low+0x25c>)
 80021aa:	f001 fa8f 	bl	80036cc <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d112      	bne.n	80021da <Key_scan_low+0x46>
	{
		HAL_Delay(10);
 80021b4:	200a      	movs	r0, #10
 80021b6:	f000 fd31 	bl	8002c1c <HAL_Delay>
		if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == 0)
 80021ba:	2101      	movs	r1, #1
 80021bc:	488c      	ldr	r0, [pc, #560]	@ (80023f0 <Key_scan_low+0x25c>)
 80021be:	f001 fa85 	bl	80036cc <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d108      	bne.n	80021da <Key_scan_low+0x46>
		{
			data->flag = 1;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
			data->Key_point = 0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	705a      	strb	r2, [r3, #1]
			data->Key_data = 0 + 0x30;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2230      	movs	r2, #48	@ 0x30
 80021d8:	709a      	strb	r2, [r3, #2]
		}
	}
	if (HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == 0)
 80021da:	2102      	movs	r1, #2
 80021dc:	4884      	ldr	r0, [pc, #528]	@ (80023f0 <Key_scan_low+0x25c>)
 80021de:	f001 fa75 	bl	80036cc <HAL_GPIO_ReadPin>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d115      	bne.n	8002214 <Key_scan_low+0x80>
	{
		HAL_Delay(10);
 80021e8:	200a      	movs	r0, #10
 80021ea:	f000 fd17 	bl	8002c1c <HAL_Delay>
		if (HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == 0)
 80021ee:	2102      	movs	r1, #2
 80021f0:	487f      	ldr	r0, [pc, #508]	@ (80023f0 <Key_scan_low+0x25c>)
 80021f2:	f001 fa6b 	bl	80036cc <HAL_GPIO_ReadPin>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <Key_scan_low+0x80>
		{
			data->flag = 1;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
			data->Key_point = 1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	705a      	strb	r2, [r3, #1]
			data->Key_data = data->Key_point + 0x30;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	3330      	adds	r3, #48	@ 0x30
 800220e:	b2da      	uxtb	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	709a      	strb	r2, [r3, #2]
		}
	}
	if (HAL_GPIO_ReadPin(KEY3_GPIO_Port, KEY3_Pin) == 0)
 8002214:	2104      	movs	r1, #4
 8002216:	4876      	ldr	r0, [pc, #472]	@ (80023f0 <Key_scan_low+0x25c>)
 8002218:	f001 fa58 	bl	80036cc <HAL_GPIO_ReadPin>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <Key_scan_low+0xba>
	{
		HAL_Delay(10);
 8002222:	200a      	movs	r0, #10
 8002224:	f000 fcfa 	bl	8002c1c <HAL_Delay>
		if (HAL_GPIO_ReadPin(KEY3_GPIO_Port, KEY3_Pin) == 0)
 8002228:	2104      	movs	r1, #4
 800222a:	4871      	ldr	r0, [pc, #452]	@ (80023f0 <Key_scan_low+0x25c>)
 800222c:	f001 fa4e 	bl	80036cc <HAL_GPIO_ReadPin>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10b      	bne.n	800224e <Key_scan_low+0xba>
		{
			data->flag = 1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
			data->Key_point = 2;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	705a      	strb	r2, [r3, #1]
			data->Key_data = data->Key_point + 0x30;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	785b      	ldrb	r3, [r3, #1]
 8002246:	3330      	adds	r3, #48	@ 0x30
 8002248:	b2da      	uxtb	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	709a      	strb	r2, [r3, #2]
		}
	}
	if (HAL_GPIO_ReadPin(KEY4_GPIO_Port, KEY4_Pin) == 0)
 800224e:	2108      	movs	r1, #8
 8002250:	4867      	ldr	r0, [pc, #412]	@ (80023f0 <Key_scan_low+0x25c>)
 8002252:	f001 fa3b 	bl	80036cc <HAL_GPIO_ReadPin>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d115      	bne.n	8002288 <Key_scan_low+0xf4>
	{
		HAL_Delay(10);
 800225c:	200a      	movs	r0, #10
 800225e:	f000 fcdd 	bl	8002c1c <HAL_Delay>
		if (HAL_GPIO_ReadPin(KEY4_GPIO_Port, KEY4_Pin) == 0)
 8002262:	2108      	movs	r1, #8
 8002264:	4862      	ldr	r0, [pc, #392]	@ (80023f0 <Key_scan_low+0x25c>)
 8002266:	f001 fa31 	bl	80036cc <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10b      	bne.n	8002288 <Key_scan_low+0xf4>
		{
			data->flag = 1;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
			data->Key_point = 3;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	705a      	strb	r2, [r3, #1]
			data->Key_data = data->Key_point + 0x30;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	785b      	ldrb	r3, [r3, #1]
 8002280:	3330      	adds	r3, #48	@ 0x30
 8002282:	b2da      	uxtb	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	709a      	strb	r2, [r3, #2]
		}
	}
	if (HAL_GPIO_ReadPin(KEY5_GPIO_Port, KEY5_Pin) == 0)
 8002288:	2110      	movs	r1, #16
 800228a:	4859      	ldr	r0, [pc, #356]	@ (80023f0 <Key_scan_low+0x25c>)
 800228c:	f001 fa1e 	bl	80036cc <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <Key_scan_low+0x12e>
	{
		HAL_Delay(10);
 8002296:	200a      	movs	r0, #10
 8002298:	f000 fcc0 	bl	8002c1c <HAL_Delay>
		if (HAL_GPIO_ReadPin(KEY5_GPIO_Port, KEY5_Pin) == 0)
 800229c:	2110      	movs	r1, #16
 800229e:	4854      	ldr	r0, [pc, #336]	@ (80023f0 <Key_scan_low+0x25c>)
 80022a0:	f001 fa14 	bl	80036cc <HAL_GPIO_ReadPin>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10b      	bne.n	80022c2 <Key_scan_low+0x12e>
		{
			data->flag = 1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
			data->Key_point = 4;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2204      	movs	r2, #4
 80022b4:	705a      	strb	r2, [r3, #1]
			data->Key_data = data->Key_point + 0x30;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	3330      	adds	r3, #48	@ 0x30
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	709a      	strb	r2, [r3, #2]
		}
	}
	if (HAL_GPIO_ReadPin(KEY6_GPIO_Port, KEY6_Pin) == 0)
 80022c2:	2120      	movs	r1, #32
 80022c4:	484a      	ldr	r0, [pc, #296]	@ (80023f0 <Key_scan_low+0x25c>)
 80022c6:	f001 fa01 	bl	80036cc <HAL_GPIO_ReadPin>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d115      	bne.n	80022fc <Key_scan_low+0x168>
	{
		HAL_Delay(10);
 80022d0:	200a      	movs	r0, #10
 80022d2:	f000 fca3 	bl	8002c1c <HAL_Delay>
		if (HAL_GPIO_ReadPin(KEY6_GPIO_Port, KEY6_Pin) == 0)
 80022d6:	2120      	movs	r1, #32
 80022d8:	4845      	ldr	r0, [pc, #276]	@ (80023f0 <Key_scan_low+0x25c>)
 80022da:	f001 f9f7 	bl	80036cc <HAL_GPIO_ReadPin>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10b      	bne.n	80022fc <Key_scan_low+0x168>
		{
			data->flag = 1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
			data->Key_point = 5;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2205      	movs	r2, #5
 80022ee:	705a      	strb	r2, [r3, #1]
			data->Key_data = data->Key_point + 0x30;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	3330      	adds	r3, #48	@ 0x30
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	709a      	strb	r2, [r3, #2]
		}
	}
	if (HAL_GPIO_ReadPin(KEY7_GPIO_Port, KEY7_Pin) == 0)
 80022fc:	2140      	movs	r1, #64	@ 0x40
 80022fe:	483c      	ldr	r0, [pc, #240]	@ (80023f0 <Key_scan_low+0x25c>)
 8002300:	f001 f9e4 	bl	80036cc <HAL_GPIO_ReadPin>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d115      	bne.n	8002336 <Key_scan_low+0x1a2>
	{
		HAL_Delay(10);
 800230a:	200a      	movs	r0, #10
 800230c:	f000 fc86 	bl	8002c1c <HAL_Delay>
		if (HAL_GPIO_ReadPin(KEY7_GPIO_Port, KEY7_Pin) == 0)
 8002310:	2140      	movs	r1, #64	@ 0x40
 8002312:	4837      	ldr	r0, [pc, #220]	@ (80023f0 <Key_scan_low+0x25c>)
 8002314:	f001 f9da 	bl	80036cc <HAL_GPIO_ReadPin>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10b      	bne.n	8002336 <Key_scan_low+0x1a2>
		{
			data->flag = 1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
			data->Key_point = 6;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2206      	movs	r2, #6
 8002328:	705a      	strb	r2, [r3, #1]
			data->Key_data = data->Key_point + 0x30;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	3330      	adds	r3, #48	@ 0x30
 8002330:	b2da      	uxtb	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	709a      	strb	r2, [r3, #2]
		}
	}
	if (HAL_GPIO_ReadPin(KEY8_GPIO_Port, KEY8_Pin) == 0)
 8002336:	2180      	movs	r1, #128	@ 0x80
 8002338:	482d      	ldr	r0, [pc, #180]	@ (80023f0 <Key_scan_low+0x25c>)
 800233a:	f001 f9c7 	bl	80036cc <HAL_GPIO_ReadPin>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d115      	bne.n	8002370 <Key_scan_low+0x1dc>
	{
		HAL_Delay(10);
 8002344:	200a      	movs	r0, #10
 8002346:	f000 fc69 	bl	8002c1c <HAL_Delay>
		if (HAL_GPIO_ReadPin(KEY8_GPIO_Port, KEY8_Pin) == 0)
 800234a:	2180      	movs	r1, #128	@ 0x80
 800234c:	4828      	ldr	r0, [pc, #160]	@ (80023f0 <Key_scan_low+0x25c>)
 800234e:	f001 f9bd 	bl	80036cc <HAL_GPIO_ReadPin>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10b      	bne.n	8002370 <Key_scan_low+0x1dc>
		{
			data->flag = 1;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
			data->Key_point = 7;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2207      	movs	r2, #7
 8002362:	705a      	strb	r2, [r3, #1]
			data->Key_data = data->Key_point + 0x30;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	785b      	ldrb	r3, [r3, #1]
 8002368:	3330      	adds	r3, #48	@ 0x30
 800236a:	b2da      	uxtb	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	709a      	strb	r2, [r3, #2]
		}
	}
	if (HAL_GPIO_ReadPin(KEY9_GPIO_Port, KEY9_Pin) == 0)
 8002370:	2101      	movs	r1, #1
 8002372:	4820      	ldr	r0, [pc, #128]	@ (80023f4 <Key_scan_low+0x260>)
 8002374:	f001 f9aa 	bl	80036cc <HAL_GPIO_ReadPin>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d115      	bne.n	80023aa <Key_scan_low+0x216>
	{
		HAL_Delay(10);
 800237e:	200a      	movs	r0, #10
 8002380:	f000 fc4c 	bl	8002c1c <HAL_Delay>
		if (HAL_GPIO_ReadPin(KEY9_GPIO_Port, KEY9_Pin) == 0)
 8002384:	2101      	movs	r1, #1
 8002386:	481b      	ldr	r0, [pc, #108]	@ (80023f4 <Key_scan_low+0x260>)
 8002388:	f001 f9a0 	bl	80036cc <HAL_GPIO_ReadPin>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10b      	bne.n	80023aa <Key_scan_low+0x216>
		{
			data->flag = 1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
			data->Key_point = 8;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2208      	movs	r2, #8
 800239c:	705a      	strb	r2, [r3, #1]
			data->Key_data = data->Key_point + 0x30;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	785b      	ldrb	r3, [r3, #1]
 80023a2:	3330      	adds	r3, #48	@ 0x30
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	709a      	strb	r2, [r3, #2]
		}
	}
	if (HAL_GPIO_ReadPin(KEY10_GPIO_Port, KEY10_Pin) == 0)
 80023aa:	2102      	movs	r1, #2
 80023ac:	4811      	ldr	r0, [pc, #68]	@ (80023f4 <Key_scan_low+0x260>)
 80023ae:	f001 f98d 	bl	80036cc <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d117      	bne.n	80023e8 <Key_scan_low+0x254>
	{
		HAL_Delay(10);
 80023b8:	200a      	movs	r0, #10
 80023ba:	f000 fc2f 	bl	8002c1c <HAL_Delay>
		if (HAL_GPIO_ReadPin(KEY10_GPIO_Port, KEY10_Pin) == 0)
 80023be:	2102      	movs	r1, #2
 80023c0:	480c      	ldr	r0, [pc, #48]	@ (80023f4 <Key_scan_low+0x260>)
 80023c2:	f001 f983 	bl	80036cc <HAL_GPIO_ReadPin>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10d      	bne.n	80023e8 <Key_scan_low+0x254>
		{
			data->flag = 1;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
			data->Key_point = 9;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2209      	movs	r2, #9
 80023d6:	705a      	strb	r2, [r3, #1]
			data->Key_data = data->Key_point + 0x30;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	3330      	adds	r3, #48	@ 0x30
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	709a      	strb	r2, [r3, #2]
 80023e4:	e000      	b.n	80023e8 <Key_scan_low+0x254>
		return;
 80023e6:	bf00      	nop
		}
	}
}
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40010800 	.word	0x40010800
 80023f4:	40010c00 	.word	0x40010c00

080023f8 <Key_scan_high>:

void Key_scan_high(KEY_DATA *data)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	if (data->flag == 0)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d04f      	beq.n	80024a8 <Key_scan_high+0xb0>
		return;
	if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == 1)
 8002408:	2101      	movs	r1, #1
 800240a:	4829      	ldr	r0, [pc, #164]	@ (80024b0 <Key_scan_high+0xb8>)
 800240c:	f001 f95e 	bl	80036cc <HAL_GPIO_ReadPin>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d149      	bne.n	80024aa <Key_scan_high+0xb2>
	{
		if (HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == 1)
 8002416:	2102      	movs	r1, #2
 8002418:	4825      	ldr	r0, [pc, #148]	@ (80024b0 <Key_scan_high+0xb8>)
 800241a:	f001 f957 	bl	80036cc <HAL_GPIO_ReadPin>
 800241e:	4603      	mov	r3, r0
 8002420:	2b01      	cmp	r3, #1
 8002422:	d142      	bne.n	80024aa <Key_scan_high+0xb2>
		{
			if (HAL_GPIO_ReadPin(KEY3_GPIO_Port, KEY3_Pin) == 1)
 8002424:	2104      	movs	r1, #4
 8002426:	4822      	ldr	r0, [pc, #136]	@ (80024b0 <Key_scan_high+0xb8>)
 8002428:	f001 f950 	bl	80036cc <HAL_GPIO_ReadPin>
 800242c:	4603      	mov	r3, r0
 800242e:	2b01      	cmp	r3, #1
 8002430:	d13b      	bne.n	80024aa <Key_scan_high+0xb2>
			{
				if (HAL_GPIO_ReadPin(KEY4_GPIO_Port, KEY4_Pin) == 1)
 8002432:	2108      	movs	r1, #8
 8002434:	481e      	ldr	r0, [pc, #120]	@ (80024b0 <Key_scan_high+0xb8>)
 8002436:	f001 f949 	bl	80036cc <HAL_GPIO_ReadPin>
 800243a:	4603      	mov	r3, r0
 800243c:	2b01      	cmp	r3, #1
 800243e:	d134      	bne.n	80024aa <Key_scan_high+0xb2>
				{
					if (HAL_GPIO_ReadPin(KEY5_GPIO_Port, KEY5_Pin) == 1)
 8002440:	2110      	movs	r1, #16
 8002442:	481b      	ldr	r0, [pc, #108]	@ (80024b0 <Key_scan_high+0xb8>)
 8002444:	f001 f942 	bl	80036cc <HAL_GPIO_ReadPin>
 8002448:	4603      	mov	r3, r0
 800244a:	2b01      	cmp	r3, #1
 800244c:	d12d      	bne.n	80024aa <Key_scan_high+0xb2>
					{
						if (HAL_GPIO_ReadPin(KEY6_GPIO_Port, KEY6_Pin) == 1)
 800244e:	2120      	movs	r1, #32
 8002450:	4817      	ldr	r0, [pc, #92]	@ (80024b0 <Key_scan_high+0xb8>)
 8002452:	f001 f93b 	bl	80036cc <HAL_GPIO_ReadPin>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	d126      	bne.n	80024aa <Key_scan_high+0xb2>
						{
							if (HAL_GPIO_ReadPin(KEY7_GPIO_Port, KEY7_Pin) == 1)
 800245c:	2140      	movs	r1, #64	@ 0x40
 800245e:	4814      	ldr	r0, [pc, #80]	@ (80024b0 <Key_scan_high+0xb8>)
 8002460:	f001 f934 	bl	80036cc <HAL_GPIO_ReadPin>
 8002464:	4603      	mov	r3, r0
 8002466:	2b01      	cmp	r3, #1
 8002468:	d11f      	bne.n	80024aa <Key_scan_high+0xb2>
							{
								if (HAL_GPIO_ReadPin(KEY8_GPIO_Port, KEY8_Pin) == 1)
 800246a:	2180      	movs	r1, #128	@ 0x80
 800246c:	4810      	ldr	r0, [pc, #64]	@ (80024b0 <Key_scan_high+0xb8>)
 800246e:	f001 f92d 	bl	80036cc <HAL_GPIO_ReadPin>
 8002472:	4603      	mov	r3, r0
 8002474:	2b01      	cmp	r3, #1
 8002476:	d118      	bne.n	80024aa <Key_scan_high+0xb2>
								{
									if (HAL_GPIO_ReadPin(KEY9_GPIO_Port, KEY9_Pin) == 1)
 8002478:	2101      	movs	r1, #1
 800247a:	480e      	ldr	r0, [pc, #56]	@ (80024b4 <Key_scan_high+0xbc>)
 800247c:	f001 f926 	bl	80036cc <HAL_GPIO_ReadPin>
 8002480:	4603      	mov	r3, r0
 8002482:	2b01      	cmp	r3, #1
 8002484:	d111      	bne.n	80024aa <Key_scan_high+0xb2>
									{
										if (HAL_GPIO_ReadPin(KEY10_GPIO_Port, KEY10_Pin) == 1)
 8002486:	2102      	movs	r1, #2
 8002488:	480a      	ldr	r0, [pc, #40]	@ (80024b4 <Key_scan_high+0xbc>)
 800248a:	f001 f91f 	bl	80036cc <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10a      	bne.n	80024aa <Key_scan_high+0xb2>
										{
											data->flag = 0;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
											data->Key_point = 0;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	705a      	strb	r2, [r3, #1]
											data->Key_data = 0x30;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2230      	movs	r2, #48	@ 0x30
 80024a4:	709a      	strb	r2, [r3, #2]
 80024a6:	e000      	b.n	80024aa <Key_scan_high+0xb2>
		return;
 80024a8:	bf00      	nop
					}
				}
			}
		}
	}
}
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40010800 	.word	0x40010800
 80024b4:	40010c00 	.word	0x40010c00

080024b8 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af02      	add	r7, sp, #8
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c2, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	9200      	str	r2, [sp, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	2178      	movs	r1, #120	@ 0x78
 80024d2:	4803      	ldr	r0, [pc, #12]	@ (80024e0 <OLED_Send+0x28>)
 80024d4:	f001 fa6e 	bl	80039b4 <HAL_I2C_Master_Transmit>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	2000002c 	.word	0x2000002c

080024e4 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80024ee:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <OLED_SendCmd+0x20>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80024f4:	2102      	movs	r1, #2
 80024f6:	4803      	ldr	r0, [pc, #12]	@ (8002504 <OLED_SendCmd+0x20>)
 80024f8:	f7ff ffde 	bl	80024b8 <OLED_Send>
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	200007b0 	.word	0x200007b0

08002508 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 800250c:	20ae      	movs	r0, #174	@ 0xae
 800250e:	f7ff ffe9 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8002512:	2020      	movs	r0, #32
 8002514:	f7ff ffe6 	bl	80024e4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8002518:	2010      	movs	r0, #16
 800251a:	f7ff ffe3 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 800251e:	20b0      	movs	r0, #176	@ 0xb0
 8002520:	f7ff ffe0 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8002524:	20c8      	movs	r0, #200	@ 0xc8
 8002526:	f7ff ffdd 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 800252a:	2000      	movs	r0, #0
 800252c:	f7ff ffda 	bl	80024e4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8002530:	2010      	movs	r0, #16
 8002532:	f7ff ffd7 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8002536:	2040      	movs	r0, #64	@ 0x40
 8002538:	f7ff ffd4 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 800253c:	2081      	movs	r0, #129	@ 0x81
 800253e:	f7ff ffd1 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8002542:	20df      	movs	r0, #223	@ 0xdf
 8002544:	f7ff ffce 	bl	80024e4 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8002548:	20a1      	movs	r0, #161	@ 0xa1
 800254a:	f7ff ffcb 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 800254e:	20a6      	movs	r0, #166	@ 0xa6
 8002550:	f7ff ffc8 	bl	80024e4 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8002554:	20a8      	movs	r0, #168	@ 0xa8
 8002556:	f7ff ffc5 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 800255a:	203f      	movs	r0, #63	@ 0x3f
 800255c:	f7ff ffc2 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8002560:	20a4      	movs	r0, #164	@ 0xa4
 8002562:	f7ff ffbf 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8002566:	20d3      	movs	r0, #211	@ 0xd3
 8002568:	f7ff ffbc 	bl	80024e4 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 800256c:	2000      	movs	r0, #0
 800256e:	f7ff ffb9 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8002572:	20d5      	movs	r0, #213	@ 0xd5
 8002574:	f7ff ffb6 	bl	80024e4 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8002578:	20f0      	movs	r0, #240	@ 0xf0
 800257a:	f7ff ffb3 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 800257e:	20d9      	movs	r0, #217	@ 0xd9
 8002580:	f7ff ffb0 	bl	80024e4 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8002584:	2022      	movs	r0, #34	@ 0x22
 8002586:	f7ff ffad 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 800258a:	20da      	movs	r0, #218	@ 0xda
 800258c:	f7ff ffaa 	bl	80024e4 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8002590:	2012      	movs	r0, #18
 8002592:	f7ff ffa7 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8002596:	20db      	movs	r0, #219	@ 0xdb
 8002598:	f7ff ffa4 	bl	80024e4 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 800259c:	2020      	movs	r0, #32
 800259e:	f7ff ffa1 	bl	80024e4 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 80025a2:	208d      	movs	r0, #141	@ 0x8d
 80025a4:	f7ff ff9e 	bl	80024e4 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 80025a8:	2014      	movs	r0, #20
 80025aa:	f7ff ff9b 	bl	80024e4 <OLED_SendCmd>

  OLED_NewFrame();
 80025ae:	f000 f807 	bl	80025c0 <OLED_NewFrame>
  OLED_ShowFrame();
 80025b2:	f000 f811 	bl	80025d8 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80025b6:	20af      	movs	r0, #175	@ 0xaf
 80025b8:	f7ff ff94 	bl	80024e4 <OLED_SendCmd>
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 80025c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025c8:	2100      	movs	r1, #0
 80025ca:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <OLED_NewFrame+0x14>)
 80025cc:	f004 f96c 	bl	80068a8 <memset>
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200003b0 	.word	0x200003b0

080025d8 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80025de:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <OLED_ShowFrame+0x5c>)
 80025e0:	2240      	movs	r2, #64	@ 0x40
 80025e2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	e01b      	b.n	8002622 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	3b50      	subs	r3, #80	@ 0x50
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff77 	bl	80024e4 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7ff ff74 	bl	80024e4 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80025fc:	2010      	movs	r0, #16
 80025fe:	f7ff ff71 	bl	80024e4 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8002602:	480d      	ldr	r0, [pc, #52]	@ (8002638 <OLED_ShowFrame+0x60>)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	01db      	lsls	r3, r3, #7
 8002608:	4a0c      	ldr	r2, [pc, #48]	@ (800263c <OLED_ShowFrame+0x64>)
 800260a:	4413      	add	r3, r2
 800260c:	2280      	movs	r2, #128	@ 0x80
 800260e:	4619      	mov	r1, r3
 8002610:	f004 f976 	bl	8006900 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8002614:	2181      	movs	r1, #129	@ 0x81
 8002616:	4807      	ldr	r0, [pc, #28]	@ (8002634 <OLED_ShowFrame+0x5c>)
 8002618:	f7ff ff4e 	bl	80024b8 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	3301      	adds	r3, #1
 8002620:	71fb      	strb	r3, [r7, #7]
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2b07      	cmp	r3, #7
 8002626:	d9e0      	bls.n	80025ea <OLED_ShowFrame+0x12>
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200007b4 	.word	0x200007b4
 8002638:	200007b5 	.word	0x200007b5
 800263c:	200003b0 	.word	0x200003b0

08002640 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8002640:	b490      	push	{r4, r7}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	4604      	mov	r4, r0
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	461a      	mov	r2, r3
 800264e:	4623      	mov	r3, r4
 8002650:	71fb      	strb	r3, [r7, #7]
 8002652:	4603      	mov	r3, r0
 8002654:	71bb      	strb	r3, [r7, #6]
 8002656:	460b      	mov	r3, r1
 8002658:	717b      	strb	r3, [r7, #5]
 800265a:	4613      	mov	r3, r2
 800265c:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2b07      	cmp	r3, #7
 8002662:	d860      	bhi.n	8002726 <OLED_SetByte_Fine+0xe6>
 8002664:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002668:	2b00      	cmp	r3, #0
 800266a:	db5c      	blt.n	8002726 <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 800266c:	7d3b      	ldrb	r3, [r7, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8002672:	797b      	ldrb	r3, [r7, #5]
 8002674:	43db      	mvns	r3, r3
 8002676:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8002678:	7c3b      	ldrb	r3, [r7, #16]
 800267a:	3301      	adds	r3, #1
 800267c:	22ff      	movs	r2, #255	@ 0xff
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	b25a      	sxtb	r2, r3
 8002684:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002688:	4313      	orrs	r3, r2
 800268a:	b25a      	sxtb	r2, r3
 800268c:	793b      	ldrb	r3, [r7, #4]
 800268e:	f1c3 0308 	rsb	r3, r3, #8
 8002692:	21ff      	movs	r1, #255	@ 0xff
 8002694:	fa41 f303 	asr.w	r3, r1, r3
 8002698:	b25b      	sxtb	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b25b      	sxtb	r3, r3
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	4b23      	ldr	r3, [pc, #140]	@ (8002730 <OLED_SetByte_Fine+0xf0>)
 80026a2:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 80026a4:	79fa      	ldrb	r2, [r7, #7]
 80026a6:	79bb      	ldrb	r3, [r7, #6]
 80026a8:	4922      	ldr	r1, [pc, #136]	@ (8002734 <OLED_SetByte_Fine+0xf4>)
 80026aa:	01d2      	lsls	r2, r2, #7
 80026ac:	440a      	add	r2, r1
 80026ae:	4413      	add	r3, r2
 80026b0:	7818      	ldrb	r0, [r3, #0]
 80026b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002730 <OLED_SetByte_Fine+0xf0>)
 80026b4:	7819      	ldrb	r1, [r3, #0]
 80026b6:	79fa      	ldrb	r2, [r7, #7]
 80026b8:	79bb      	ldrb	r3, [r7, #6]
 80026ba:	4001      	ands	r1, r0
 80026bc:	b2c8      	uxtb	r0, r1
 80026be:	491d      	ldr	r1, [pc, #116]	@ (8002734 <OLED_SetByte_Fine+0xf4>)
 80026c0:	01d2      	lsls	r2, r2, #7
 80026c2:	440a      	add	r2, r1
 80026c4:	4413      	add	r3, r2
 80026c6:	4602      	mov	r2, r0
 80026c8:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 80026ca:	7c3b      	ldrb	r3, [r7, #16]
 80026cc:	3301      	adds	r3, #1
 80026ce:	22ff      	movs	r2, #255	@ 0xff
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	b25b      	sxtb	r3, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	b25a      	sxtb	r2, r3
 80026da:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80026de:	4013      	ands	r3, r2
 80026e0:	b25a      	sxtb	r2, r3
 80026e2:	793b      	ldrb	r3, [r7, #4]
 80026e4:	f1c3 0308 	rsb	r3, r3, #8
 80026e8:	21ff      	movs	r1, #255	@ 0xff
 80026ea:	fa41 f303 	asr.w	r3, r1, r3
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	b25b      	sxtb	r3, r3
 80026f4:	4013      	ands	r3, r2
 80026f6:	b25b      	sxtb	r3, r3
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <OLED_SetByte_Fine+0xf0>)
 80026fc:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 80026fe:	79fa      	ldrb	r2, [r7, #7]
 8002700:	79bb      	ldrb	r3, [r7, #6]
 8002702:	490c      	ldr	r1, [pc, #48]	@ (8002734 <OLED_SetByte_Fine+0xf4>)
 8002704:	01d2      	lsls	r2, r2, #7
 8002706:	440a      	add	r2, r1
 8002708:	4413      	add	r3, r2
 800270a:	7818      	ldrb	r0, [r3, #0]
 800270c:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <OLED_SetByte_Fine+0xf0>)
 800270e:	7819      	ldrb	r1, [r3, #0]
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	79bb      	ldrb	r3, [r7, #6]
 8002714:	4301      	orrs	r1, r0
 8002716:	b2c8      	uxtb	r0, r1
 8002718:	4906      	ldr	r1, [pc, #24]	@ (8002734 <OLED_SetByte_Fine+0xf4>)
 800271a:	01d2      	lsls	r2, r2, #7
 800271c:	440a      	add	r2, r1
 800271e:	4413      	add	r3, r2
 8002720:	4602      	mov	r2, r0
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e000      	b.n	8002728 <OLED_SetByte_Fine+0xe8>
    return;
 8002726:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bc90      	pop	{r4, r7}
 800272e:	4770      	bx	lr
 8002730:	20000835 	.word	0x20000835
 8002734:	200003b0 	.word	0x200003b0

08002738 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af02      	add	r7, sp, #8
 800273e:	4604      	mov	r4, r0
 8002740:	4608      	mov	r0, r1
 8002742:	4611      	mov	r1, r2
 8002744:	461a      	mov	r2, r3
 8002746:	4623      	mov	r3, r4
 8002748:	71fb      	strb	r3, [r7, #7]
 800274a:	4603      	mov	r3, r0
 800274c:	71bb      	strb	r3, [r7, #6]
 800274e:	460b      	mov	r3, r1
 8002750:	717b      	strb	r3, [r7, #5]
 8002752:	4613      	mov	r3, r2
 8002754:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002756:	79bb      	ldrb	r3, [r7, #6]
 8002758:	08db      	lsrs	r3, r3, #3
 800275a:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 800275c:	79bb      	ldrb	r3, [r7, #6]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8002764:	7bba      	ldrb	r2, [r7, #14]
 8002766:	793b      	ldrb	r3, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	2b08      	cmp	r3, #8
 800276c:	dd29      	ble.n	80027c2 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800276e:	797a      	ldrb	r2, [r7, #5]
 8002770:	7bbb      	ldrb	r3, [r7, #14]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	b2da      	uxtb	r2, r3
 8002778:	7bbc      	ldrb	r4, [r7, #14]
 800277a:	79f9      	ldrb	r1, [r7, #7]
 800277c:	7bf8      	ldrb	r0, [r7, #15]
 800277e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	2307      	movs	r3, #7
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	4623      	mov	r3, r4
 800278a:	f7ff ff59 	bl	8002640 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	3301      	adds	r3, #1
 8002792:	b2d8      	uxtb	r0, r3
 8002794:	797a      	ldrb	r2, [r7, #5]
 8002796:	7bbb      	ldrb	r3, [r7, #14]
 8002798:	f1c3 0308 	rsb	r3, r3, #8
 800279c:	fa42 f303 	asr.w	r3, r2, r3
 80027a0:	b2dc      	uxtb	r4, r3
 80027a2:	793a      	ldrb	r2, [r7, #4]
 80027a4:	7bbb      	ldrb	r3, [r7, #14]
 80027a6:	4413      	add	r3, r2
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3b09      	subs	r3, #9
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	79f9      	ldrb	r1, [r7, #7]
 80027b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80027b4:	9201      	str	r2, [sp, #4]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2300      	movs	r3, #0
 80027ba:	4622      	mov	r2, r4
 80027bc:	f7ff ff40 	bl	8002640 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 80027c0:	e015      	b.n	80027ee <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 80027c2:	797a      	ldrb	r2, [r7, #5]
 80027c4:	7bbb      	ldrb	r3, [r7, #14]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	b2dc      	uxtb	r4, r3
 80027cc:	7bba      	ldrb	r2, [r7, #14]
 80027ce:	793b      	ldrb	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	7bbd      	ldrb	r5, [r7, #14]
 80027da:	79f9      	ldrb	r1, [r7, #7]
 80027dc:	7bf8      	ldrb	r0, [r7, #15]
 80027de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80027e2:	9201      	str	r2, [sp, #4]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	462b      	mov	r3, r5
 80027e8:	4622      	mov	r2, r4
 80027ea:	f7ff ff29 	bl	8002640 <OLED_SetByte_Fine>
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bdb0      	pop	{r4, r5, r7, pc}

080027f6 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 80027f6:	b590      	push	{r4, r7, lr}
 80027f8:	b087      	sub	sp, #28
 80027fa:	af02      	add	r7, sp, #8
 80027fc:	4604      	mov	r4, r0
 80027fe:	4608      	mov	r0, r1
 8002800:	4611      	mov	r1, r2
 8002802:	461a      	mov	r2, r3
 8002804:	4623      	mov	r3, r4
 8002806:	71fb      	strb	r3, [r7, #7]
 8002808:	4603      	mov	r3, r0
 800280a:	71bb      	strb	r3, [r7, #6]
 800280c:	460b      	mov	r3, r1
 800280e:	717b      	strb	r3, [r7, #5]
 8002810:	4613      	mov	r3, r2
 8002812:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002814:	79bb      	ldrb	r3, [r7, #6]
 8002816:	08db      	lsrs	r3, r3, #3
 8002818:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 800281a:	79bb      	ldrb	r3, [r7, #6]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002822:	797a      	ldrb	r2, [r7, #5]
 8002824:	7bbb      	ldrb	r3, [r7, #14]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	b2da      	uxtb	r2, r3
 800282c:	7bbc      	ldrb	r4, [r7, #14]
 800282e:	79f9      	ldrb	r1, [r7, #7]
 8002830:	7bf8      	ldrb	r0, [r7, #15]
 8002832:	793b      	ldrb	r3, [r7, #4]
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	2307      	movs	r3, #7
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	4623      	mov	r3, r4
 800283c:	f7ff ff00 	bl	8002640 <OLED_SetByte_Fine>
  if (bit)
 8002840:	7bbb      	ldrb	r3, [r7, #14]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d014      	beq.n	8002870 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	3301      	adds	r3, #1
 800284a:	b2d8      	uxtb	r0, r3
 800284c:	797a      	ldrb	r2, [r7, #5]
 800284e:	7bbb      	ldrb	r3, [r7, #14]
 8002850:	f1c3 0308 	rsb	r3, r3, #8
 8002854:	fa42 f303 	asr.w	r3, r2, r3
 8002858:	b2dc      	uxtb	r4, r3
 800285a:	7bbb      	ldrb	r3, [r7, #14]
 800285c:	3b01      	subs	r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	79f9      	ldrb	r1, [r7, #7]
 8002862:	793a      	ldrb	r2, [r7, #4]
 8002864:	9201      	str	r2, [sp, #4]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2300      	movs	r3, #0
 800286a:	4622      	mov	r2, r4
 800286c:	f7ff fee8 	bl	8002640 <OLED_SetByte_Fine>
  }
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bd90      	pop	{r4, r7, pc}

08002878 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b087      	sub	sp, #28
 800287c:	af02      	add	r7, sp, #8
 800287e:	603a      	str	r2, [r7, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
 8002886:	460b      	mov	r3, r1
 8002888:	71bb      	strb	r3, [r7, #6]
 800288a:	4613      	mov	r3, r2
 800288c:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 800288e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8002896:	f897 3020 	ldrb.w	r3, [r7, #32]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	e025      	b.n	80028f2 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	73bb      	strb	r3, [r7, #14]
 80028aa:	e01b      	b.n	80028e4 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 80028ac:	79fa      	ldrb	r2, [r7, #7]
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	4413      	add	r3, r2
 80028b2:	b2d8      	uxtb	r0, r3
 80028b4:	7bbb      	ldrb	r3, [r7, #14]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	79bb      	ldrb	r3, [r7, #6]
 80028bc:	4413      	add	r3, r2
 80028be:	b2dc      	uxtb	r4, r3
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	7bbb      	ldrb	r3, [r7, #14]
 80028c4:	7979      	ldrb	r1, [r7, #5]
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	461a      	mov	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80028d8:	4621      	mov	r1, r4
 80028da:	f7ff ff8c 	bl	80027f6 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 80028de:	7bbb      	ldrb	r3, [r7, #14]
 80028e0:	3301      	adds	r3, #1
 80028e2:	73bb      	strb	r3, [r7, #14]
 80028e4:	7bba      	ldrb	r2, [r7, #14]
 80028e6:	7b3b      	ldrb	r3, [r7, #12]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d3df      	bcc.n	80028ac <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	3301      	adds	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	797b      	ldrb	r3, [r7, #5]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d3d5      	bcc.n	80028a6 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d028      	beq.n	8002952 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8002900:	797b      	ldrb	r3, [r7, #5]
 8002902:	b29b      	uxth	r3, r3
 8002904:	7b3a      	ldrb	r2, [r7, #12]
 8002906:	b292      	uxth	r2, r2
 8002908:	fb02 f303 	mul.w	r3, r2, r3
 800290c:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 800290e:	2300      	movs	r3, #0
 8002910:	737b      	strb	r3, [r7, #13]
 8002912:	e01a      	b.n	800294a <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8002914:	79fa      	ldrb	r2, [r7, #7]
 8002916:	7b7b      	ldrb	r3, [r7, #13]
 8002918:	4413      	add	r3, r2
 800291a:	b2d8      	uxtb	r0, r3
 800291c:	7b3b      	ldrb	r3, [r7, #12]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	b2da      	uxtb	r2, r3
 8002922:	79bb      	ldrb	r3, [r7, #6]
 8002924:	4413      	add	r3, r2
 8002926:	b2d9      	uxtb	r1, r3
 8002928:	893a      	ldrh	r2, [r7, #8]
 800292a:	7b7b      	ldrb	r3, [r7, #13]
 800292c:	4413      	add	r3, r2
 800292e:	461a      	mov	r2, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4413      	add	r3, r2
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	7afc      	ldrb	r4, [r7, #11]
 8002938:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	4623      	mov	r3, r4
 8002940:	f7ff fefa 	bl	8002738 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8002944:	7b7b      	ldrb	r3, [r7, #13]
 8002946:	3301      	adds	r3, #1
 8002948:	737b      	strb	r3, [r7, #13]
 800294a:	7b7a      	ldrb	r2, [r7, #13]
 800294c:	797b      	ldrb	r3, [r7, #5]
 800294e:	429a      	cmp	r2, r3
 8002950:	d3e0      	bcc.n	8002914 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bd90      	pop	{r4, r7, pc}

0800295a <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 800295a:	b5b0      	push	{r4, r5, r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af02      	add	r7, sp, #8
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
 8002966:	460b      	mov	r3, r1
 8002968:	71bb      	strb	r3, [r7, #6]
 800296a:	4613      	mov	r3, r2
 800296c:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	797b      	ldrb	r3, [r7, #5]
 8002974:	f1a3 0120 	sub.w	r1, r3, #32
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	3307      	adds	r3, #7
 800297e:	2b00      	cmp	r3, #0
 8002980:	da00      	bge.n	8002984 <OLED_PrintASCIIChar+0x2a>
 8002982:	3307      	adds	r3, #7
 8002984:	10db      	asrs	r3, r3, #3
 8002986:	4618      	mov	r0, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	785b      	ldrb	r3, [r3, #1]
 800298c:	fb00 f303 	mul.w	r3, r0, r3
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	18d4      	adds	r4, r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	785d      	ldrb	r5, [r3, #1]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	79b9      	ldrb	r1, [r7, #6]
 80029a0:	79f8      	ldrb	r0, [r7, #7]
 80029a2:	7e3a      	ldrb	r2, [r7, #24]
 80029a4:	9201      	str	r2, [sp, #4]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	462b      	mov	r3, r5
 80029aa:	4622      	mov	r2, r4
 80029ac:	f7ff ff64 	bl	8002878 <OLED_SetBlock>
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bdb0      	pop	{r4, r5, r7, pc}

080029b8 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db01      	blt.n	80029ce <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e018      	b.n	8002a00 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80029d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80029d8:	d101      	bne.n	80029de <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 80029da:	2302      	movs	r3, #2
 80029dc:	e010      	b.n	8002a00 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029e6:	2be0      	cmp	r3, #224	@ 0xe0
 80029e8:	d101      	bne.n	80029ee <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e008      	b.n	8002a00 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80029f6:	2bf0      	cmp	r3, #240	@ 0xf0
 80029f8:	d101      	bne.n	80029fe <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 80029fa:	2304      	movs	r3, #4
 80029fc:	e000      	b.n	8002a00 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8002a0a:	b5b0      	push	{r4, r5, r7, lr}
 8002a0c:	b08a      	sub	sp, #40	@ 0x28
 8002a0e:	af02      	add	r7, sp, #8
 8002a10:	60ba      	str	r2, [r7, #8]
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	3307      	adds	r3, #7
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	da00      	bge.n	8002a2c <OLED_PrintString+0x22>
 8002a2a:	3307      	adds	r3, #7
 8002a2c:	10db      	asrs	r3, r3, #3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	7852      	ldrb	r2, [r2, #1]
 8002a34:	fb02 f303 	mul.w	r3, r2, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 8002a3e:	e07d      	b.n	8002b3c <OLED_PrintString+0x132>
  {
    found = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8002a44:	8bfb      	ldrh	r3, [r7, #30]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4413      	add	r3, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ffb4 	bl	80029b8 <_OLED_GetUTF8Len>
 8002a50:	4603      	mov	r3, r0
 8002a52:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8002a54:	7ebb      	ldrb	r3, [r7, #26]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d078      	beq.n	8002b4c <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	773b      	strb	r3, [r7, #28]
 8002a5e:	e032      	b.n	8002ac6 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	7f3a      	ldrb	r2, [r7, #28]
 8002a66:	7ef9      	ldrb	r1, [r7, #27]
 8002a68:	fb01 f202 	mul.w	r2, r1, r2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8002a70:	8bfb      	ldrh	r3, [r7, #30]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4413      	add	r3, r2
 8002a76:	7eba      	ldrb	r2, [r7, #26]
 8002a78:	6979      	ldr	r1, [r7, #20]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 ff04 	bl	8006888 <memcmp>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11c      	bne.n	8002ac0 <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	1d1c      	adds	r4, r3, #4
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	785d      	ldrb	r5, [r3, #1]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	7bb9      	ldrb	r1, [r7, #14]
 8002a94:	7bf8      	ldrb	r0, [r7, #15]
 8002a96:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002a9a:	9201      	str	r2, [sp, #4]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	462b      	mov	r3, r5
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	f7ff fee9 	bl	8002878 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	785a      	ldrb	r2, [r3, #1]
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	4413      	add	r3, r2
 8002aae:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002ab0:	7ebb      	ldrb	r3, [r7, #26]
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	8bfb      	ldrh	r3, [r7, #30]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	777b      	strb	r3, [r7, #29]
        break;
 8002abe:	e007      	b.n	8002ad0 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 8002ac0:	7f3b      	ldrb	r3, [r7, #28]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	773b      	strb	r3, [r7, #28]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	7a1b      	ldrb	r3, [r3, #8]
 8002aca:	7f3a      	ldrb	r2, [r7, #28]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d3c7      	bcc.n	8002a60 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 8002ad0:	7f7b      	ldrb	r3, [r7, #29]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d132      	bne.n	8002b3c <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8002ad6:	7ebb      	ldrb	r3, [r7, #26]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d119      	bne.n	8002b10 <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8002adc:	8bfb      	ldrh	r3, [r7, #30]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68dc      	ldr	r4, [r3, #12]
 8002ae8:	7bb9      	ldrb	r1, [r7, #14]
 8002aea:	7bf8      	ldrb	r0, [r7, #15]
 8002aec:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	4623      	mov	r3, r4
 8002af4:	f7ff ff31 	bl	800295a <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	785a      	ldrb	r2, [r3, #1]
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	4413      	add	r3, r2
 8002b02:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002b04:	7ebb      	ldrb	r3, [r7, #26]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	8bfb      	ldrh	r3, [r7, #30]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	83fb      	strh	r3, [r7, #30]
 8002b0e:	e015      	b.n	8002b3c <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	7bb9      	ldrb	r1, [r7, #14]
 8002b16:	7bf8      	ldrb	r0, [r7, #15]
 8002b18:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	2220      	movs	r2, #32
 8002b22:	f7ff ff1a 	bl	800295a <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	785a      	ldrb	r2, [r3, #1]
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	4413      	add	r3, r2
 8002b30:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002b32:	7ebb      	ldrb	r3, [r7, #26]
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	8bfb      	ldrh	r3, [r7, #30]
 8002b38:	4413      	add	r3, r2
 8002b3a:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8002b3c:	8bfb      	ldrh	r3, [r7, #30]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	4413      	add	r3, r2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f47f af7b 	bne.w	8002a40 <OLED_PrintString+0x36>
      }
    }
  }
}
 8002b4a:	e000      	b.n	8002b4e <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8002b4c:	bf00      	nop
}
 8002b4e:	bf00      	nop
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <HAL_Init+0x28>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a07      	ldr	r2, [pc, #28]	@ (8002b80 <HAL_Init+0x28>)
 8002b62:	f043 0310 	orr.w	r3, r3, #16
 8002b66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b68:	2003      	movs	r0, #3
 8002b6a:	f000 f947 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f000 f808 	bl	8002b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b74:	f7fd fc52 	bl	800041c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40022000 	.word	0x40022000

08002b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b8c:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_InitTick+0x54>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <HAL_InitTick+0x58>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f95f 	bl	8002e66 <HAL_SYSTICK_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00e      	b.n	8002bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d80a      	bhi.n	8002bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f000 f927 	bl	8002e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc4:	4a06      	ldr	r2, [pc, #24]	@ (8002be0 <HAL_InitTick+0x5c>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000008 	.word	0x20000008
 8002be0:	20000004 	.word	0x20000004

08002be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <HAL_IncTick+0x1c>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b05      	ldr	r3, [pc, #20]	@ (8002c04 <HAL_IncTick+0x20>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a03      	ldr	r2, [pc, #12]	@ (8002c04 <HAL_IncTick+0x20>)
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	20000008 	.word	0x20000008
 8002c04:	20000838 	.word	0x20000838

08002c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c0c:	4b02      	ldr	r3, [pc, #8]	@ (8002c18 <HAL_GetTick+0x10>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	20000838 	.word	0x20000838

08002c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7ff fff0 	bl	8002c08 <HAL_GetTick>
 8002c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d005      	beq.n	8002c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c36:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <HAL_Delay+0x44>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c42:	bf00      	nop
 8002c44:	f7ff ffe0 	bl	8002c08 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d8f7      	bhi.n	8002c44 <HAL_Delay+0x28>
  {
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000008 	.word	0x20000008

08002c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c80:	4013      	ands	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c96:	4a04      	ldr	r2, [pc, #16]	@ (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	60d3      	str	r3, [r2, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb0:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	f003 0307 	and.w	r3, r3, #7
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	db0b      	blt.n	8002cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4906      	ldr	r1, [pc, #24]	@ (8002cfc <__NVIC_EnableIRQ+0x34>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2001      	movs	r0, #1
 8002cea:	fa00 f202 	lsl.w	r2, r0, r2
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	@ (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	@ (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	@ 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf28      	it	cs
 8002d72:	2304      	movcs	r3, #4
 8002d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d902      	bls.n	8002d84 <NVIC_EncodePriority+0x30>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	e000      	b.n	8002d86 <NVIC_EncodePriority+0x32>
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	4313      	orrs	r3, r2
         );
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	@ 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dc8:	d301      	bcc.n	8002dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00f      	b.n	8002dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dce:	4a0a      	ldr	r2, [pc, #40]	@ (8002df8 <SysTick_Config+0x40>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd6:	210f      	movs	r1, #15
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	f7ff ff90 	bl	8002d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <SysTick_Config+0x40>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de6:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <SysTick_Config+0x40>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ff2d 	bl	8002c64 <__NVIC_SetPriorityGrouping>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e24:	f7ff ff42 	bl	8002cac <__NVIC_GetPriorityGrouping>
 8002e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f7ff ff90 	bl	8002d54 <NVIC_EncodePriority>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff5f 	bl	8002d00 <__NVIC_SetPriority>
}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff35 	bl	8002cc8 <__NVIC_EnableIRQ>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ffa2 	bl	8002db8 <SysTick_Config>
 8002e74:	4603      	mov	r3, r0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e043      	b.n	8002f1e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4b22      	ldr	r3, [pc, #136]	@ (8002f28 <HAL_DMA_Init+0xa8>)
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4a22      	ldr	r2, [pc, #136]	@ (8002f2c <HAL_DMA_Init+0xac>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	009a      	lsls	r2, r3, #2
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8002f30 <HAL_DMA_Init+0xb0>)
 8002eb2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002eca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002ece:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	bffdfff8 	.word	0xbffdfff8
 8002f2c:	cccccccd 	.word	0xcccccccd
 8002f30:	40020000 	.word	0x40020000

08002f34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_DMA_Start_IT+0x20>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e04b      	b.n	8002fec <HAL_DMA_Start_IT+0xb8>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d13a      	bne.n	8002fde <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f9eb 	bl	8003368 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 020e 	orr.w	r2, r2, #14
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e00f      	b.n	8002fcc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0204 	bic.w	r2, r2, #4
 8002fba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 020a 	orr.w	r2, r2, #10
 8002fca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e005      	b.n	8002fea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d008      	beq.n	800301e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2204      	movs	r2, #4
 8003010:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e020      	b.n	8003060 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 020e 	bic.w	r2, r2, #14
 800302c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003046:	2101      	movs	r1, #1
 8003048:	fa01 f202 	lsl.w	r2, r1, r2
 800304c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800305e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
	...

0800306c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d005      	beq.n	8003090 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2204      	movs	r2, #4
 8003088:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	e051      	b.n	8003134 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 020e 	bic.w	r2, r2, #14
 800309e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a22      	ldr	r2, [pc, #136]	@ (8003140 <HAL_DMA_Abort_IT+0xd4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d029      	beq.n	800310e <HAL_DMA_Abort_IT+0xa2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a21      	ldr	r2, [pc, #132]	@ (8003144 <HAL_DMA_Abort_IT+0xd8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d022      	beq.n	800310a <HAL_DMA_Abort_IT+0x9e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003148 <HAL_DMA_Abort_IT+0xdc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01a      	beq.n	8003104 <HAL_DMA_Abort_IT+0x98>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1e      	ldr	r2, [pc, #120]	@ (800314c <HAL_DMA_Abort_IT+0xe0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d012      	beq.n	80030fe <HAL_DMA_Abort_IT+0x92>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003150 <HAL_DMA_Abort_IT+0xe4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00a      	beq.n	80030f8 <HAL_DMA_Abort_IT+0x8c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003154 <HAL_DMA_Abort_IT+0xe8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d102      	bne.n	80030f2 <HAL_DMA_Abort_IT+0x86>
 80030ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80030f0:	e00e      	b.n	8003110 <HAL_DMA_Abort_IT+0xa4>
 80030f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030f6:	e00b      	b.n	8003110 <HAL_DMA_Abort_IT+0xa4>
 80030f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030fc:	e008      	b.n	8003110 <HAL_DMA_Abort_IT+0xa4>
 80030fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003102:	e005      	b.n	8003110 <HAL_DMA_Abort_IT+0xa4>
 8003104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003108:	e002      	b.n	8003110 <HAL_DMA_Abort_IT+0xa4>
 800310a:	2310      	movs	r3, #16
 800310c:	e000      	b.n	8003110 <HAL_DMA_Abort_IT+0xa4>
 800310e:	2301      	movs	r3, #1
 8003110:	4a11      	ldr	r2, [pc, #68]	@ (8003158 <HAL_DMA_Abort_IT+0xec>)
 8003112:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4798      	blx	r3
    } 
  }
  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40020008 	.word	0x40020008
 8003144:	4002001c 	.word	0x4002001c
 8003148:	40020030 	.word	0x40020030
 800314c:	40020044 	.word	0x40020044
 8003150:	40020058 	.word	0x40020058
 8003154:	4002006c 	.word	0x4002006c
 8003158:	40020000 	.word	0x40020000

0800315c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	2204      	movs	r2, #4
 800317a:	409a      	lsls	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d04f      	beq.n	8003224 <HAL_DMA_IRQHandler+0xc8>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d04a      	beq.n	8003224 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d107      	bne.n	80031ac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0204 	bic.w	r2, r2, #4
 80031aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a66      	ldr	r2, [pc, #408]	@ (800334c <HAL_DMA_IRQHandler+0x1f0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d029      	beq.n	800320a <HAL_DMA_IRQHandler+0xae>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a65      	ldr	r2, [pc, #404]	@ (8003350 <HAL_DMA_IRQHandler+0x1f4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d022      	beq.n	8003206 <HAL_DMA_IRQHandler+0xaa>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a63      	ldr	r2, [pc, #396]	@ (8003354 <HAL_DMA_IRQHandler+0x1f8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01a      	beq.n	8003200 <HAL_DMA_IRQHandler+0xa4>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a62      	ldr	r2, [pc, #392]	@ (8003358 <HAL_DMA_IRQHandler+0x1fc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d012      	beq.n	80031fa <HAL_DMA_IRQHandler+0x9e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a60      	ldr	r2, [pc, #384]	@ (800335c <HAL_DMA_IRQHandler+0x200>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00a      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x98>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003360 <HAL_DMA_IRQHandler+0x204>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d102      	bne.n	80031ee <HAL_DMA_IRQHandler+0x92>
 80031e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80031ec:	e00e      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 80031ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80031f2:	e00b      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 80031f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031f8:	e008      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 80031fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031fe:	e005      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 8003200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003204:	e002      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 8003206:	2340      	movs	r3, #64	@ 0x40
 8003208:	e000      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 800320a:	2304      	movs	r3, #4
 800320c:	4a55      	ldr	r2, [pc, #340]	@ (8003364 <HAL_DMA_IRQHandler+0x208>)
 800320e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8094 	beq.w	8003342 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003222:	e08e      	b.n	8003342 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	2202      	movs	r2, #2
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d056      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x186>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d051      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 020a 	bic.w	r2, r2, #10
 800325a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a38      	ldr	r2, [pc, #224]	@ (800334c <HAL_DMA_IRQHandler+0x1f0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d029      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x166>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a37      	ldr	r2, [pc, #220]	@ (8003350 <HAL_DMA_IRQHandler+0x1f4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d022      	beq.n	80032be <HAL_DMA_IRQHandler+0x162>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a35      	ldr	r2, [pc, #212]	@ (8003354 <HAL_DMA_IRQHandler+0x1f8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01a      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x15c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a34      	ldr	r2, [pc, #208]	@ (8003358 <HAL_DMA_IRQHandler+0x1fc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d012      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x156>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a32      	ldr	r2, [pc, #200]	@ (800335c <HAL_DMA_IRQHandler+0x200>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00a      	beq.n	80032ac <HAL_DMA_IRQHandler+0x150>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a31      	ldr	r2, [pc, #196]	@ (8003360 <HAL_DMA_IRQHandler+0x204>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d102      	bne.n	80032a6 <HAL_DMA_IRQHandler+0x14a>
 80032a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80032a4:	e00e      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032aa:	e00b      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032b0:	e008      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032b6:	e005      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032bc:	e002      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032be:	2320      	movs	r3, #32
 80032c0:	e000      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032c2:	2302      	movs	r3, #2
 80032c4:	4a27      	ldr	r2, [pc, #156]	@ (8003364 <HAL_DMA_IRQHandler+0x208>)
 80032c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d034      	beq.n	8003342 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032e0:	e02f      	b.n	8003342 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	2208      	movs	r2, #8
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d028      	beq.n	8003344 <HAL_DMA_IRQHandler+0x1e8>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d023      	beq.n	8003344 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 020e 	bic.w	r2, r2, #14
 800330a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003314:	2101      	movs	r1, #1
 8003316:	fa01 f202 	lsl.w	r2, r1, r2
 800331a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	2b00      	cmp	r3, #0
 8003338:	d004      	beq.n	8003344 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
    }
  }
  return;
 8003342:	bf00      	nop
 8003344:	bf00      	nop
}
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40020008 	.word	0x40020008
 8003350:	4002001c 	.word	0x4002001c
 8003354:	40020030 	.word	0x40020030
 8003358:	40020044 	.word	0x40020044
 800335c:	40020058 	.word	0x40020058
 8003360:	4002006c 	.word	0x4002006c
 8003364:	40020000 	.word	0x40020000

08003368 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f202 	lsl.w	r2, r1, r2
 8003384:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b10      	cmp	r3, #16
 8003394:	d108      	bne.n	80033a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033a6:	e007      	b.n	80033b8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	60da      	str	r2, [r3, #12]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b08b      	sub	sp, #44	@ 0x2c
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033d2:	2300      	movs	r3, #0
 80033d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d6:	e169      	b.n	80036ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033d8:	2201      	movs	r2, #1
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	f040 8158 	bne.w	80036a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4a9a      	ldr	r2, [pc, #616]	@ (8003664 <HAL_GPIO_Init+0x2a0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d05e      	beq.n	80034be <HAL_GPIO_Init+0xfa>
 8003400:	4a98      	ldr	r2, [pc, #608]	@ (8003664 <HAL_GPIO_Init+0x2a0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d875      	bhi.n	80034f2 <HAL_GPIO_Init+0x12e>
 8003406:	4a98      	ldr	r2, [pc, #608]	@ (8003668 <HAL_GPIO_Init+0x2a4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d058      	beq.n	80034be <HAL_GPIO_Init+0xfa>
 800340c:	4a96      	ldr	r2, [pc, #600]	@ (8003668 <HAL_GPIO_Init+0x2a4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d86f      	bhi.n	80034f2 <HAL_GPIO_Init+0x12e>
 8003412:	4a96      	ldr	r2, [pc, #600]	@ (800366c <HAL_GPIO_Init+0x2a8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d052      	beq.n	80034be <HAL_GPIO_Init+0xfa>
 8003418:	4a94      	ldr	r2, [pc, #592]	@ (800366c <HAL_GPIO_Init+0x2a8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d869      	bhi.n	80034f2 <HAL_GPIO_Init+0x12e>
 800341e:	4a94      	ldr	r2, [pc, #592]	@ (8003670 <HAL_GPIO_Init+0x2ac>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d04c      	beq.n	80034be <HAL_GPIO_Init+0xfa>
 8003424:	4a92      	ldr	r2, [pc, #584]	@ (8003670 <HAL_GPIO_Init+0x2ac>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d863      	bhi.n	80034f2 <HAL_GPIO_Init+0x12e>
 800342a:	4a92      	ldr	r2, [pc, #584]	@ (8003674 <HAL_GPIO_Init+0x2b0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d046      	beq.n	80034be <HAL_GPIO_Init+0xfa>
 8003430:	4a90      	ldr	r2, [pc, #576]	@ (8003674 <HAL_GPIO_Init+0x2b0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d85d      	bhi.n	80034f2 <HAL_GPIO_Init+0x12e>
 8003436:	2b12      	cmp	r3, #18
 8003438:	d82a      	bhi.n	8003490 <HAL_GPIO_Init+0xcc>
 800343a:	2b12      	cmp	r3, #18
 800343c:	d859      	bhi.n	80034f2 <HAL_GPIO_Init+0x12e>
 800343e:	a201      	add	r2, pc, #4	@ (adr r2, 8003444 <HAL_GPIO_Init+0x80>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	080034bf 	.word	0x080034bf
 8003448:	08003499 	.word	0x08003499
 800344c:	080034ab 	.word	0x080034ab
 8003450:	080034ed 	.word	0x080034ed
 8003454:	080034f3 	.word	0x080034f3
 8003458:	080034f3 	.word	0x080034f3
 800345c:	080034f3 	.word	0x080034f3
 8003460:	080034f3 	.word	0x080034f3
 8003464:	080034f3 	.word	0x080034f3
 8003468:	080034f3 	.word	0x080034f3
 800346c:	080034f3 	.word	0x080034f3
 8003470:	080034f3 	.word	0x080034f3
 8003474:	080034f3 	.word	0x080034f3
 8003478:	080034f3 	.word	0x080034f3
 800347c:	080034f3 	.word	0x080034f3
 8003480:	080034f3 	.word	0x080034f3
 8003484:	080034f3 	.word	0x080034f3
 8003488:	080034a1 	.word	0x080034a1
 800348c:	080034b5 	.word	0x080034b5
 8003490:	4a79      	ldr	r2, [pc, #484]	@ (8003678 <HAL_GPIO_Init+0x2b4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003496:	e02c      	b.n	80034f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	623b      	str	r3, [r7, #32]
          break;
 800349e:	e029      	b.n	80034f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	3304      	adds	r3, #4
 80034a6:	623b      	str	r3, [r7, #32]
          break;
 80034a8:	e024      	b.n	80034f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	3308      	adds	r3, #8
 80034b0:	623b      	str	r3, [r7, #32]
          break;
 80034b2:	e01f      	b.n	80034f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	330c      	adds	r3, #12
 80034ba:	623b      	str	r3, [r7, #32]
          break;
 80034bc:	e01a      	b.n	80034f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034c6:	2304      	movs	r3, #4
 80034c8:	623b      	str	r3, [r7, #32]
          break;
 80034ca:	e013      	b.n	80034f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d105      	bne.n	80034e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034d4:	2308      	movs	r3, #8
 80034d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	611a      	str	r2, [r3, #16]
          break;
 80034de:	e009      	b.n	80034f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034e0:	2308      	movs	r3, #8
 80034e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	615a      	str	r2, [r3, #20]
          break;
 80034ea:	e003      	b.n	80034f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034ec:	2300      	movs	r3, #0
 80034ee:	623b      	str	r3, [r7, #32]
          break;
 80034f0:	e000      	b.n	80034f4 <HAL_GPIO_Init+0x130>
          break;
 80034f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2bff      	cmp	r3, #255	@ 0xff
 80034f8:	d801      	bhi.n	80034fe <HAL_GPIO_Init+0x13a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	e001      	b.n	8003502 <HAL_GPIO_Init+0x13e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2bff      	cmp	r3, #255	@ 0xff
 8003508:	d802      	bhi.n	8003510 <HAL_GPIO_Init+0x14c>
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	e002      	b.n	8003516 <HAL_GPIO_Init+0x152>
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	3b08      	subs	r3, #8
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	210f      	movs	r1, #15
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	401a      	ands	r2, r3
 8003528:	6a39      	ldr	r1, [r7, #32]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	431a      	orrs	r2, r3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80b1 	beq.w	80036a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003544:	4b4d      	ldr	r3, [pc, #308]	@ (800367c <HAL_GPIO_Init+0x2b8>)
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	4a4c      	ldr	r2, [pc, #304]	@ (800367c <HAL_GPIO_Init+0x2b8>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6193      	str	r3, [r2, #24]
 8003550:	4b4a      	ldr	r3, [pc, #296]	@ (800367c <HAL_GPIO_Init+0x2b8>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800355c:	4a48      	ldr	r2, [pc, #288]	@ (8003680 <HAL_GPIO_Init+0x2bc>)
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	3302      	adds	r3, #2
 8003564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003568:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	220f      	movs	r2, #15
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a40      	ldr	r2, [pc, #256]	@ (8003684 <HAL_GPIO_Init+0x2c0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d013      	beq.n	80035b0 <HAL_GPIO_Init+0x1ec>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a3f      	ldr	r2, [pc, #252]	@ (8003688 <HAL_GPIO_Init+0x2c4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00d      	beq.n	80035ac <HAL_GPIO_Init+0x1e8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a3e      	ldr	r2, [pc, #248]	@ (800368c <HAL_GPIO_Init+0x2c8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d007      	beq.n	80035a8 <HAL_GPIO_Init+0x1e4>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a3d      	ldr	r2, [pc, #244]	@ (8003690 <HAL_GPIO_Init+0x2cc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_GPIO_Init+0x1e0>
 80035a0:	2303      	movs	r3, #3
 80035a2:	e006      	b.n	80035b2 <HAL_GPIO_Init+0x1ee>
 80035a4:	2304      	movs	r3, #4
 80035a6:	e004      	b.n	80035b2 <HAL_GPIO_Init+0x1ee>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e002      	b.n	80035b2 <HAL_GPIO_Init+0x1ee>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <HAL_GPIO_Init+0x1ee>
 80035b0:	2300      	movs	r3, #0
 80035b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b4:	f002 0203 	and.w	r2, r2, #3
 80035b8:	0092      	lsls	r2, r2, #2
 80035ba:	4093      	lsls	r3, r2
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035c2:	492f      	ldr	r1, [pc, #188]	@ (8003680 <HAL_GPIO_Init+0x2bc>)
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	3302      	adds	r3, #2
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d006      	beq.n	80035ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	492c      	ldr	r1, [pc, #176]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]
 80035e8:	e006      	b.n	80035f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	4928      	ldr	r1, [pc, #160]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003604:	4b23      	ldr	r3, [pc, #140]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	4922      	ldr	r1, [pc, #136]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	60cb      	str	r3, [r1, #12]
 8003610:	e006      	b.n	8003620 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003612:	4b20      	ldr	r3, [pc, #128]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	43db      	mvns	r3, r3
 800361a:	491e      	ldr	r1, [pc, #120]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 800361c:	4013      	ands	r3, r2
 800361e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d006      	beq.n	800363a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800362c:	4b19      	ldr	r3, [pc, #100]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	4918      	ldr	r1, [pc, #96]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
 8003638:	e006      	b.n	8003648 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800363a:	4b16      	ldr	r3, [pc, #88]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	43db      	mvns	r3, r3
 8003642:	4914      	ldr	r1, [pc, #80]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 8003644:	4013      	ands	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d021      	beq.n	8003698 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003654:	4b0f      	ldr	r3, [pc, #60]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	490e      	ldr	r1, [pc, #56]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
 8003660:	e021      	b.n	80036a6 <HAL_GPIO_Init+0x2e2>
 8003662:	bf00      	nop
 8003664:	10320000 	.word	0x10320000
 8003668:	10310000 	.word	0x10310000
 800366c:	10220000 	.word	0x10220000
 8003670:	10210000 	.word	0x10210000
 8003674:	10120000 	.word	0x10120000
 8003678:	10110000 	.word	0x10110000
 800367c:	40021000 	.word	0x40021000
 8003680:	40010000 	.word	0x40010000
 8003684:	40010800 	.word	0x40010800
 8003688:	40010c00 	.word	0x40010c00
 800368c:	40011000 	.word	0x40011000
 8003690:	40011400 	.word	0x40011400
 8003694:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003698:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <HAL_GPIO_Init+0x304>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	43db      	mvns	r3, r3
 80036a0:	4909      	ldr	r1, [pc, #36]	@ (80036c8 <HAL_GPIO_Init+0x304>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	3301      	adds	r3, #1
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f47f ae8e 	bne.w	80033d8 <HAL_GPIO_Init+0x14>
  }
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	372c      	adds	r7, #44	@ 0x2c
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	40010400 	.word	0x40010400

080036cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	887b      	ldrh	r3, [r7, #2]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
 80036e8:	e001      	b.n	80036ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	807b      	strh	r3, [r7, #2]
 8003706:	4613      	mov	r3, r2
 8003708:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800370a:	787b      	ldrb	r3, [r7, #1]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003710:	887a      	ldrh	r2, [r7, #2]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003716:	e003      	b.n	8003720 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003718:	887b      	ldrh	r3, [r7, #2]
 800371a:	041a      	lsls	r2, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	611a      	str	r2, [r3, #16]
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr
	...

0800372c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e12b      	b.n	8003996 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fc fdc2 	bl	80002dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	@ 0x24
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800377e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800378e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003790:	f001 f832 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 8003794:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4a81      	ldr	r2, [pc, #516]	@ (80039a0 <HAL_I2C_Init+0x274>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d807      	bhi.n	80037b0 <HAL_I2C_Init+0x84>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4a80      	ldr	r2, [pc, #512]	@ (80039a4 <HAL_I2C_Init+0x278>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	bf94      	ite	ls
 80037a8:	2301      	movls	r3, #1
 80037aa:	2300      	movhi	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e006      	b.n	80037be <HAL_I2C_Init+0x92>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a7d      	ldr	r2, [pc, #500]	@ (80039a8 <HAL_I2C_Init+0x27c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	bf94      	ite	ls
 80037b8:	2301      	movls	r3, #1
 80037ba:	2300      	movhi	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0e7      	b.n	8003996 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a78      	ldr	r2, [pc, #480]	@ (80039ac <HAL_I2C_Init+0x280>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0c9b      	lsrs	r3, r3, #18
 80037d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a6a      	ldr	r2, [pc, #424]	@ (80039a0 <HAL_I2C_Init+0x274>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d802      	bhi.n	8003800 <HAL_I2C_Init+0xd4>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	3301      	adds	r3, #1
 80037fe:	e009      	b.n	8003814 <HAL_I2C_Init+0xe8>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	4a69      	ldr	r2, [pc, #420]	@ (80039b0 <HAL_I2C_Init+0x284>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	3301      	adds	r3, #1
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	430b      	orrs	r3, r1
 800381a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003826:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	495c      	ldr	r1, [pc, #368]	@ (80039a0 <HAL_I2C_Init+0x274>)
 8003830:	428b      	cmp	r3, r1
 8003832:	d819      	bhi.n	8003868 <HAL_I2C_Init+0x13c>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1e59      	subs	r1, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003842:	1c59      	adds	r1, r3, #1
 8003844:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003848:	400b      	ands	r3, r1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_I2C_Init+0x138>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1e59      	subs	r1, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fbb1 f3f3 	udiv	r3, r1, r3
 800385c:	3301      	adds	r3, #1
 800385e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003862:	e051      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 8003864:	2304      	movs	r3, #4
 8003866:	e04f      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d111      	bne.n	8003894 <HAL_I2C_Init+0x168>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1e58      	subs	r0, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	440b      	add	r3, r1
 800387e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003882:	3301      	adds	r3, #1
 8003884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e012      	b.n	80038ba <HAL_I2C_Init+0x18e>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e58      	subs	r0, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	0099      	lsls	r1, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038aa:	3301      	adds	r3, #1
 80038ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Init+0x196>
 80038be:	2301      	movs	r3, #1
 80038c0:	e022      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10e      	bne.n	80038e8 <HAL_I2C_Init+0x1bc>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1e58      	subs	r0, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6859      	ldr	r1, [r3, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	440b      	add	r3, r1
 80038d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038e6:	e00f      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1e58      	subs	r0, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6859      	ldr	r1, [r3, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	0099      	lsls	r1, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003904:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	6809      	ldr	r1, [r1, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003936:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6911      	ldr	r1, [r2, #16]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68d2      	ldr	r2, [r2, #12]
 8003942:	4311      	orrs	r1, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	430b      	orrs	r3, r1
 800394a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	000186a0 	.word	0x000186a0
 80039a4:	001e847f 	.word	0x001e847f
 80039a8:	003d08ff 	.word	0x003d08ff
 80039ac:	431bde83 	.word	0x431bde83
 80039b0:	10624dd3 	.word	0x10624dd3

080039b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	461a      	mov	r2, r3
 80039c0:	460b      	mov	r3, r1
 80039c2:	817b      	strh	r3, [r7, #10]
 80039c4:	4613      	mov	r3, r2
 80039c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039c8:	f7ff f91e 	bl	8002c08 <HAL_GetTick>
 80039cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	f040 80e0 	bne.w	8003b9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	2319      	movs	r3, #25
 80039e2:	2201      	movs	r2, #1
 80039e4:	4970      	ldr	r1, [pc, #448]	@ (8003ba8 <HAL_I2C_Master_Transmit+0x1f4>)
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f964 	bl	8003cb4 <I2C_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
 80039f4:	e0d3      	b.n	8003b9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_I2C_Master_Transmit+0x50>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e0cc      	b.n	8003b9e <HAL_I2C_Master_Transmit+0x1ea>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d007      	beq.n	8003a2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0201 	orr.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2221      	movs	r2, #33	@ 0x21
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2210      	movs	r2, #16
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	893a      	ldrh	r2, [r7, #8]
 8003a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a50      	ldr	r2, [pc, #320]	@ (8003bac <HAL_I2C_Master_Transmit+0x1f8>)
 8003a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a6c:	8979      	ldrh	r1, [r7, #10]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f89c 	bl	8003bb0 <I2C_MasterRequestWrite>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e08d      	b.n	8003b9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a98:	e066      	b.n	8003b68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	6a39      	ldr	r1, [r7, #32]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fa22 	bl	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e06b      	b.n	8003b9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d11b      	bne.n	8003b3c <HAL_I2C_Master_Transmit+0x188>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d017      	beq.n	8003b3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	6a39      	ldr	r1, [r7, #32]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fa19 	bl	8003f78 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d107      	bne.n	8003b64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e01a      	b.n	8003b9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d194      	bne.n	8003a9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	00100002 	.word	0x00100002
 8003bac:	ffff0000 	.word	0xffff0000

08003bb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d006      	beq.n	8003bda <I2C_MasterRequestWrite+0x2a>
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d003      	beq.n	8003bda <I2C_MasterRequestWrite+0x2a>
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bd8:	d108      	bne.n	8003bec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e00b      	b.n	8003c04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf0:	2b12      	cmp	r3, #18
 8003bf2:	d107      	bne.n	8003c04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f84f 	bl	8003cb4 <I2C_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00d      	beq.n	8003c38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c2a:	d103      	bne.n	8003c34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e035      	b.n	8003ca4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c40:	d108      	bne.n	8003c54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c42:	897b      	ldrh	r3, [r7, #10]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c50:	611a      	str	r2, [r3, #16]
 8003c52:	e01b      	b.n	8003c8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c54:	897b      	ldrh	r3, [r7, #10]
 8003c56:	11db      	asrs	r3, r3, #7
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f003 0306 	and.w	r3, r3, #6
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f063 030f 	orn	r3, r3, #15
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	490e      	ldr	r1, [pc, #56]	@ (8003cac <I2C_MasterRequestWrite+0xfc>)
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f898 	bl	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e010      	b.n	8003ca4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c82:	897b      	ldrh	r3, [r7, #10]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4907      	ldr	r1, [pc, #28]	@ (8003cb0 <I2C_MasterRequestWrite+0x100>)
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f888 	bl	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	00010008 	.word	0x00010008
 8003cb0:	00010002 	.word	0x00010002

08003cb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cc4:	e048      	b.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d044      	beq.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cce:	f7fe ff9b 	bl	8002c08 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d139      	bne.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	0c1b      	lsrs	r3, r3, #16
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d10d      	bne.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	43da      	mvns	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	e00c      	b.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	43da      	mvns	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4013      	ands	r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d116      	bne.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e023      	b.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	0c1b      	lsrs	r3, r3, #16
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d10d      	bne.n	8003d7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	43da      	mvns	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	e00c      	b.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	43da      	mvns	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d093      	beq.n	8003cc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003db6:	e071      	b.n	8003e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc6:	d123      	bne.n	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003de0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	f043 0204 	orr.w	r2, r3, #4
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e067      	b.n	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d041      	beq.n	8003e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e18:	f7fe fef6 	bl	8002c08 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d302      	bcc.n	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d136      	bne.n	8003e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d10c      	bne.n	8003e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	e00b      	b.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	43da      	mvns	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e021      	b.n	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	0c1b      	lsrs	r3, r3, #16
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d10c      	bne.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	43da      	mvns	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e00b      	b.n	8003ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bf14      	ite	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	2300      	moveq	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f47f af6d 	bne.w	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ef4:	e034      	b.n	8003f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f886 	bl	8004008 <I2C_IsAcknowledgeFailed>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e034      	b.n	8003f70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d028      	beq.n	8003f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fe fe7b 	bl	8002c08 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d11d      	bne.n	8003f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2e:	2b80      	cmp	r3, #128	@ 0x80
 8003f30:	d016      	beq.n	8003f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e007      	b.n	8003f70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6a:	2b80      	cmp	r3, #128	@ 0x80
 8003f6c:	d1c3      	bne.n	8003ef6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f84:	e034      	b.n	8003ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f83e 	bl	8004008 <I2C_IsAcknowledgeFailed>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e034      	b.n	8004000 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d028      	beq.n	8003ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9e:	f7fe fe33 	bl	8002c08 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d11d      	bne.n	8003ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d016      	beq.n	8003ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e007      	b.n	8004000 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d1c3      	bne.n	8003f86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401e:	d11b      	bne.n	8004058 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004028:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	f043 0204 	orr.w	r2, r3, #4
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e272      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8087 	beq.w	8004192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004084:	4b92      	ldr	r3, [pc, #584]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b04      	cmp	r3, #4
 800408e:	d00c      	beq.n	80040aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004090:	4b8f      	ldr	r3, [pc, #572]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b08      	cmp	r3, #8
 800409a:	d112      	bne.n	80040c2 <HAL_RCC_OscConfig+0x5e>
 800409c:	4b8c      	ldr	r3, [pc, #560]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a8:	d10b      	bne.n	80040c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040aa:	4b89      	ldr	r3, [pc, #548]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d06c      	beq.n	8004190 <HAL_RCC_OscConfig+0x12c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d168      	bne.n	8004190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e24c      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ca:	d106      	bne.n	80040da <HAL_RCC_OscConfig+0x76>
 80040cc:	4b80      	ldr	r3, [pc, #512]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a7f      	ldr	r2, [pc, #508]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e02e      	b.n	8004138 <HAL_RCC_OscConfig+0xd4>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0x98>
 80040e2:	4b7b      	ldr	r3, [pc, #492]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a7a      	ldr	r2, [pc, #488]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b78      	ldr	r3, [pc, #480]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a77      	ldr	r2, [pc, #476]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e01d      	b.n	8004138 <HAL_RCC_OscConfig+0xd4>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0xbc>
 8004106:	4b72      	ldr	r3, [pc, #456]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a71      	ldr	r2, [pc, #452]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800410c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b6f      	ldr	r3, [pc, #444]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6e      	ldr	r2, [pc, #440]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e00b      	b.n	8004138 <HAL_RCC_OscConfig+0xd4>
 8004120:	4b6b      	ldr	r3, [pc, #428]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a6a      	ldr	r2, [pc, #424]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	4b68      	ldr	r3, [pc, #416]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a67      	ldr	r2, [pc, #412]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d013      	beq.n	8004168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7fe fd62 	bl	8002c08 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004148:	f7fe fd5e 	bl	8002c08 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	@ 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e200      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	4b5d      	ldr	r3, [pc, #372]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0xe4>
 8004166:	e014      	b.n	8004192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fe fd4e 	bl	8002c08 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004170:	f7fe fd4a 	bl	8002c08 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	@ 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e1ec      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	4b53      	ldr	r3, [pc, #332]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x10c>
 800418e:	e000      	b.n	8004192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d063      	beq.n	8004266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800419e:	4b4c      	ldr	r3, [pc, #304]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041aa:	4b49      	ldr	r3, [pc, #292]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d11c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x18c>
 80041b6:	4b46      	ldr	r3, [pc, #280]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d116      	bne.n	80041f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	4b43      	ldr	r3, [pc, #268]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_RCC_OscConfig+0x176>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d001      	beq.n	80041da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e1c0      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041da:	4b3d      	ldr	r3, [pc, #244]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4939      	ldr	r1, [pc, #228]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ee:	e03a      	b.n	8004266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f8:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <HAL_RCC_OscConfig+0x270>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fe:	f7fe fd03 	bl	8002c08 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004206:	f7fe fcff 	bl	8002c08 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e1a1      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004218:	4b2d      	ldr	r3, [pc, #180]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4b2a      	ldr	r3, [pc, #168]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4927      	ldr	r1, [pc, #156]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
 8004238:	e015      	b.n	8004266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423a:	4b26      	ldr	r3, [pc, #152]	@ (80042d4 <HAL_RCC_OscConfig+0x270>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fe fce2 	bl	8002c08 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004248:	f7fe fcde 	bl	8002c08 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e180      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	4b1d      	ldr	r3, [pc, #116]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d03a      	beq.n	80042e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d019      	beq.n	80042ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800427a:	4b17      	ldr	r3, [pc, #92]	@ (80042d8 <HAL_RCC_OscConfig+0x274>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004280:	f7fe fcc2 	bl	8002c08 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004288:	f7fe fcbe 	bl	8002c08 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e160      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	4b0d      	ldr	r3, [pc, #52]	@ (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042a6:	2001      	movs	r0, #1
 80042a8:	f000 face 	bl	8004848 <RCC_Delay>
 80042ac:	e01c      	b.n	80042e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ae:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <HAL_RCC_OscConfig+0x274>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b4:	f7fe fca8 	bl	8002c08 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ba:	e00f      	b.n	80042dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042bc:	f7fe fca4 	bl	8002c08 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d908      	bls.n	80042dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e146      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	42420000 	.word	0x42420000
 80042d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042dc:	4b92      	ldr	r3, [pc, #584]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e9      	bne.n	80042bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80a6 	beq.w	8004442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10d      	bne.n	8004322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004306:	4b88      	ldr	r3, [pc, #544]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	4a87      	ldr	r2, [pc, #540]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004310:	61d3      	str	r3, [r2, #28]
 8004312:	4b85      	ldr	r3, [pc, #532]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004322:	4b82      	ldr	r3, [pc, #520]	@ (800452c <HAL_RCC_OscConfig+0x4c8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d118      	bne.n	8004360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432e:	4b7f      	ldr	r3, [pc, #508]	@ (800452c <HAL_RCC_OscConfig+0x4c8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a7e      	ldr	r2, [pc, #504]	@ (800452c <HAL_RCC_OscConfig+0x4c8>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433a:	f7fe fc65 	bl	8002c08 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004342:	f7fe fc61 	bl	8002c08 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b64      	cmp	r3, #100	@ 0x64
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e103      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004354:	4b75      	ldr	r3, [pc, #468]	@ (800452c <HAL_RCC_OscConfig+0x4c8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x312>
 8004368:	4b6f      	ldr	r3, [pc, #444]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	4a6e      	ldr	r2, [pc, #440]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6213      	str	r3, [r2, #32]
 8004374:	e02d      	b.n	80043d2 <HAL_RCC_OscConfig+0x36e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x334>
 800437e:	4b6a      	ldr	r3, [pc, #424]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a69      	ldr	r2, [pc, #420]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6213      	str	r3, [r2, #32]
 800438a:	4b67      	ldr	r3, [pc, #412]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4a66      	ldr	r2, [pc, #408]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	6213      	str	r3, [r2, #32]
 8004396:	e01c      	b.n	80043d2 <HAL_RCC_OscConfig+0x36e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d10c      	bne.n	80043ba <HAL_RCC_OscConfig+0x356>
 80043a0:	4b61      	ldr	r3, [pc, #388]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4a60      	ldr	r2, [pc, #384]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	6213      	str	r3, [r2, #32]
 80043ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6213      	str	r3, [r2, #32]
 80043b8:	e00b      	b.n	80043d2 <HAL_RCC_OscConfig+0x36e>
 80043ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4a5a      	ldr	r2, [pc, #360]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	6213      	str	r3, [r2, #32]
 80043c6:	4b58      	ldr	r3, [pc, #352]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	4a57      	ldr	r2, [pc, #348]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d015      	beq.n	8004406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043da:	f7fe fc15 	bl	8002c08 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fe fc11 	bl	8002c08 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0b1      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ee      	beq.n	80043e2 <HAL_RCC_OscConfig+0x37e>
 8004404:	e014      	b.n	8004430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004406:	f7fe fbff 	bl	8002c08 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440c:	e00a      	b.n	8004424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fe fbfb 	bl	8002c08 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e09b      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004424:	4b40      	ldr	r3, [pc, #256]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ee      	bne.n	800440e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004436:	4b3c      	ldr	r3, [pc, #240]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4a3b      	ldr	r2, [pc, #236]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800443c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8087 	beq.w	800455a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800444c:	4b36      	ldr	r3, [pc, #216]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 030c 	and.w	r3, r3, #12
 8004454:	2b08      	cmp	r3, #8
 8004456:	d061      	beq.n	800451c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d146      	bne.n	80044ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004460:	4b33      	ldr	r3, [pc, #204]	@ (8004530 <HAL_RCC_OscConfig+0x4cc>)
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004466:	f7fe fbcf 	bl	8002c08 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446e:	f7fe fbcb 	bl	8002c08 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e06d      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004480:	4b29      	ldr	r3, [pc, #164]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f0      	bne.n	800446e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004494:	d108      	bne.n	80044a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004496:	4b24      	ldr	r3, [pc, #144]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	4921      	ldr	r1, [pc, #132]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a19      	ldr	r1, [r3, #32]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	430b      	orrs	r3, r1
 80044ba:	491b      	ldr	r1, [pc, #108]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004530 <HAL_RCC_OscConfig+0x4cc>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c6:	f7fe fb9f 	bl	8002c08 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ce:	f7fe fb9b 	bl	8002c08 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e03d      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044e0:	4b11      	ldr	r3, [pc, #68]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x46a>
 80044ec:	e035      	b.n	800455a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b10      	ldr	r3, [pc, #64]	@ (8004530 <HAL_RCC_OscConfig+0x4cc>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fe fb88 	bl	8002c08 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fc:	f7fe fb84 	bl	8002c08 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e026      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450e:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <HAL_RCC_OscConfig+0x4c4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x498>
 800451a:	e01e      	b.n	800455a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d107      	bne.n	8004534 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e019      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
 8004528:	40021000 	.word	0x40021000
 800452c:	40007000 	.word	0x40007000
 8004530:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004534:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <HAL_RCC_OscConfig+0x500>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	429a      	cmp	r2, r3
 8004546:	d106      	bne.n	8004556 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d001      	beq.n	800455a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40021000 	.word	0x40021000

08004568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0d0      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800457c:	4b6a      	ldr	r3, [pc, #424]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d910      	bls.n	80045ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b67      	ldr	r3, [pc, #412]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 0207 	bic.w	r2, r3, #7
 8004592:	4965      	ldr	r1, [pc, #404]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b63      	ldr	r3, [pc, #396]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0b8      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c4:	4b59      	ldr	r3, [pc, #356]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a58      	ldr	r2, [pc, #352]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045dc:	4b53      	ldr	r3, [pc, #332]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a52      	ldr	r2, [pc, #328]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b50      	ldr	r3, [pc, #320]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	494d      	ldr	r1, [pc, #308]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d040      	beq.n	8004688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b47      	ldr	r3, [pc, #284]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d115      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e07f      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004626:	4b41      	ldr	r3, [pc, #260]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e073      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004636:	4b3d      	ldr	r3, [pc, #244]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e06b      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004646:	4b39      	ldr	r3, [pc, #228]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4936      	ldr	r1, [pc, #216]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004658:	f7fe fad6 	bl	8002c08 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7fe fad2 	bl	8002c08 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e053      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	4b2d      	ldr	r3, [pc, #180]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 020c 	and.w	r2, r3, #12
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	429a      	cmp	r2, r3
 8004686:	d1eb      	bne.n	8004660 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004688:	4b27      	ldr	r3, [pc, #156]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d210      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 0207 	bic.w	r2, r3, #7
 800469e:	4922      	ldr	r1, [pc, #136]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e032      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c4:	4b19      	ldr	r3, [pc, #100]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4916      	ldr	r1, [pc, #88]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046e2:	4b12      	ldr	r3, [pc, #72]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	490e      	ldr	r1, [pc, #56]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046f6:	f000 f821 	bl	800473c <HAL_RCC_GetSysClockFreq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	490a      	ldr	r1, [pc, #40]	@ (8004730 <HAL_RCC_ClockConfig+0x1c8>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	4a09      	ldr	r2, [pc, #36]	@ (8004734 <HAL_RCC_ClockConfig+0x1cc>)
 8004710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004712:	4b09      	ldr	r3, [pc, #36]	@ (8004738 <HAL_RCC_ClockConfig+0x1d0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fa34 	bl	8002b84 <HAL_InitTick>

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40022000 	.word	0x40022000
 800472c:	40021000 	.word	0x40021000
 8004730:	080069d4 	.word	0x080069d4
 8004734:	20000000 	.word	0x20000000
 8004738:	20000004 	.word	0x20000004

0800473c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	2300      	movs	r3, #0
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004756:	4b1e      	ldr	r3, [pc, #120]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	2b04      	cmp	r3, #4
 8004764:	d002      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0x30>
 8004766:	2b08      	cmp	r3, #8
 8004768:	d003      	beq.n	8004772 <HAL_RCC_GetSysClockFreq+0x36>
 800476a:	e027      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800476c:	4b19      	ldr	r3, [pc, #100]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800476e:	613b      	str	r3, [r7, #16]
      break;
 8004770:	e027      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	0c9b      	lsrs	r3, r3, #18
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	4a17      	ldr	r2, [pc, #92]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800477c:	5cd3      	ldrb	r3, [r2, r3]
 800477e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d010      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800478a:	4b11      	ldr	r3, [pc, #68]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	0c5b      	lsrs	r3, r3, #17
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	4a11      	ldr	r2, [pc, #68]	@ (80047dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004796:	5cd3      	ldrb	r3, [r2, r3]
 8004798:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a0d      	ldr	r2, [pc, #52]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800479e:	fb03 f202 	mul.w	r2, r3, r2
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e004      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a0c      	ldr	r2, [pc, #48]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	613b      	str	r3, [r7, #16]
      break;
 80047ba:	e002      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80047be:	613b      	str	r3, [r7, #16]
      break;
 80047c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c2:	693b      	ldr	r3, [r7, #16]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	007a1200 	.word	0x007a1200
 80047d8:	0800742c 	.word	0x0800742c
 80047dc:	0800743c 	.word	0x0800743c
 80047e0:	003d0900 	.word	0x003d0900

080047e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e8:	4b02      	ldr	r3, [pc, #8]	@ (80047f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80047ea:	681b      	ldr	r3, [r3, #0]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	20000000 	.word	0x20000000

080047f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047fc:	f7ff fff2 	bl	80047e4 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4903      	ldr	r1, [pc, #12]	@ (800481c <HAL_RCC_GetPCLK1Freq+0x24>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000
 800481c:	080069e4 	.word	0x080069e4

08004820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004824:	f7ff ffde 	bl	80047e4 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	0adb      	lsrs	r3, r3, #11
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4903      	ldr	r1, [pc, #12]	@ (8004844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	080069e4 	.word	0x080069e4

08004848 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004850:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <RCC_Delay+0x34>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0a      	ldr	r2, [pc, #40]	@ (8004880 <RCC_Delay+0x38>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	0a5b      	lsrs	r3, r3, #9
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	fb02 f303 	mul.w	r3, r2, r3
 8004862:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004864:	bf00      	nop
  }
  while (Delay --);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1e5a      	subs	r2, r3, #1
 800486a:	60fa      	str	r2, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f9      	bne.n	8004864 <RCC_Delay+0x1c>
}
 8004870:	bf00      	nop
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	20000000 	.word	0x20000000
 8004880:	10624dd3 	.word	0x10624dd3

08004884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e041      	b.n	800491a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fb feda 	bl	8000664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f000 fbe6 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e041      	b.n	80049b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f839 	bl	80049c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3304      	adds	r3, #4
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f000 fb97 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
	...

080049d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <HAL_TIM_PWM_Start+0x24>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e022      	b.n	8004a3e <HAL_TIM_PWM_Start+0x6a>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d109      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x3e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	bf14      	ite	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	2300      	moveq	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	e015      	b.n	8004a3e <HAL_TIM_PWM_Start+0x6a>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d109      	bne.n	8004a2c <HAL_TIM_PWM_Start+0x58>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	e008      	b.n	8004a3e <HAL_TIM_PWM_Start+0x6a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e05e      	b.n	8004b04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start+0x82>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a54:	e013      	b.n	8004a7e <HAL_TIM_PWM_Start+0xaa>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start+0x92>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a64:	e00b      	b.n	8004a7e <HAL_TIM_PWM_Start+0xaa>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_PWM_Start+0xa2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a74:	e003      	b.n	8004a7e <HAL_TIM_PWM_Start+0xaa>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2201      	movs	r2, #1
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fd84 	bl	8005594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1e      	ldr	r2, [pc, #120]	@ (8004b0c <HAL_TIM_PWM_Start+0x138>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d107      	bne.n	8004aa6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <HAL_TIM_PWM_Start+0x138>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00e      	beq.n	8004ace <HAL_TIM_PWM_Start+0xfa>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab8:	d009      	beq.n	8004ace <HAL_TIM_PWM_Start+0xfa>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a14      	ldr	r2, [pc, #80]	@ (8004b10 <HAL_TIM_PWM_Start+0x13c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_TIM_PWM_Start+0xfa>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a12      	ldr	r2, [pc, #72]	@ (8004b14 <HAL_TIM_PWM_Start+0x140>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d111      	bne.n	8004af2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b06      	cmp	r3, #6
 8004ade:	d010      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af0:	e007      	b.n	8004b02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0201 	orr.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40000800 	.word	0x40000800

08004b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d122      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d11b      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0202 	mvn.w	r2, #2
 8004b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fa7f 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa72 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fa81 	bl	8005070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d122      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0204 	mvn.w	r2, #4
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa55 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa48 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fa57 	bl	8005070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d122      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d11b      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0208 	mvn.w	r2, #8
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa2b 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa1e 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fa2d 	bl	8005070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d122      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d11b      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0210 	mvn.w	r2, #16
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2208      	movs	r2, #8
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fa01 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f9f4 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fa03 	bl	8005070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10e      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d107      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0201 	mvn.w	r2, #1
 8004c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f9cf 	bl	800503a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca6:	2b80      	cmp	r3, #128	@ 0x80
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb4:	2b80      	cmp	r3, #128	@ 0x80
 8004cb6:	d107      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fcf1 	bl	80056aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd2:	2b40      	cmp	r3, #64	@ 0x40
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce0:	2b40      	cmp	r3, #64	@ 0x40
 8004ce2:	d107      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f9c7 	bl	8005082 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d10e      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d107      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0220 	mvn.w	r2, #32
 8004d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fcbc 	bl	8005698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e0ae      	b.n	8004ea4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b0c      	cmp	r3, #12
 8004d52:	f200 809f 	bhi.w	8004e94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d56:	a201      	add	r2, pc, #4	@ (adr r2, 8004d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004d91 	.word	0x08004d91
 8004d60:	08004e95 	.word	0x08004e95
 8004d64:	08004e95 	.word	0x08004e95
 8004d68:	08004e95 	.word	0x08004e95
 8004d6c:	08004dd1 	.word	0x08004dd1
 8004d70:	08004e95 	.word	0x08004e95
 8004d74:	08004e95 	.word	0x08004e95
 8004d78:	08004e95 	.word	0x08004e95
 8004d7c:	08004e13 	.word	0x08004e13
 8004d80:	08004e95 	.word	0x08004e95
 8004d84:	08004e95 	.word	0x08004e95
 8004d88:	08004e95 	.word	0x08004e95
 8004d8c:	08004e53 	.word	0x08004e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f9de 	bl	8005158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0208 	orr.w	r2, r2, #8
 8004daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0204 	bic.w	r2, r2, #4
 8004dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6999      	ldr	r1, [r3, #24]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	619a      	str	r2, [r3, #24]
      break;
 8004dce:	e064      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fa24 	bl	8005224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6999      	ldr	r1, [r3, #24]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	021a      	lsls	r2, r3, #8
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	619a      	str	r2, [r3, #24]
      break;
 8004e10:	e043      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fa6d 	bl	80052f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0208 	orr.w	r2, r2, #8
 8004e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0204 	bic.w	r2, r2, #4
 8004e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69d9      	ldr	r1, [r3, #28]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	61da      	str	r2, [r3, #28]
      break;
 8004e50:	e023      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fab7 	bl	80053cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69d9      	ldr	r1, [r3, #28]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	021a      	lsls	r2, r3, #8
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	61da      	str	r2, [r3, #28]
      break;
 8004e92:	e002      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	75fb      	strb	r3, [r7, #23]
      break;
 8004e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e0b4      	b.n	8005032 <HAL_TIM_ConfigClockSource+0x186>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f00:	d03e      	beq.n	8004f80 <HAL_TIM_ConfigClockSource+0xd4>
 8004f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f06:	f200 8087 	bhi.w	8005018 <HAL_TIM_ConfigClockSource+0x16c>
 8004f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f0e:	f000 8086 	beq.w	800501e <HAL_TIM_ConfigClockSource+0x172>
 8004f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f16:	d87f      	bhi.n	8005018 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b70      	cmp	r3, #112	@ 0x70
 8004f1a:	d01a      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0xa6>
 8004f1c:	2b70      	cmp	r3, #112	@ 0x70
 8004f1e:	d87b      	bhi.n	8005018 <HAL_TIM_ConfigClockSource+0x16c>
 8004f20:	2b60      	cmp	r3, #96	@ 0x60
 8004f22:	d050      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8004f24:	2b60      	cmp	r3, #96	@ 0x60
 8004f26:	d877      	bhi.n	8005018 <HAL_TIM_ConfigClockSource+0x16c>
 8004f28:	2b50      	cmp	r3, #80	@ 0x50
 8004f2a:	d03c      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8004f2c:	2b50      	cmp	r3, #80	@ 0x50
 8004f2e:	d873      	bhi.n	8005018 <HAL_TIM_ConfigClockSource+0x16c>
 8004f30:	2b40      	cmp	r3, #64	@ 0x40
 8004f32:	d058      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8004f34:	2b40      	cmp	r3, #64	@ 0x40
 8004f36:	d86f      	bhi.n	8005018 <HAL_TIM_ConfigClockSource+0x16c>
 8004f38:	2b30      	cmp	r3, #48	@ 0x30
 8004f3a:	d064      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x15a>
 8004f3c:	2b30      	cmp	r3, #48	@ 0x30
 8004f3e:	d86b      	bhi.n	8005018 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d060      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x15a>
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d867      	bhi.n	8005018 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d05c      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x15a>
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d05a      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x15a>
 8004f50:	e062      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f62:	f000 faf8 	bl	8005556 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	609a      	str	r2, [r3, #8]
      break;
 8004f7e:	e04f      	b.n	8005020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f90:	f000 fae1 	bl	8005556 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fa2:	609a      	str	r2, [r3, #8]
      break;
 8004fa4:	e03c      	b.n	8005020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f000 fa58 	bl	8005468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2150      	movs	r1, #80	@ 0x50
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 faaf 	bl	8005522 <TIM_ITRx_SetConfig>
      break;
 8004fc4:	e02c      	b.n	8005020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f000 fa76 	bl	80054c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2160      	movs	r1, #96	@ 0x60
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fa9f 	bl	8005522 <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e01c      	b.n	8005020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f000 fa38 	bl	8005468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2140      	movs	r1, #64	@ 0x40
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fa8f 	bl	8005522 <TIM_ITRx_SetConfig>
      break;
 8005004:	e00c      	b.n	8005020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f000 fa86 	bl	8005522 <TIM_ITRx_SetConfig>
      break;
 8005016:	e003      	b.n	8005020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
      break;
 800501c:	e000      	b.n	8005020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800501e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005030:	7bfb      	ldrb	r3, [r7, #15]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr

0800505e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a29      	ldr	r2, [pc, #164]	@ (800514c <TIM_Base_SetConfig+0xb8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <TIM_Base_SetConfig+0x30>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b2:	d007      	beq.n	80050c4 <TIM_Base_SetConfig+0x30>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a26      	ldr	r2, [pc, #152]	@ (8005150 <TIM_Base_SetConfig+0xbc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_Base_SetConfig+0x30>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a25      	ldr	r2, [pc, #148]	@ (8005154 <TIM_Base_SetConfig+0xc0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d108      	bne.n	80050d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1c      	ldr	r2, [pc, #112]	@ (800514c <TIM_Base_SetConfig+0xb8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00b      	beq.n	80050f6 <TIM_Base_SetConfig+0x62>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e4:	d007      	beq.n	80050f6 <TIM_Base_SetConfig+0x62>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a19      	ldr	r2, [pc, #100]	@ (8005150 <TIM_Base_SetConfig+0xbc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <TIM_Base_SetConfig+0x62>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a18      	ldr	r2, [pc, #96]	@ (8005154 <TIM_Base_SetConfig+0xc0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d108      	bne.n	8005108 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a07      	ldr	r2, [pc, #28]	@ (800514c <TIM_Base_SetConfig+0xb8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d103      	bne.n	800513c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	615a      	str	r2, [r3, #20]
}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800

08005158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f023 0201 	bic.w	r2, r3, #1
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 0302 	bic.w	r3, r3, #2
 80051a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005220 <TIM_OC1_SetConfig+0xc8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d10c      	bne.n	80051ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0308 	bic.w	r3, r3, #8
 80051ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f023 0304 	bic.w	r3, r3, #4
 80051cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a13      	ldr	r2, [pc, #76]	@ (8005220 <TIM_OC1_SetConfig+0xc8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d111      	bne.n	80051fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	621a      	str	r2, [r3, #32]
}
 8005214:	bf00      	nop
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40012c00 	.word	0x40012c00

08005224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f023 0210 	bic.w	r2, r3, #16
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800525a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0320 	bic.w	r3, r3, #32
 800526e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a1d      	ldr	r2, [pc, #116]	@ (80052f4 <TIM_OC2_SetConfig+0xd0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d10d      	bne.n	80052a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800528a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800529e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a14      	ldr	r2, [pc, #80]	@ (80052f4 <TIM_OC2_SetConfig+0xd0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d113      	bne.n	80052d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr
 80052f4:	40012c00 	.word	0x40012c00

080052f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1d      	ldr	r2, [pc, #116]	@ (80053c8 <TIM_OC3_SetConfig+0xd0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d10d      	bne.n	8005372 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800535c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a14      	ldr	r2, [pc, #80]	@ (80053c8 <TIM_OC3_SetConfig+0xd0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d113      	bne.n	80053a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	621a      	str	r2, [r3, #32]
}
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40012c00 	.word	0x40012c00

080053cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	031b      	lsls	r3, r3, #12
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0f      	ldr	r2, [pc, #60]	@ (8005464 <TIM_OC4_SetConfig+0x98>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d109      	bne.n	8005440 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	019b      	lsls	r3, r3, #6
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr
 8005464:	40012c00 	.word	0x40012c00

08005468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0201 	bic.w	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f023 030a 	bic.w	r3, r3, #10
 80054a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f023 0210 	bic.w	r2, r3, #16
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	031b      	lsls	r3, r3, #12
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005500:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	621a      	str	r2, [r3, #32]
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	f043 0307 	orr.w	r3, r3, #7
 8005544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	609a      	str	r2, [r3, #8]
}
 800554c:	bf00      	nop
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr

08005556 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005556:	b480      	push	{r7}
 8005558:	b087      	sub	sp, #28
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
 8005562:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005570:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	021a      	lsls	r2, r3, #8
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	431a      	orrs	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4313      	orrs	r3, r2
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	609a      	str	r2, [r3, #8]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr

08005594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 031f 	and.w	r3, r3, #31
 80055a6:	2201      	movs	r2, #1
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a1a      	ldr	r2, [r3, #32]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	43db      	mvns	r3, r3
 80055b6:	401a      	ands	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a1a      	ldr	r2, [r3, #32]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f003 031f 	and.w	r3, r3, #31
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	fa01 f303 	lsl.w	r3, r1, r3
 80055cc:	431a      	orrs	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr

080055dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e046      	b.n	8005682 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a16      	ldr	r2, [pc, #88]	@ (800568c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00e      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005640:	d009      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a12      	ldr	r2, [pc, #72]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a10      	ldr	r2, [pc, #64]	@ (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d10c      	bne.n	8005670 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800565c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	4313      	orrs	r3, r2
 8005666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr
 800568c:	40012c00 	.word	0x40012c00
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800

08005698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr

080056aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e042      	b.n	8005754 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fb f842 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2224      	movs	r2, #36	@ 0x24
 80056ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 f833 	bl	800676c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695a      	ldr	r2, [r3, #20]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08a      	sub	sp, #40	@ 0x28
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b20      	cmp	r3, #32
 800577a:	d16d      	bne.n	8005858 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <HAL_UART_Transmit+0x2c>
 8005782:	88fb      	ldrh	r3, [r7, #6]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e066      	b.n	800585a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2221      	movs	r2, #33	@ 0x21
 8005796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800579a:	f7fd fa35 	bl	8002c08 <HAL_GetTick>
 800579e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	88fa      	ldrh	r2, [r7, #6]
 80057a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	88fa      	ldrh	r2, [r7, #6]
 80057aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b4:	d108      	bne.n	80057c8 <HAL_UART_Transmit+0x6c>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	e003      	b.n	80057d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d0:	e02a      	b.n	8005828 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2200      	movs	r2, #0
 80057da:	2180      	movs	r1, #128	@ 0x80
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fcfa 	bl	80061d6 <UART_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e036      	b.n	800585a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10b      	bne.n	800580a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005800:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	3302      	adds	r3, #2
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	e007      	b.n	800581a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	3301      	adds	r3, #1
 8005818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1cf      	bne.n	80057d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2200      	movs	r2, #0
 800583a:	2140      	movs	r1, #64	@ 0x40
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fcca 	bl	80061d6 <UART_WaitOnFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e006      	b.n	800585a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	e000      	b.n	800585a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005858:	2302      	movs	r3, #2
  }
}
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08c      	sub	sp, #48	@ 0x30
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b20      	cmp	r3, #32
 800587c:	d156      	bne.n	800592c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <HAL_UART_Transmit_DMA+0x26>
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e04f      	b.n	800592e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	88fa      	ldrh	r2, [r7, #6]
 8005898:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2221      	movs	r2, #33	@ 0x21
 80058aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	4a21      	ldr	r2, [pc, #132]	@ (8005938 <HAL_UART_Transmit_DMA+0xd4>)
 80058b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	4a20      	ldr	r2, [pc, #128]	@ (800593c <HAL_UART_Transmit_DMA+0xd8>)
 80058bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005940 <HAL_UART_Transmit_DMA+0xdc>)
 80058c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ca:	2200      	movs	r2, #0
 80058cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80058d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058da:	6819      	ldr	r1, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3304      	adds	r3, #4
 80058e2:	461a      	mov	r2, r3
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	f7fd fb25 	bl	8002f34 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3314      	adds	r3, #20
 80058fa:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	617b      	str	r3, [r7, #20]
   return(result);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800590a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3314      	adds	r3, #20
 8005912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005914:	627a      	str	r2, [r7, #36]	@ 0x24
 8005916:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6a39      	ldr	r1, [r7, #32]
 800591a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	61fb      	str	r3, [r7, #28]
   return(result);
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e5      	bne.n	80058f4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	e000      	b.n	800592e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800592c:	2302      	movs	r3, #2
  }
}
 800592e:	4618      	mov	r0, r3
 8005930:	3730      	adds	r7, #48	@ 0x30
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	08005f25 	.word	0x08005f25
 800593c:	08005fbf 	.word	0x08005fbf
 8005940:	08006143 	.word	0x08006143

08005944 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b20      	cmp	r3, #32
 800595c:	d112      	bne.n	8005984 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_UART_Receive_DMA+0x26>
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e00b      	b.n	8005986 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	461a      	mov	r2, r3
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 fc9a 	bl	80062b4 <UART_Start_Receive_DMA>
 8005980:	4603      	mov	r3, r0
 8005982:	e000      	b.n	8005986 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b0ba      	sub	sp, #232	@ 0xe8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80059bc:	2300      	movs	r3, #0
 80059be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80059ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10f      	bne.n	80059f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_UART_IRQHandler+0x66>
 80059e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fdfe 	bl	80065f0 <UART_Receive_IT>
      return;
 80059f4:	e25b      	b.n	8005eae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80de 	beq.w	8005bbc <HAL_UART_IRQHandler+0x22c>
 8005a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80d1 	beq.w	8005bbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_UART_IRQHandler+0xae>
 8005a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a36:	f043 0201 	orr.w	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <HAL_UART_IRQHandler+0xd2>
 8005a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a5a:	f043 0202 	orr.w	r2, r3, #2
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <HAL_UART_IRQHandler+0xf6>
 8005a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7e:	f043 0204 	orr.w	r2, r3, #4
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d011      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x126>
 8005a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d105      	bne.n	8005aaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aae:	f043 0208 	orr.w	r2, r3, #8
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 81f2 	beq.w	8005ea4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d008      	beq.n	8005ade <HAL_UART_IRQHandler+0x14e>
 8005acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fd89 	bl	80065f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	bf14      	ite	ne
 8005aec:	2301      	movne	r3, #1
 8005aee:	2300      	moveq	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <HAL_UART_IRQHandler+0x17a>
 8005b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d04f      	beq.n	8005baa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fc93 	bl	8006436 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d041      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3314      	adds	r3, #20
 8005b24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3314      	adds	r3, #20
 8005b46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1d9      	bne.n	8005b1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d013      	beq.n	8005b9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b76:	4a7e      	ldr	r2, [pc, #504]	@ (8005d70 <HAL_UART_IRQHandler+0x3e0>)
 8005b78:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fd fa74 	bl	800306c <HAL_DMA_Abort_IT>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d016      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b94:	4610      	mov	r0, r2
 8005b96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b98:	e00e      	b.n	8005bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f9ae 	bl	8005efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba0:	e00a      	b.n	8005bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f9aa 	bl	8005efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba8:	e006      	b.n	8005bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f9a6 	bl	8005efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005bb6:	e175      	b.n	8005ea4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb8:	bf00      	nop
    return;
 8005bba:	e173      	b.n	8005ea4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	f040 814f 	bne.w	8005e64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 8148 	beq.w	8005e64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd8:	f003 0310 	and.w	r3, r3, #16
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8141 	beq.w	8005e64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005be2:	2300      	movs	r3, #0
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 80b6 	beq.w	8005d74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8145 	beq.w	8005ea8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c26:	429a      	cmp	r2, r3
 8005c28:	f080 813e 	bcs.w	8005ea8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	f000 8088 	beq.w	8005d50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c6c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c78:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1d9      	bne.n	8005c40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3314      	adds	r3, #20
 8005c92:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c9e:	f023 0301 	bic.w	r3, r3, #1
 8005ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3314      	adds	r3, #20
 8005cac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005cb0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005cb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005cb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005cc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e1      	bne.n	8005c8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3314      	adds	r3, #20
 8005ce8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005cec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005cf2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cf4:	e841 2300 	strex	r3, r2, [r1]
 8005cf8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1e3      	bne.n	8005cc8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	330c      	adds	r3, #12
 8005d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d20:	f023 0310 	bic.w	r3, r3, #16
 8005d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005d32:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d34:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e3      	bne.n	8005d0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fd f952 	bl	8002ff4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f8d1 	bl	8005f0e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d6c:	e09c      	b.n	8005ea8 <HAL_UART_IRQHandler+0x518>
 8005d6e:	bf00      	nop
 8005d70:	080064fb 	.word	0x080064fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 808e 	beq.w	8005eac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8089 	beq.w	8005eac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	330c      	adds	r3, #12
 8005da0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005db0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005dbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005dc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e3      	bne.n	8005d9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3314      	adds	r3, #20
 8005dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	623b      	str	r3, [r7, #32]
   return(result);
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	f023 0301 	bic.w	r3, r3, #1
 8005de8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3314      	adds	r3, #20
 8005df2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005df6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e3      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0310 	bic.w	r3, r3, #16
 8005e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005e3c:	61fa      	str	r2, [r7, #28]
 8005e3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	69b9      	ldr	r1, [r7, #24]
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	617b      	str	r3, [r7, #20]
   return(result);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e3      	bne.n	8005e18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f856 	bl	8005f0e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e62:	e023      	b.n	8005eac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d009      	beq.n	8005e84 <HAL_UART_IRQHandler+0x4f4>
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fb50 	bl	8006522 <UART_Transmit_IT>
    return;
 8005e82:	e014      	b.n	8005eae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <HAL_UART_IRQHandler+0x51e>
 8005e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fb8f 	bl	80065c0 <UART_EndTransmit_IT>
    return;
 8005ea2:	e004      	b.n	8005eae <HAL_UART_IRQHandler+0x51e>
    return;
 8005ea4:	bf00      	nop
 8005ea6:	e002      	b.n	8005eae <HAL_UART_IRQHandler+0x51e>
      return;
 8005ea8:	bf00      	nop
 8005eaa:	e000      	b.n	8005eae <HAL_UART_IRQHandler+0x51e>
      return;
 8005eac:	bf00      	nop
  }
}
 8005eae:	37e8      	adds	r7, #232	@ 0xe8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr

08005eea <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr

08005efc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr

08005f0e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bc80      	pop	{r7}
 8005f22:	4770      	bx	lr

08005f24 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b090      	sub	sp, #64	@ 0x40
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d137      	bne.n	8005fb0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f42:	2200      	movs	r2, #0
 8005f44:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3314      	adds	r3, #20
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	623b      	str	r3, [r7, #32]
   return(result);
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3314      	adds	r3, #20
 8005f64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f66:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f6e:	e841 2300 	strex	r3, r2, [r1]
 8005f72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e5      	bne.n	8005f46 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	330c      	adds	r3, #12
 8005f80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	330c      	adds	r3, #12
 8005f98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f9a:	61fa      	str	r2, [r7, #28]
 8005f9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	69b9      	ldr	r1, [r7, #24]
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e5      	bne.n	8005f7a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fae:	e002      	b.n	8005fb6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005fb0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005fb2:	f7ff ff7f 	bl	8005eb4 <HAL_UART_TxCpltCallback>
}
 8005fb6:	bf00      	nop
 8005fb8:	3740      	adds	r7, #64	@ 0x40
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff ff7a 	bl	8005ec6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd2:	bf00      	nop
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b09c      	sub	sp, #112	@ 0x70
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d172      	bne.n	80060dc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	330c      	adds	r3, #12
 8006002:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800600c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800600e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006012:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006014:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800601c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800601e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006022:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800602a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e5      	bne.n	8005ffc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3314      	adds	r3, #20
 8006036:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	667b      	str	r3, [r7, #100]	@ 0x64
 8006048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3314      	adds	r3, #20
 800604e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006050:	647a      	str	r2, [r7, #68]	@ 0x44
 8006052:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800605e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e5      	bne.n	8006030 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3314      	adds	r3, #20
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	623b      	str	r3, [r7, #32]
   return(result);
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800607a:	663b      	str	r3, [r7, #96]	@ 0x60
 800607c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3314      	adds	r3, #20
 8006082:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006084:	633a      	str	r2, [r7, #48]	@ 0x30
 8006086:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800608a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e5      	bne.n	8006064 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800609a:	2220      	movs	r2, #32
 800609c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d119      	bne.n	80060dc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	330c      	adds	r3, #12
 80060ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0310 	bic.w	r3, r3, #16
 80060be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80060c8:	61fa      	str	r2, [r7, #28]
 80060ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	69b9      	ldr	r1, [r7, #24]
 80060ce:	69fa      	ldr	r2, [r7, #28]
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	617b      	str	r3, [r7, #20]
   return(result);
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e5      	bne.n	80060a8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060de:	2200      	movs	r2, #0
 80060e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d106      	bne.n	80060f8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060ee:	4619      	mov	r1, r3
 80060f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80060f2:	f7ff ff0c 	bl	8005f0e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060f6:	e002      	b.n	80060fe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80060f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80060fa:	f7ff feed 	bl	8005ed8 <HAL_UART_RxCpltCallback>
}
 80060fe:	bf00      	nop
 8006100:	3770      	adds	r7, #112	@ 0x70
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006112:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2201      	movs	r2, #1
 8006118:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611e:	2b01      	cmp	r3, #1
 8006120:	d108      	bne.n	8006134 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	b29b      	uxth	r3, r3
 800612a:	4619      	mov	r1, r3
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff feee 	bl	8005f0e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006132:	e002      	b.n	800613a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f7ff fed8 	bl	8005eea <HAL_UART_RxHalfCpltCallback>
}
 800613a:	bf00      	nop
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006152:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800615e:	2b00      	cmp	r3, #0
 8006160:	bf14      	ite	ne
 8006162:	2301      	movne	r3, #1
 8006164:	2300      	moveq	r3, #0
 8006166:	b2db      	uxtb	r3, r3
 8006168:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b21      	cmp	r3, #33	@ 0x21
 8006174:	d108      	bne.n	8006188 <UART_DMAError+0x46>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006182:	68b8      	ldr	r0, [r7, #8]
 8006184:	f000 f930 	bl	80063e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	bf14      	ite	ne
 8006196:	2301      	movne	r3, #1
 8006198:	2300      	moveq	r3, #0
 800619a:	b2db      	uxtb	r3, r3
 800619c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b22      	cmp	r3, #34	@ 0x22
 80061a8:	d108      	bne.n	80061bc <UART_DMAError+0x7a>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2200      	movs	r2, #0
 80061b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80061b6:	68b8      	ldr	r0, [r7, #8]
 80061b8:	f000 f93d 	bl	8006436 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c0:	f043 0210 	orr.w	r2, r3, #16
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061c8:	68b8      	ldr	r0, [r7, #8]
 80061ca:	f7ff fe97 	bl	8005efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ce:	bf00      	nop
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b090      	sub	sp, #64	@ 0x40
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	603b      	str	r3, [r7, #0]
 80061e2:	4613      	mov	r3, r2
 80061e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e6:	e050      	b.n	800628a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d04c      	beq.n	800628a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <UART_WaitOnFlagUntilTimeout+0x30>
 80061f6:	f7fc fd07 	bl	8002c08 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006202:	429a      	cmp	r2, r3
 8006204:	d241      	bcs.n	800628a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800621c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	330c      	adds	r3, #12
 8006224:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006226:	637a      	str	r2, [r7, #52]	@ 0x34
 8006228:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800622c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e5      	bne.n	8006206 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3314      	adds	r3, #20
 8006240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	e853 3f00 	ldrex	r3, [r3]
 8006248:	613b      	str	r3, [r7, #16]
   return(result);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3314      	adds	r3, #20
 8006258:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800625a:	623a      	str	r2, [r7, #32]
 800625c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	69f9      	ldr	r1, [r7, #28]
 8006260:	6a3a      	ldr	r2, [r7, #32]
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	61bb      	str	r3, [r7, #24]
   return(result);
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e5      	bne.n	800623a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2220      	movs	r2, #32
 8006272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e00f      	b.n	80062aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4013      	ands	r3, r2
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	429a      	cmp	r2, r3
 8006298:	bf0c      	ite	eq
 800629a:	2301      	moveq	r3, #1
 800629c:	2300      	movne	r3, #0
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	79fb      	ldrb	r3, [r7, #7]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d09f      	beq.n	80061e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3740      	adds	r7, #64	@ 0x40
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b098      	sub	sp, #96	@ 0x60
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	4613      	mov	r3, r2
 80062c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	88fa      	ldrh	r2, [r7, #6]
 80062cc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2222      	movs	r2, #34	@ 0x22
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e0:	4a3e      	ldr	r2, [pc, #248]	@ (80063dc <UART_Start_Receive_DMA+0x128>)
 80062e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e8:	4a3d      	ldr	r2, [pc, #244]	@ (80063e0 <UART_Start_Receive_DMA+0x12c>)
 80062ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f0:	4a3c      	ldr	r2, [pc, #240]	@ (80063e4 <UART_Start_Receive_DMA+0x130>)
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f8:	2200      	movs	r2, #0
 80062fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80062fc:	f107 0308 	add.w	r3, r7, #8
 8006300:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3304      	adds	r3, #4
 800630c:	4619      	mov	r1, r3
 800630e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	f7fc fe0e 	bl	8002f34 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	613b      	str	r3, [r7, #16]
 800632c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d019      	beq.n	800636a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	330c      	adds	r3, #12
 800633c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800634c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	330c      	adds	r3, #12
 8006354:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006356:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006358:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800635c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e5      	bne.n	8006336 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3314      	adds	r3, #20
 8006370:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800637a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637c:	f043 0301 	orr.w	r3, r3, #1
 8006380:	657b      	str	r3, [r7, #84]	@ 0x54
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3314      	adds	r3, #20
 8006388:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800638a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006390:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e5      	bne.n	800636a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3314      	adds	r3, #20
 80063a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	617b      	str	r3, [r7, #20]
   return(result);
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3314      	adds	r3, #20
 80063bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063be:	627a      	str	r2, [r7, #36]	@ 0x24
 80063c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6a39      	ldr	r1, [r7, #32]
 80063c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e5      	bne.n	800639e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3760      	adds	r7, #96	@ 0x60
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	08005fdb 	.word	0x08005fdb
 80063e0:	08006107 	.word	0x08006107
 80063e4:	08006143 	.word	0x08006143

080063e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b089      	sub	sp, #36	@ 0x24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	330c      	adds	r3, #12
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	61ba      	str	r2, [r7, #24]
 8006412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	6979      	ldr	r1, [r7, #20]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	613b      	str	r3, [r7, #16]
   return(result);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e5      	bne.n	80063f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800642c:	bf00      	nop
 800642e:	3724      	adds	r7, #36	@ 0x24
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr

08006436 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006436:	b480      	push	{r7}
 8006438:	b095      	sub	sp, #84	@ 0x54
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800644e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006450:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006454:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330c      	adds	r3, #12
 800645c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800645e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006464:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800646c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e5      	bne.n	800643e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	61fb      	str	r3, [r7, #28]
   return(result);
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	64bb      	str	r3, [r7, #72]	@ 0x48
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3314      	adds	r3, #20
 8006490:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006492:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006494:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006498:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e5      	bne.n	8006472 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d119      	bne.n	80064e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	330c      	adds	r3, #12
 80064b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f023 0310 	bic.w	r3, r3, #16
 80064c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	330c      	adds	r3, #12
 80064cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064ce:	61ba      	str	r2, [r7, #24]
 80064d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6979      	ldr	r1, [r7, #20]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	613b      	str	r3, [r7, #16]
   return(result);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e5      	bne.n	80064ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80064f0:	bf00      	nop
 80064f2:	3754      	adds	r7, #84	@ 0x54
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr

080064fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f7ff fcf1 	bl	8005efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800651a:	bf00      	nop
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006522:	b480      	push	{r7}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b21      	cmp	r3, #33	@ 0x21
 8006534:	d13e      	bne.n	80065b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800653e:	d114      	bne.n	800656a <UART_Transmit_IT+0x48>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d110      	bne.n	800656a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800655c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	1c9a      	adds	r2, r3, #2
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	621a      	str	r2, [r3, #32]
 8006568:	e008      	b.n	800657c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	1c59      	adds	r1, r3, #1
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6211      	str	r1, [r2, #32]
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	b29b      	uxth	r3, r3
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	4619      	mov	r1, r3
 800658a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10f      	bne.n	80065b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800659e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e000      	b.n	80065b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065b4:	2302      	movs	r3, #2
  }
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr

080065c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fc67 	bl	8005eb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08c      	sub	sp, #48	@ 0x30
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b22      	cmp	r3, #34	@ 0x22
 8006602:	f040 80ae 	bne.w	8006762 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800660e:	d117      	bne.n	8006640 <UART_Receive_IT+0x50>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d113      	bne.n	8006640 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006618:	2300      	movs	r3, #0
 800661a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006620:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662e:	b29a      	uxth	r2, r3
 8006630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006632:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006638:	1c9a      	adds	r2, r3, #2
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	629a      	str	r2, [r3, #40]	@ 0x28
 800663e:	e026      	b.n	800668e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006644:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006652:	d007      	beq.n	8006664 <UART_Receive_IT+0x74>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <UART_Receive_IT+0x82>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	b2da      	uxtb	r2, r3
 800666c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	e008      	b.n	8006684 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800667e:	b2da      	uxtb	r2, r3
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29b      	uxth	r3, r3
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	4619      	mov	r1, r3
 800669c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d15d      	bne.n	800675e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0220 	bic.w	r2, r2, #32
 80066b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695a      	ldr	r2, [r3, #20]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d135      	bne.n	8006754 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	330c      	adds	r3, #12
 80066f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	613b      	str	r3, [r7, #16]
   return(result);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f023 0310 	bic.w	r3, r3, #16
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	330c      	adds	r3, #12
 800670c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800670e:	623a      	str	r2, [r7, #32]
 8006710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	69f9      	ldr	r1, [r7, #28]
 8006714:	6a3a      	ldr	r2, [r7, #32]
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	61bb      	str	r3, [r7, #24]
   return(result);
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e5      	bne.n	80066ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0310 	and.w	r3, r3, #16
 800672c:	2b10      	cmp	r3, #16
 800672e:	d10a      	bne.n	8006746 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fbde 	bl	8005f0e <HAL_UARTEx_RxEventCallback>
 8006752:	e002      	b.n	800675a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff fbbf 	bl	8005ed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	e002      	b.n	8006764 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e000      	b.n	8006764 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006762:	2302      	movs	r3, #2
  }
}
 8006764:	4618      	mov	r0, r3
 8006766:	3730      	adds	r7, #48	@ 0x30
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80067a6:	f023 030c 	bic.w	r3, r3, #12
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6812      	ldr	r2, [r2, #0]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	430b      	orrs	r3, r1
 80067b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006880 <UART_SetConfig+0x114>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d103      	bne.n	80067dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067d4:	f7fe f824 	bl	8004820 <HAL_RCC_GetPCLK2Freq>
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	e002      	b.n	80067e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067dc:	f7fe f80c 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 80067e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009a      	lsls	r2, r3, #2
 80067ec:	441a      	add	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f8:	4a22      	ldr	r2, [pc, #136]	@ (8006884 <UART_SetConfig+0x118>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	0119      	lsls	r1, r3, #4
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4613      	mov	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	009a      	lsls	r2, r3, #2
 800680c:	441a      	add	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	fbb2 f2f3 	udiv	r2, r2, r3
 8006818:	4b1a      	ldr	r3, [pc, #104]	@ (8006884 <UART_SetConfig+0x118>)
 800681a:	fba3 0302 	umull	r0, r3, r3, r2
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	2064      	movs	r0, #100	@ 0x64
 8006822:	fb00 f303 	mul.w	r3, r0, r3
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	3332      	adds	r3, #50	@ 0x32
 800682c:	4a15      	ldr	r2, [pc, #84]	@ (8006884 <UART_SetConfig+0x118>)
 800682e:	fba2 2303 	umull	r2, r3, r2, r3
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006838:	4419      	add	r1, r3
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009a      	lsls	r2, r3, #2
 8006844:	441a      	add	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006850:	4b0c      	ldr	r3, [pc, #48]	@ (8006884 <UART_SetConfig+0x118>)
 8006852:	fba3 0302 	umull	r0, r3, r3, r2
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	2064      	movs	r0, #100	@ 0x64
 800685a:	fb00 f303 	mul.w	r3, r0, r3
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	3332      	adds	r3, #50	@ 0x32
 8006864:	4a07      	ldr	r2, [pc, #28]	@ (8006884 <UART_SetConfig+0x118>)
 8006866:	fba2 2303 	umull	r2, r3, r2, r3
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	f003 020f 	and.w	r2, r3, #15
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	440a      	add	r2, r1
 8006876:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006878:	bf00      	nop
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40013800 	.word	0x40013800
 8006884:	51eb851f 	.word	0x51eb851f

08006888 <memcmp>:
 8006888:	b510      	push	{r4, lr}
 800688a:	3901      	subs	r1, #1
 800688c:	4402      	add	r2, r0
 800688e:	4290      	cmp	r0, r2
 8006890:	d101      	bne.n	8006896 <memcmp+0xe>
 8006892:	2000      	movs	r0, #0
 8006894:	e005      	b.n	80068a2 <memcmp+0x1a>
 8006896:	7803      	ldrb	r3, [r0, #0]
 8006898:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800689c:	42a3      	cmp	r3, r4
 800689e:	d001      	beq.n	80068a4 <memcmp+0x1c>
 80068a0:	1b18      	subs	r0, r3, r4
 80068a2:	bd10      	pop	{r4, pc}
 80068a4:	3001      	adds	r0, #1
 80068a6:	e7f2      	b.n	800688e <memcmp+0x6>

080068a8 <memset>:
 80068a8:	4603      	mov	r3, r0
 80068aa:	4402      	add	r2, r0
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d100      	bne.n	80068b2 <memset+0xa>
 80068b0:	4770      	bx	lr
 80068b2:	f803 1b01 	strb.w	r1, [r3], #1
 80068b6:	e7f9      	b.n	80068ac <memset+0x4>

080068b8 <__libc_init_array>:
 80068b8:	b570      	push	{r4, r5, r6, lr}
 80068ba:	2600      	movs	r6, #0
 80068bc:	4d0c      	ldr	r5, [pc, #48]	@ (80068f0 <__libc_init_array+0x38>)
 80068be:	4c0d      	ldr	r4, [pc, #52]	@ (80068f4 <__libc_init_array+0x3c>)
 80068c0:	1b64      	subs	r4, r4, r5
 80068c2:	10a4      	asrs	r4, r4, #2
 80068c4:	42a6      	cmp	r6, r4
 80068c6:	d109      	bne.n	80068dc <__libc_init_array+0x24>
 80068c8:	f000 f828 	bl	800691c <_init>
 80068cc:	2600      	movs	r6, #0
 80068ce:	4d0a      	ldr	r5, [pc, #40]	@ (80068f8 <__libc_init_array+0x40>)
 80068d0:	4c0a      	ldr	r4, [pc, #40]	@ (80068fc <__libc_init_array+0x44>)
 80068d2:	1b64      	subs	r4, r4, r5
 80068d4:	10a4      	asrs	r4, r4, #2
 80068d6:	42a6      	cmp	r6, r4
 80068d8:	d105      	bne.n	80068e6 <__libc_init_array+0x2e>
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e0:	4798      	blx	r3
 80068e2:	3601      	adds	r6, #1
 80068e4:	e7ee      	b.n	80068c4 <__libc_init_array+0xc>
 80068e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ea:	4798      	blx	r3
 80068ec:	3601      	adds	r6, #1
 80068ee:	e7f2      	b.n	80068d6 <__libc_init_array+0x1e>
 80068f0:	08007440 	.word	0x08007440
 80068f4:	08007440 	.word	0x08007440
 80068f8:	08007440 	.word	0x08007440
 80068fc:	08007444 	.word	0x08007444

08006900 <memcpy>:
 8006900:	440a      	add	r2, r1
 8006902:	4291      	cmp	r1, r2
 8006904:	f100 33ff 	add.w	r3, r0, #4294967295
 8006908:	d100      	bne.n	800690c <memcpy+0xc>
 800690a:	4770      	bx	lr
 800690c:	b510      	push	{r4, lr}
 800690e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006912:	4291      	cmp	r1, r2
 8006914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006918:	d1f9      	bne.n	800690e <memcpy+0xe>
 800691a:	bd10      	pop	{r4, pc}

0800691c <_init>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	bf00      	nop
 8006920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006922:	bc08      	pop	{r3}
 8006924:	469e      	mov	lr, r3
 8006926:	4770      	bx	lr

08006928 <_fini>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	bf00      	nop
 800692c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692e:	bc08      	pop	{r3}
 8006930:	469e      	mov	lr, r3
 8006932:	4770      	bx	lr
