
TEXAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f4c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005058  08005058  00006058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005084  08005084  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005084  08005084  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005084  08005084  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005084  08005084  00006084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005088  08005088  00006088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800508c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000010  08005098  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08005098  00007368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8ad  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d1  00000000  00000000  000158e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000180b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a92  00000000  00000000  00018e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190b3  00000000  00000000  000198d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001203c  00000000  00000000  00032985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b15c  00000000  00000000  000449c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfb1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003690  00000000  00000000  000cfb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d31f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08005040 	.word	0x08005040

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08005040 	.word	0x08005040

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b10      	ldr	r3, [pc, #64]	@ (8000194 <MX_DMA_Init+0x48>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0f      	ldr	r2, [pc, #60]	@ (8000194 <MX_DMA_Init+0x48>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b0d      	ldr	r3, [pc, #52]	@ (8000194 <MX_DMA_Init+0x48>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200e      	movs	r0, #14
 8000170:	f001 febd 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000174:	200e      	movs	r0, #14
 8000176:	f001 fed6 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200f      	movs	r0, #15
 8000180:	f001 feb5 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000184:	200f      	movs	r0, #15
 8000186:	f001 fece 	bl	8001f26 <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0310 	add.w	r3, r7, #16
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ac:	4b24      	ldr	r3, [pc, #144]	@ (8000240 <MX_GPIO_Init+0xa8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a23      	ldr	r2, [pc, #140]	@ (8000240 <MX_GPIO_Init+0xa8>)
 80001b2:	f043 0310 	orr.w	r3, r3, #16
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b21      	ldr	r3, [pc, #132]	@ (8000240 <MX_GPIO_Init+0xa8>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0310 	and.w	r3, r3, #16
 80001c0:	60fb      	str	r3, [r7, #12]
 80001c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000240 <MX_GPIO_Init+0xa8>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000240 <MX_GPIO_Init+0xa8>)
 80001ca:	f043 0320 	orr.w	r3, r3, #32
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000240 <MX_GPIO_Init+0xa8>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001dc:	4b18      	ldr	r3, [pc, #96]	@ (8000240 <MX_GPIO_Init+0xa8>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a17      	ldr	r2, [pc, #92]	@ (8000240 <MX_GPIO_Init+0xa8>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6193      	str	r3, [r2, #24]
 80001e8:	4b15      	ldr	r3, [pc, #84]	@ (8000240 <MX_GPIO_Init+0xa8>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f003 0304 	and.w	r3, r3, #4
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f4:	4b12      	ldr	r3, [pc, #72]	@ (8000240 <MX_GPIO_Init+0xa8>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a11      	ldr	r2, [pc, #68]	@ (8000240 <MX_GPIO_Init+0xa8>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b0f      	ldr	r3, [pc, #60]	@ (8000240 <MX_GPIO_Init+0xa8>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0308 	and.w	r3, r3, #8
 8000208:	603b      	str	r3, [r7, #0]
 800020a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000212:	480c      	ldr	r0, [pc, #48]	@ (8000244 <MX_GPIO_Init+0xac>)
 8000214:	f002 fac8 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000218:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800021c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800021e:	2301      	movs	r3, #1
 8000220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000222:	2301      	movs	r3, #1
 8000224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000226:	2303      	movs	r3, #3
 8000228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	4619      	mov	r1, r3
 8000230:	4804      	ldr	r0, [pc, #16]	@ (8000244 <MX_GPIO_Init+0xac>)
 8000232:	f002 f935 	bl	80024a0 <HAL_GPIO_Init>

}
 8000236:	bf00      	nop
 8000238:	3720      	adds	r7, #32
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40021000 	.word	0x40021000
 8000244:	40011000 	.word	0x40011000

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f001 fcf2 	bl	8001c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000250:	f000 f80d 	bl	800026e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f7ff ffa0 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 8000258:	f7ff ff78 	bl	800014c <MX_DMA_Init>
  MX_TIM4_Init();
 800025c:	f000 f8de 	bl	800041c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000260:	f000 f9ce 	bl	8000600 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Usr_main();
 8000264:	f000 fed0 	bl	8001008 <Usr_main>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Usr_whilemain();
 8000268:	f000 fef6 	bl	8001058 <Usr_whilemain>
 800026c:	e7fc      	b.n	8000268 <main+0x20>

0800026e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026e:	b580      	push	{r7, lr}
 8000270:	b090      	sub	sp, #64	@ 0x40
 8000272:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000274:	f107 0318 	add.w	r3, r7, #24
 8000278:	2228      	movs	r2, #40	@ 0x28
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f004 feb3 	bl	8004fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000290:	2301      	movs	r3, #1
 8000292:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000294:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000298:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029e:	2301      	movs	r3, #1
 80002a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2302      	movs	r3, #2
 80002a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ac:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fa8e 	bl	80027d8 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c2:	f000 f819 	bl	80002f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ca:	2302      	movs	r3, #2
 80002cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2102      	movs	r1, #2
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 fcfb 	bl	8002cdc <HAL_RCC_ClockConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ec:	f000 f804 	bl	80002f8 <Error_Handler>
  }
}
 80002f0:	bf00      	nop
 80002f2:	3740      	adds	r7, #64	@ 0x40
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002fc:	b672      	cpsid	i
}
 80002fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000300:	bf00      	nop
 8000302:	e7fd      	b.n	8000300 <Error_Handler+0x8>

08000304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800030a:	4b15      	ldr	r3, [pc, #84]	@ (8000360 <HAL_MspInit+0x5c>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a14      	ldr	r2, [pc, #80]	@ (8000360 <HAL_MspInit+0x5c>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6193      	str	r3, [r2, #24]
 8000316:	4b12      	ldr	r3, [pc, #72]	@ (8000360 <HAL_MspInit+0x5c>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000322:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <HAL_MspInit+0x5c>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	4a0e      	ldr	r2, [pc, #56]	@ (8000360 <HAL_MspInit+0x5c>)
 8000328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800032c:	61d3      	str	r3, [r2, #28]
 800032e:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <HAL_MspInit+0x5c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800033a:	4b0a      	ldr	r3, [pc, #40]	@ (8000364 <HAL_MspInit+0x60>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	4a04      	ldr	r2, [pc, #16]	@ (8000364 <HAL_MspInit+0x60>)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000
 8000364:	40010000 	.word	0x40010000

08000368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <NMI_Handler+0x4>

08000370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <HardFault_Handler+0x4>

08000378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <MemManage_Handler+0x4>

08000380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <BusFault_Handler+0x4>

08000388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <UsageFault_Handler+0x4>

08000390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b8:	f001 fc82 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}

080003c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80003c4:	4802      	ldr	r0, [pc, #8]	@ (80003d0 <DMA1_Channel4_IRQHandler+0x10>)
 80003c6:	f001 ff37 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000100 	.word	0x20000100

080003d4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80003d8:	4802      	ldr	r0, [pc, #8]	@ (80003e4 <DMA1_Channel5_IRQHandler+0x10>)
 80003da:	f001 ff2d 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200000bc 	.word	0x200000bc

080003e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80003ec:	4802      	ldr	r0, [pc, #8]	@ (80003f8 <TIM4_IRQHandler+0x10>)
 80003ee:	f002 ff4d 	bl	800328c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	2000002c 	.word	0x2000002c

080003fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000400:	4802      	ldr	r0, [pc, #8]	@ (800040c <USART1_IRQHandler+0x10>)
 8000402:	f003 fe7f 	bl	8004104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000074 	.word	0x20000074

08000410 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08e      	sub	sp, #56	@ 0x38
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000422:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000430:	f107 0320 	add.w	r3, r7, #32
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
 8000448:	615a      	str	r2, [r3, #20]
 800044a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800044c:	4b3d      	ldr	r3, [pc, #244]	@ (8000544 <MX_TIM4_Init+0x128>)
 800044e:	4a3e      	ldr	r2, [pc, #248]	@ (8000548 <MX_TIM4_Init+0x12c>)
 8000450:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 8000452:	4b3c      	ldr	r3, [pc, #240]	@ (8000544 <MX_TIM4_Init+0x128>)
 8000454:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000458:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045a:	4b3a      	ldr	r3, [pc, #232]	@ (8000544 <MX_TIM4_Init+0x128>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8000460:	4b38      	ldr	r3, [pc, #224]	@ (8000544 <MX_TIM4_Init+0x128>)
 8000462:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000466:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000468:	4b36      	ldr	r3, [pc, #216]	@ (8000544 <MX_TIM4_Init+0x128>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800046e:	4b35      	ldr	r3, [pc, #212]	@ (8000544 <MX_TIM4_Init+0x128>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000474:	4833      	ldr	r0, [pc, #204]	@ (8000544 <MX_TIM4_Init+0x128>)
 8000476:	f002 fdbf 	bl	8002ff8 <HAL_TIM_Base_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000480:	f7ff ff3a 	bl	80002f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000488:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800048a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800048e:	4619      	mov	r1, r3
 8000490:	482c      	ldr	r0, [pc, #176]	@ (8000544 <MX_TIM4_Init+0x128>)
 8000492:	f003 f8c5 	bl	8003620 <HAL_TIM_ConfigClockSource>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800049c:	f7ff ff2c 	bl	80002f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80004a0:	4828      	ldr	r0, [pc, #160]	@ (8000544 <MX_TIM4_Init+0x128>)
 80004a2:	f002 fdf8 	bl	8003096 <HAL_TIM_PWM_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80004ac:	f7ff ff24 	bl	80002f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b0:	2300      	movs	r3, #0
 80004b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004b8:	f107 0320 	add.w	r3, r7, #32
 80004bc:	4619      	mov	r1, r3
 80004be:	4821      	ldr	r0, [pc, #132]	@ (8000544 <MX_TIM4_Init+0x128>)
 80004c0:	f003 fc46 	bl	8003d50 <HAL_TIMEx_MasterConfigSynchronization>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80004ca:	f7ff ff15 	bl	80002f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ce:	2360      	movs	r3, #96	@ 0x60
 80004d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	4619      	mov	r1, r3
 80004e4:	4817      	ldr	r0, [pc, #92]	@ (8000544 <MX_TIM4_Init+0x128>)
 80004e6:	f002 ffd9 	bl	800349c <HAL_TIM_PWM_ConfigChannel>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80004f0:	f7ff ff02 	bl	80002f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2204      	movs	r2, #4
 80004f8:	4619      	mov	r1, r3
 80004fa:	4812      	ldr	r0, [pc, #72]	@ (8000544 <MX_TIM4_Init+0x128>)
 80004fc:	f002 ffce 	bl	800349c <HAL_TIM_PWM_ConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000506:	f7ff fef7 	bl	80002f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2208      	movs	r2, #8
 800050e:	4619      	mov	r1, r3
 8000510:	480c      	ldr	r0, [pc, #48]	@ (8000544 <MX_TIM4_Init+0x128>)
 8000512:	f002 ffc3 	bl	800349c <HAL_TIM_PWM_ConfigChannel>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800051c:	f7ff feec 	bl	80002f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	220c      	movs	r2, #12
 8000524:	4619      	mov	r1, r3
 8000526:	4807      	ldr	r0, [pc, #28]	@ (8000544 <MX_TIM4_Init+0x128>)
 8000528:	f002 ffb8 	bl	800349c <HAL_TIM_PWM_ConfigChannel>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000532:	f7ff fee1 	bl	80002f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000536:	4803      	ldr	r0, [pc, #12]	@ (8000544 <MX_TIM4_Init+0x128>)
 8000538:	f000 f82e 	bl	8000598 <HAL_TIM_MspPostInit>

}
 800053c:	bf00      	nop
 800053e:	3738      	adds	r7, #56	@ 0x38
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	2000002c 	.word	0x2000002c
 8000548:	40000800 	.word	0x40000800

0800054c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a0d      	ldr	r2, [pc, #52]	@ (8000590 <HAL_TIM_Base_MspInit+0x44>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d113      	bne.n	8000586 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800055e:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <HAL_TIM_Base_MspInit+0x48>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a0c      	ldr	r2, [pc, #48]	@ (8000594 <HAL_TIM_Base_MspInit+0x48>)
 8000564:	f043 0304 	orr.w	r3, r3, #4
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <HAL_TIM_Base_MspInit+0x48>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f003 0304 	and.w	r3, r3, #4
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	201e      	movs	r0, #30
 800057c:	f001 fcb7 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000580:	201e      	movs	r0, #30
 8000582:	f001 fcd0 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40000800 	.word	0x40000800
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a10      	ldr	r2, [pc, #64]	@ (80005f4 <HAL_TIM_MspPostInit+0x5c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d118      	bne.n	80005ea <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <HAL_TIM_MspPostInit+0x60>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a0e      	ldr	r2, [pc, #56]	@ (80005f8 <HAL_TIM_MspPostInit+0x60>)
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <HAL_TIM_MspPostInit+0x60>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80005d0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80005d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d6:	2302      	movs	r3, #2
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2302      	movs	r3, #2
 80005dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	@ (80005fc <HAL_TIM_MspPostInit+0x64>)
 80005e6:	f001 ff5b 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40000800 	.word	0x40000800
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010c00 	.word	0x40010c00

08000600 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000604:	4b11      	ldr	r3, [pc, #68]	@ (800064c <MX_USART1_UART_Init+0x4c>)
 8000606:	4a12      	ldr	r2, [pc, #72]	@ (8000650 <MX_USART1_UART_Init+0x50>)
 8000608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <MX_USART1_UART_Init+0x4c>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_USART1_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <MX_USART1_UART_Init+0x4c>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <MX_USART1_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_USART1_UART_Init+0x4c>)
 8000638:	f003 fbfa 	bl	8003e30 <HAL_UART_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000642:	f7ff fe59 	bl	80002f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000074 	.word	0x20000074
 8000650:	40013800 	.word	0x40013800

08000654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a47      	ldr	r2, [pc, #284]	@ (800078c <HAL_UART_MspInit+0x138>)
 8000670:	4293      	cmp	r3, r2
 8000672:	f040 8086 	bne.w	8000782 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000676:	4b46      	ldr	r3, [pc, #280]	@ (8000790 <HAL_UART_MspInit+0x13c>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4a45      	ldr	r2, [pc, #276]	@ (8000790 <HAL_UART_MspInit+0x13c>)
 800067c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000680:	6193      	str	r3, [r2, #24]
 8000682:	4b43      	ldr	r3, [pc, #268]	@ (8000790 <HAL_UART_MspInit+0x13c>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b40      	ldr	r3, [pc, #256]	@ (8000790 <HAL_UART_MspInit+0x13c>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a3f      	ldr	r2, [pc, #252]	@ (8000790 <HAL_UART_MspInit+0x13c>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b3d      	ldr	r3, [pc, #244]	@ (8000790 <HAL_UART_MspInit+0x13c>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	4836      	ldr	r0, [pc, #216]	@ (8000794 <HAL_UART_MspInit+0x140>)
 80006bc:	f001 fef0 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	482f      	ldr	r0, [pc, #188]	@ (8000794 <HAL_UART_MspInit+0x140>)
 80006d6:	f001 fee3 	bl	80024a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80006da:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <HAL_UART_MspInit+0x144>)
 80006dc:	4a2f      	ldr	r2, [pc, #188]	@ (800079c <HAL_UART_MspInit+0x148>)
 80006de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <HAL_UART_MspInit+0x144>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <HAL_UART_MspInit+0x144>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <HAL_UART_MspInit+0x144>)
 80006ee:	2280      	movs	r2, #128	@ 0x80
 80006f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006f2:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <HAL_UART_MspInit+0x144>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <HAL_UART_MspInit+0x144>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80006fe:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <HAL_UART_MspInit+0x144>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000704:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <HAL_UART_MspInit+0x144>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800070a:	4823      	ldr	r0, [pc, #140]	@ (8000798 <HAL_UART_MspInit+0x144>)
 800070c:	f001 fc26 	bl	8001f5c <HAL_DMA_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000716:	f7ff fdef 	bl	80002f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a1e      	ldr	r2, [pc, #120]	@ (8000798 <HAL_UART_MspInit+0x144>)
 800071e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000720:	4a1d      	ldr	r2, [pc, #116]	@ (8000798 <HAL_UART_MspInit+0x144>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <HAL_UART_MspInit+0x14c>)
 8000728:	4a1e      	ldr	r2, [pc, #120]	@ (80007a4 <HAL_UART_MspInit+0x150>)
 800072a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <HAL_UART_MspInit+0x14c>)
 800072e:	2210      	movs	r2, #16
 8000730:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000732:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <HAL_UART_MspInit+0x14c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <HAL_UART_MspInit+0x14c>)
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <HAL_UART_MspInit+0x14c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <HAL_UART_MspInit+0x14c>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <HAL_UART_MspInit+0x14c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <HAL_UART_MspInit+0x14c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000756:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <HAL_UART_MspInit+0x14c>)
 8000758:	f001 fc00 	bl	8001f5c <HAL_DMA_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000762:	f7ff fdc9 	bl	80002f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <HAL_UART_MspInit+0x14c>)
 800076a:	639a      	str	r2, [r3, #56]	@ 0x38
 800076c:	4a0c      	ldr	r2, [pc, #48]	@ (80007a0 <HAL_UART_MspInit+0x14c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2025      	movs	r0, #37	@ 0x25
 8000778:	f001 fbb9 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800077c:	2025      	movs	r0, #37	@ 0x25
 800077e:	f001 fbd2 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000782:	bf00      	nop
 8000784:	3720      	adds	r7, #32
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40013800 	.word	0x40013800
 8000790:	40021000 	.word	0x40021000
 8000794:	40010800 	.word	0x40010800
 8000798:	200000bc 	.word	0x200000bc
 800079c:	40020058 	.word	0x40020058
 80007a0:	20000100 	.word	0x20000100
 80007a4:	40020044 	.word	0x40020044

080007a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a8:	f7ff fe32 	bl	8000410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480b      	ldr	r0, [pc, #44]	@ (80007dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ae:	490c      	ldr	r1, [pc, #48]	@ (80007e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007b0:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a09      	ldr	r2, [pc, #36]	@ (80007e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007c4:	4c09      	ldr	r4, [pc, #36]	@ (80007ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d2:	f004 fc11 	bl	8004ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff fd37 	bl	8000248 <main>
  bx lr
 80007da:	4770      	bx	lr
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e4:	0800508c 	.word	0x0800508c
  ldr r2, =_sbss
 80007e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007ec:	20000368 	.word	0x20000368

080007f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_2_IRQHandler>

080007f2 <Stack_init>:
    int top;
    int capacity;
    Pos array[10];
} Stack;

void Stack_init(Stack *stack) {
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
    stack->top = -1;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000800:	601a      	str	r2, [r3, #0]
    stack->capacity = 10;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	220a      	movs	r2, #10
 8000806:	605a      	str	r2, [r3, #4]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <Stack_isEmpty>:

int Stack_isEmpty(Stack *stack) {
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
    return stack->top == -1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000822:	bf0c      	ite	eq
 8000824:	2301      	moveq	r3, #1
 8000826:	2300      	movne	r3, #0
 8000828:	b2db      	uxtb	r3, r3
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <Stack_isFull>:

int Stack_isFull(Stack *stack) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    return stack->top == stack->capacity - 1;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	3b01      	subs	r3, #1
 8000846:	429a      	cmp	r2, r3
 8000848:	bf0c      	ite	eq
 800084a:	2301      	moveq	r3, #1
 800084c:	2300      	movne	r3, #0
 800084e:	b2db      	uxtb	r3, r3
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <Stack_push>:

void Stack_push(Stack *stack, int j1, int j2, int j3, int j4) {
 800085a:	b580      	push	{r7, lr}
 800085c:	b088      	sub	sp, #32
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	603b      	str	r3, [r7, #0]
    if (Stack_isFull(stack)) {
 8000868:	68f8      	ldr	r0, [r7, #12]
 800086a:	f7ff ffe3 	bl	8000834 <Stack_isFull>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d120      	bne.n	80008b6 <Stack_push+0x5c>
        return;
    }
    stack->array[++(stack->top)] = (Pos){j1, j2, j3, j4};
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1c5a      	adds	r2, r3, #1
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68f9      	ldr	r1, [r7, #12]
 8000884:	011a      	lsls	r2, r3, #4
 8000886:	440a      	add	r2, r1
 8000888:	3208      	adds	r2, #8
 800088a:	68b9      	ldr	r1, [r7, #8]
 800088c:	6011      	str	r1, [r2, #0]
 800088e:	68f9      	ldr	r1, [r7, #12]
 8000890:	011a      	lsls	r2, r3, #4
 8000892:	440a      	add	r2, r1
 8000894:	320c      	adds	r2, #12
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	6011      	str	r1, [r2, #0]
 800089a:	68f9      	ldr	r1, [r7, #12]
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	0112      	lsls	r2, r2, #4
 80008a0:	440a      	add	r2, r1
 80008a2:	6839      	ldr	r1, [r7, #0]
 80008a4:	6011      	str	r1, [r2, #0]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	3301      	adds	r3, #1
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	4413      	add	r3, r2
 80008ae:	3304      	adds	r3, #4
 80008b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	e000      	b.n	80008b8 <Stack_push+0x5e>
        return;
 80008b6:	bf00      	nop
}
 80008b8:	3720      	adds	r7, #32
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <Stack_pop>:
        return;
    }
    stack->array[++(stack->top)] = item;
}

int Stack_pop(Stack *stack, ROBOT_DATA *data) {
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	6039      	str	r1, [r7, #0]
    if (Stack_isEmpty(stack)) {
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ffa2 	bl	8000812 <Stack_isEmpty>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <Stack_pop+0x1a>
        return 1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e02e      	b.n	8000936 <Stack_pop+0x78>
    }
    data->move_j1 = stack->array[stack->top].j1;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	4413      	add	r3, r2
 80008e2:	3308      	adds	r3, #8
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	701a      	strb	r2, [r3, #0]
    data->move_j2 = stack->array[stack->top].j2;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4413      	add	r3, r2
 80008f6:	330c      	adds	r3, #12
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	705a      	strb	r2, [r3, #1]
    data->move_j3 = stack->array[stack->top].j3;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	3301      	adds	r3, #1
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	4413      	add	r3, r2
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	709a      	strb	r2, [r3, #2]
    data->move_j4 = stack->array[stack->top].j4;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	3301      	adds	r3, #1
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	4413      	add	r3, r2
 8000920:	3304      	adds	r3, #4
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	70da      	strb	r2, [r3, #3]
    stack->top--;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	1e5a      	subs	r2, r3, #1
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	601a      	str	r2, [r3, #0]
    return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <Robot_Move>:
#include "Robot.h"
#include "chess_stack.h"

// 机器人移动
void Robot_Move(ROBOT_DATA *data, unsigned int Mot)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
    unsigned char move_j, now_j;
    // 根据选择的电机进行不同的数据读取和处理
    switch (Mot)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2b0c      	cmp	r3, #12
 800094e:	d849      	bhi.n	80009e4 <Robot_Move+0xa4>
 8000950:	a201      	add	r2, pc, #4	@ (adr r2, 8000958 <Robot_Move+0x18>)
 8000952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000956:	bf00      	nop
 8000958:	080009cf 	.word	0x080009cf
 800095c:	080009e5 	.word	0x080009e5
 8000960:	080009e5 	.word	0x080009e5
 8000964:	080009e5 	.word	0x080009e5
 8000968:	080009b9 	.word	0x080009b9
 800096c:	080009e5 	.word	0x080009e5
 8000970:	080009e5 	.word	0x080009e5
 8000974:	080009e5 	.word	0x080009e5
 8000978:	080009a3 	.word	0x080009a3
 800097c:	080009e5 	.word	0x080009e5
 8000980:	080009e5 	.word	0x080009e5
 8000984:	080009e5 	.word	0x080009e5
 8000988:	0800098d 	.word	0x0800098d
    {
    case Mot1:
        // 读取目标值的数据
        move_j = data->move_j1;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	73fb      	strb	r3, [r7, #15]
        // 读取当前坐标数据
        now_j = data->now_j1;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	791b      	ldrb	r3, [r3, #4]
 8000996:	73bb      	strb	r3, [r7, #14]
        // 将目标值的数据传递给当前坐标数据以方便下次使用
        data->now_j1 = data->move_j1;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	781a      	ldrb	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	711a      	strb	r2, [r3, #4]
        break;
 80009a0:	e021      	b.n	80009e6 <Robot_Move+0xa6>
    case Mot2:
        move_j = data->move_j2;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	785b      	ldrb	r3, [r3, #1]
 80009a6:	73fb      	strb	r3, [r7, #15]
        now_j = data->now_j2;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	795b      	ldrb	r3, [r3, #5]
 80009ac:	73bb      	strb	r3, [r7, #14]
        data->now_j2 = data->move_j2;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	785a      	ldrb	r2, [r3, #1]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	715a      	strb	r2, [r3, #5]
        break;
 80009b6:	e016      	b.n	80009e6 <Robot_Move+0xa6>
    case Mot3:
        move_j = data->move_j3;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	789b      	ldrb	r3, [r3, #2]
 80009bc:	73fb      	strb	r3, [r7, #15]
        now_j = data->now_j3;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	799b      	ldrb	r3, [r3, #6]
 80009c2:	73bb      	strb	r3, [r7, #14]
        data->now_j3 = data->move_j3;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	789a      	ldrb	r2, [r3, #2]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	719a      	strb	r2, [r3, #6]
        break;
 80009cc:	e00b      	b.n	80009e6 <Robot_Move+0xa6>
    case Mot4:
        move_j = data->move_j4;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	78db      	ldrb	r3, [r3, #3]
 80009d2:	73fb      	strb	r3, [r7, #15]
        now_j = data->now_j4;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	79db      	ldrb	r3, [r3, #7]
 80009d8:	73bb      	strb	r3, [r7, #14]
        data->now_j4 = data->move_j4;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	78da      	ldrb	r2, [r3, #3]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	71da      	strb	r2, [r3, #7]
        break;
 80009e2:	e000      	b.n	80009e6 <Robot_Move+0xa6>
    default:
        break;
 80009e4:	bf00      	nop
    }
    // 判断当前的目标值和当前值来进行不同的移动
    if (move_j >= now_j)
 80009e6:	7bfa      	ldrb	r2, [r7, #15]
 80009e8:	7bbb      	ldrb	r3, [r7, #14]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d336      	bcc.n	8000a5c <Robot_Move+0x11c>
    {
        for (unsigned char i = 0; i < move_j - now_j; i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	737b      	strb	r3, [r7, #13]
 80009f2:	e02c      	b.n	8000a4e <Robot_Move+0x10e>
        {
            __HAL_TIM_SetCompare(&htim4, Mot, now_j + i); //
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d106      	bne.n	8000a08 <Robot_Move+0xc8>
 80009fa:	7bba      	ldrb	r2, [r7, #14]
 80009fc:	7b7b      	ldrb	r3, [r7, #13]
 80009fe:	441a      	add	r2, r3
 8000a00:	4b35      	ldr	r3, [pc, #212]	@ (8000ad8 <Robot_Move+0x198>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a06:	e01c      	b.n	8000a42 <Robot_Move+0x102>
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	d107      	bne.n	8000a1e <Robot_Move+0xde>
 8000a0e:	7bba      	ldrb	r2, [r7, #14]
 8000a10:	7b7b      	ldrb	r3, [r7, #13]
 8000a12:	18d1      	adds	r1, r2, r3
 8000a14:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <Robot_Move+0x198>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a1c:	e011      	b.n	8000a42 <Robot_Move+0x102>
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	2b08      	cmp	r3, #8
 8000a22:	d107      	bne.n	8000a34 <Robot_Move+0xf4>
 8000a24:	7bba      	ldrb	r2, [r7, #14]
 8000a26:	7b7b      	ldrb	r3, [r7, #13]
 8000a28:	18d1      	adds	r1, r2, r3
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad8 <Robot_Move+0x198>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000a32:	e006      	b.n	8000a42 <Robot_Move+0x102>
 8000a34:	7bba      	ldrb	r2, [r7, #14]
 8000a36:	7b7b      	ldrb	r3, [r7, #13]
 8000a38:	18d1      	adds	r1, r2, r3
 8000a3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <Robot_Move+0x198>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
            HAL_Delay(15);
 8000a42:	200f      	movs	r0, #15
 8000a44:	f001 f958 	bl	8001cf8 <HAL_Delay>
        for (unsigned char i = 0; i < move_j - now_j; i++)
 8000a48:	7b7b      	ldrb	r3, [r7, #13]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	737b      	strb	r3, [r7, #13]
 8000a4e:	7b7a      	ldrb	r2, [r7, #13]
 8000a50:	7bf9      	ldrb	r1, [r7, #15]
 8000a52:	7bbb      	ldrb	r3, [r7, #14]
 8000a54:	1acb      	subs	r3, r1, r3
 8000a56:	429a      	cmp	r2, r3
 8000a58:	dbcc      	blt.n	80009f4 <Robot_Move+0xb4>
        {
            __HAL_TIM_SetCompare(&htim4, Mot, now_j - i); //
            HAL_Delay(15);
        }
    }
}
 8000a5a:	e039      	b.n	8000ad0 <Robot_Move+0x190>
    else if (move_j < now_j)
 8000a5c:	7bfa      	ldrb	r2, [r7, #15]
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d235      	bcs.n	8000ad0 <Robot_Move+0x190>
        for (unsigned char i = 0; i < now_j - move_j; i++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	733b      	strb	r3, [r7, #12]
 8000a68:	e02c      	b.n	8000ac4 <Robot_Move+0x184>
            __HAL_TIM_SetCompare(&htim4, Mot, now_j - i); //
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d106      	bne.n	8000a7e <Robot_Move+0x13e>
 8000a70:	7bba      	ldrb	r2, [r7, #14]
 8000a72:	7b3b      	ldrb	r3, [r7, #12]
 8000a74:	1ad2      	subs	r2, r2, r3
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <Robot_Move+0x198>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a7c:	e01c      	b.n	8000ab8 <Robot_Move+0x178>
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d107      	bne.n	8000a94 <Robot_Move+0x154>
 8000a84:	7bba      	ldrb	r2, [r7, #14]
 8000a86:	7b3b      	ldrb	r3, [r7, #12]
 8000a88:	1ad1      	subs	r1, r2, r3
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <Robot_Move+0x198>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a92:	e011      	b.n	8000ab8 <Robot_Move+0x178>
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	d107      	bne.n	8000aaa <Robot_Move+0x16a>
 8000a9a:	7bba      	ldrb	r2, [r7, #14]
 8000a9c:	7b3b      	ldrb	r3, [r7, #12]
 8000a9e:	1ad1      	subs	r1, r2, r3
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <Robot_Move+0x198>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000aa8:	e006      	b.n	8000ab8 <Robot_Move+0x178>
 8000aaa:	7bba      	ldrb	r2, [r7, #14]
 8000aac:	7b3b      	ldrb	r3, [r7, #12]
 8000aae:	1ad1      	subs	r1, r2, r3
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <Robot_Move+0x198>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	6413      	str	r3, [r2, #64]	@ 0x40
            HAL_Delay(15);
 8000ab8:	200f      	movs	r0, #15
 8000aba:	f001 f91d 	bl	8001cf8 <HAL_Delay>
        for (unsigned char i = 0; i < now_j - move_j; i++)
 8000abe:	7b3b      	ldrb	r3, [r7, #12]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	733b      	strb	r3, [r7, #12]
 8000ac4:	7b3a      	ldrb	r2, [r7, #12]
 8000ac6:	7bb9      	ldrb	r1, [r7, #14]
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	1acb      	subs	r3, r1, r3
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbcc      	blt.n	8000a6a <Robot_Move+0x12a>
}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000002c 	.word	0x2000002c

08000adc <Robot_Move_Start>:

// 机器人初始化移动
void Robot_Move_Start(ROBOT_DATA *data, UART_DATA *Usr_UART)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
    // 初始化顺序，先进行电机2初始化，然后电机3，其次电机4，最后电机1
    __HAL_TIM_SetCompare(&htim4, Mot1, 220); // 电机1的初始化
 8000ae6:	4b57      	ldr	r3, [pc, #348]	@ (8000c44 <Robot_Move_Start+0x168>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	22dc      	movs	r2, #220	@ 0xdc
 8000aec:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_Delay(1000);
 8000aee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000af2:	f001 f901 	bl	8001cf8 <HAL_Delay>
    __HAL_TIM_SetCompare(&htim4, Mot2, 46); // 首先进行电机2的初始化
 8000af6:	4b53      	ldr	r3, [pc, #332]	@ (8000c44 <Robot_Move_Start+0x168>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	222e      	movs	r2, #46	@ 0x2e
 8000afc:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_Delay(1000);
 8000afe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b02:	f001 f8f9 	bl	8001cf8 <HAL_Delay>
    __HAL_TIM_SetCompare(&htim4, Mot3, 43); // 电机3的初始化
 8000b06:	4b4f      	ldr	r3, [pc, #316]	@ (8000c44 <Robot_Move_Start+0x168>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	222b      	movs	r2, #43	@ 0x2b
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(1000);
 8000b0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b12:	f001 f8f1 	bl	8001cf8 <HAL_Delay>
    __HAL_TIM_SetCompare(&htim4, Mot4, 46); // 电机4的初始化
 8000b16:	4b4b      	ldr	r3, [pc, #300]	@ (8000c44 <Robot_Move_Start+0x168>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	222e      	movs	r2, #46	@ 0x2e
 8000b1c:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(1000);
 8000b1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b22:	f001 f8e9 	bl	8001cf8 <HAL_Delay>
    // 位置初始化
    data->now_j1 = 220;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	22dc      	movs	r2, #220	@ 0xdc
 8000b2a:	711a      	strb	r2, [r3, #4]
    data->now_j2 = 46;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	222e      	movs	r2, #46	@ 0x2e
 8000b30:	715a      	strb	r2, [r3, #5]
    data->now_j3 = 43;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	222b      	movs	r2, #43	@ 0x2b
 8000b36:	719a      	strb	r2, [r3, #6]
    data->now_j4 = 46;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	222e      	movs	r2, #46	@ 0x2e
 8000b3c:	71da      	strb	r2, [r3, #7]
    data->move_j4 = 0xE0;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	22e0      	movs	r2, #224	@ 0xe0
 8000b42:	70da      	strb	r2, [r3, #3]
    data->move_j3 = 0x64;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2264      	movs	r2, #100	@ 0x64
 8000b48:	709a      	strb	r2, [r3, #2]
    data->move_j2 = 0x64;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2264      	movs	r2, #100	@ 0x64
 8000b4e:	705a      	strb	r2, [r3, #1]
    data->move_j1 = 0x8C;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	228c      	movs	r2, #140	@ 0x8c
 8000b54:	701a      	strb	r2, [r3, #0]
    data->mod = 0x01;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    // E0 64 64 8D
    // 前往home位置，完成初始化
    Robot_Move(data, Mot2);
 8000b5e:	2108      	movs	r1, #8
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff feed 	bl	8000940 <Robot_Move>
    Robot_Move(data, Mot3);
 8000b66:	2104      	movs	r1, #4
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff fee9 	bl	8000940 <Robot_Move>
    Robot_Move(data, Mot4);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fee5 	bl	8000940 <Robot_Move>
    Robot_Move(data, Mot1);
 8000b76:	210c      	movs	r1, #12
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff fee1 	bl	8000940 <Robot_Move>
    // 完成初始化
    Usr_UART->head = 0xB1; // 重新循环
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	22b1      	movs	r2, #177	@ 0xb1
 8000b82:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart1, (uint8_t *)Usr_UART, UART_TRAN_NUM);
 8000b84:	2201      	movs	r2, #1
 8000b86:	6839      	ldr	r1, [r7, #0]
 8000b88:	482f      	ldr	r0, [pc, #188]	@ (8000c48 <Robot_Move_Start+0x16c>)
 8000b8a:	f003 fa25 	bl	8003fd8 <HAL_UART_Transmit_DMA>
    
    Stack_init(&whiteStack);
 8000b8e:	482f      	ldr	r0, [pc, #188]	@ (8000c4c <Robot_Move_Start+0x170>)
 8000b90:	f7ff fe2f 	bl	80007f2 <Stack_init>
    Stack_init(&blackStack);
 8000b94:	482e      	ldr	r0, [pc, #184]	@ (8000c50 <Robot_Move_Start+0x174>)
 8000b96:	f7ff fe2c 	bl	80007f2 <Stack_init>
    Stack_push(&whiteStack, 0xAD, 0x66, 0x84, 0xA6);
 8000b9a:	23a6      	movs	r3, #166	@ 0xa6
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2384      	movs	r3, #132	@ 0x84
 8000ba0:	2266      	movs	r2, #102	@ 0x66
 8000ba2:	21ad      	movs	r1, #173	@ 0xad
 8000ba4:	4829      	ldr	r0, [pc, #164]	@ (8000c4c <Robot_Move_Start+0x170>)
 8000ba6:	f7ff fe58 	bl	800085a <Stack_push>
    Stack_push(&whiteStack, 0xAD, 0x7B, 0x7B, 0xA7);
 8000baa:	23a7      	movs	r3, #167	@ 0xa7
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	237b      	movs	r3, #123	@ 0x7b
 8000bb0:	227b      	movs	r2, #123	@ 0x7b
 8000bb2:	21ad      	movs	r1, #173	@ 0xad
 8000bb4:	4825      	ldr	r0, [pc, #148]	@ (8000c4c <Robot_Move_Start+0x170>)
 8000bb6:	f7ff fe50 	bl	800085a <Stack_push>
    Stack_push(&whiteStack, 0xA0, 0x8A, 0x76, 0xAA);
 8000bba:	23aa      	movs	r3, #170	@ 0xaa
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2376      	movs	r3, #118	@ 0x76
 8000bc0:	228a      	movs	r2, #138	@ 0x8a
 8000bc2:	21a0      	movs	r1, #160	@ 0xa0
 8000bc4:	4821      	ldr	r0, [pc, #132]	@ (8000c4c <Robot_Move_Start+0x170>)
 8000bc6:	f7ff fe48 	bl	800085a <Stack_push>
    Stack_push(&whiteStack, 0x90, 0x9A, 0x75, 0xAF);
 8000bca:	23af      	movs	r3, #175	@ 0xaf
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2375      	movs	r3, #117	@ 0x75
 8000bd0:	229a      	movs	r2, #154	@ 0x9a
 8000bd2:	2190      	movs	r1, #144	@ 0x90
 8000bd4:	481d      	ldr	r0, [pc, #116]	@ (8000c4c <Robot_Move_Start+0x170>)
 8000bd6:	f7ff fe40 	bl	800085a <Stack_push>
    Stack_push(&whiteStack, 0x80, 0xA4, 0x76, 0xB2);
 8000bda:	23b2      	movs	r3, #178	@ 0xb2
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2376      	movs	r3, #118	@ 0x76
 8000be0:	22a4      	movs	r2, #164	@ 0xa4
 8000be2:	2180      	movs	r1, #128	@ 0x80
 8000be4:	4819      	ldr	r0, [pc, #100]	@ (8000c4c <Robot_Move_Start+0x170>)
 8000be6:	f7ff fe38 	bl	800085a <Stack_push>
    Stack_push(&blackStack, 0xAD, 0x66, 0x85, 0x72);
 8000bea:	2372      	movs	r3, #114	@ 0x72
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2385      	movs	r3, #133	@ 0x85
 8000bf0:	2266      	movs	r2, #102	@ 0x66
 8000bf2:	21ad      	movs	r1, #173	@ 0xad
 8000bf4:	4816      	ldr	r0, [pc, #88]	@ (8000c50 <Robot_Move_Start+0x174>)
 8000bf6:	f7ff fe30 	bl	800085a <Stack_push>
    Stack_push(&blackStack, 0xAD, 0x7B, 0x7B, 0x6D);
 8000bfa:	236d      	movs	r3, #109	@ 0x6d
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	237b      	movs	r3, #123	@ 0x7b
 8000c00:	227b      	movs	r2, #123	@ 0x7b
 8000c02:	21ad      	movs	r1, #173	@ 0xad
 8000c04:	4812      	ldr	r0, [pc, #72]	@ (8000c50 <Robot_Move_Start+0x174>)
 8000c06:	f7ff fe28 	bl	800085a <Stack_push>
    Stack_push(&blackStack, 0xA0, 0x8B, 0x76, 0x6A);
 8000c0a:	236a      	movs	r3, #106	@ 0x6a
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2376      	movs	r3, #118	@ 0x76
 8000c10:	228b      	movs	r2, #139	@ 0x8b
 8000c12:	21a0      	movs	r1, #160	@ 0xa0
 8000c14:	480e      	ldr	r0, [pc, #56]	@ (8000c50 <Robot_Move_Start+0x174>)
 8000c16:	f7ff fe20 	bl	800085a <Stack_push>
    Stack_push(&blackStack, 0x90, 0x9A, 0x75, 0x64);
 8000c1a:	2364      	movs	r3, #100	@ 0x64
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2375      	movs	r3, #117	@ 0x75
 8000c20:	229a      	movs	r2, #154	@ 0x9a
 8000c22:	2190      	movs	r1, #144	@ 0x90
 8000c24:	480a      	ldr	r0, [pc, #40]	@ (8000c50 <Robot_Move_Start+0x174>)
 8000c26:	f7ff fe18 	bl	800085a <Stack_push>
    Stack_push(&blackStack, 0x80, 0xA4, 0x76, 0x5A);
 8000c2a:	235a      	movs	r3, #90	@ 0x5a
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2376      	movs	r3, #118	@ 0x76
 8000c30:	22a4      	movs	r2, #164	@ 0xa4
 8000c32:	2180      	movs	r1, #128	@ 0x80
 8000c34:	4806      	ldr	r0, [pc, #24]	@ (8000c50 <Robot_Move_Start+0x174>)
 8000c36:	f7ff fe10 	bl	800085a <Stack_push>

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000002c 	.word	0x2000002c
 8000c48:	20000074 	.word	0x20000074
 8000c4c:	20000144 	.word	0x20000144
 8000c50:	200001ec 	.word	0x200001ec

08000c54 <Robot_move_point>:
    data->calcu_data.j4_data = (((data->calcu_data.j4 / 180) * 2 + 0.5) / 20 * 2000);
}

// 机器人点移动
void Robot_move_point(ROBOT_DATA *data, unsigned char point)
{ // 初始化位置
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
    // FF A0 8B 76 6A 00 FF FF FF FF
    // 物品9点
    // FF 90 9A 75 64 00 FF FF FF FF
    // 物品10点
    // FF 80 A4 76 5A 00 FF FF FF FF
    switch (point)
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	2b0a      	cmp	r3, #10
 8000c66:	f200 81a2 	bhi.w	8000fae <Robot_move_point+0x35a>
 8000c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c70 <Robot_move_point+0x1c>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000c9d 	.word	0x08000c9d
 8000c74:	08000ce7 	.word	0x08000ce7
 8000c78:	08000d31 	.word	0x08000d31
 8000c7c:	08000d7b 	.word	0x08000d7b
 8000c80:	08000dc5 	.word	0x08000dc5
 8000c84:	08000e0f 	.word	0x08000e0f
 8000c88:	08000e59 	.word	0x08000e59
 8000c8c:	08000ea3 	.word	0x08000ea3
 8000c90:	08000eed 	.word	0x08000eed
 8000c94:	08000f37 	.word	0x08000f37
 8000c98:	08000f73 	.word	0x08000f73
    {
    case 1:
        data->move_j4 = 0xB0;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	22b0      	movs	r2, #176	@ 0xb0
 8000ca0:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0x7B;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	227b      	movs	r2, #123	@ 0x7b
 8000ca6:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x7B;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	227b      	movs	r2, #123	@ 0x7b
 8000cac:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x99;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2299      	movs	r2, #153	@ 0x99
 8000cb2:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        Robot_Move(data, Mot1);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	210c      	movs	r1, #12
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fe3d 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot4);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fe38 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot3);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fe33 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot2);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2108      	movs	r1, #8
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fe2e 	bl	8000940 <Robot_Move>
        break;
 8000ce4:	e164      	b.n	8000fb0 <Robot_move_point+0x35c>
    case 2:
        data->move_j4 = 0xB0;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	22b0      	movs	r2, #176	@ 0xb0
 8000cea:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0x7D;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	227d      	movs	r2, #125	@ 0x7d
 8000cf0:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x7A;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	227a      	movs	r2, #122	@ 0x7a
 8000cf6:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x8A;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	228a      	movs	r2, #138	@ 0x8a
 8000cfc:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        Robot_Move(data, Mot1);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	210c      	movs	r1, #12
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe18 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot4);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe13 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot3);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fe0e 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot2);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2108      	movs	r1, #8
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fe09 	bl	8000940 <Robot_Move>
        break;
 8000d2e:	e13f      	b.n	8000fb0 <Robot_move_point+0x35c>
    case 3:
        data->move_j4 = 0xAE;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	22ae      	movs	r2, #174	@ 0xae
 8000d34:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0x7B;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	227b      	movs	r2, #123	@ 0x7b
 8000d3a:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x7B;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	227b      	movs	r2, #123	@ 0x7b
 8000d40:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x7F;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	227f      	movs	r2, #127	@ 0x7f
 8000d46:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        Robot_Move(data, Mot1);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	210c      	movs	r1, #12
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fdf3 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot4);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fdee 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot3);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2104      	movs	r1, #4
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fde9 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot2);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2108      	movs	r1, #8
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fde4 	bl	8000940 <Robot_Move>
        break;
 8000d78:	e11a      	b.n	8000fb0 <Robot_move_point+0x35c>
    case 4:
        data->move_j4 = 0x90;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2290      	movs	r2, #144	@ 0x90
 8000d7e:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0x94;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2294      	movs	r2, #148	@ 0x94
 8000d84:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x78;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2278      	movs	r2, #120	@ 0x78
 8000d8a:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x9A;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	229a      	movs	r2, #154	@ 0x9a
 8000d90:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        Robot_Move(data, Mot1);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	210c      	movs	r1, #12
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fdce 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot4);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fdc9 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot3);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2104      	movs	r1, #4
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fdc4 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot2);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2108      	movs	r1, #8
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fdbf 	bl	8000940 <Robot_Move>
        break;
 8000dc2:	e0f5      	b.n	8000fb0 <Robot_move_point+0x35c>
    case 5:
        data->move_j4 = 0x90;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2290      	movs	r2, #144	@ 0x90
 8000dc8:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0x94;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2294      	movs	r2, #148	@ 0x94
 8000dce:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x78;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2278      	movs	r2, #120	@ 0x78
 8000dd4:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x88;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2288      	movs	r2, #136	@ 0x88
 8000dda:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        Robot_Move(data, Mot1);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	210c      	movs	r1, #12
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fda9 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot4);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fda4 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot3);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fd9f 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot2);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2108      	movs	r1, #8
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fd9a 	bl	8000940 <Robot_Move>
        break;
 8000e0c:	e0d0      	b.n	8000fb0 <Robot_move_point+0x35c>
    case 6:
        data->move_j4 = 0x90;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2290      	movs	r2, #144	@ 0x90
 8000e12:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0x94;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2294      	movs	r2, #148	@ 0x94
 8000e18:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x78;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2278      	movs	r2, #120	@ 0x78
 8000e1e:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x7A;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	227a      	movs	r2, #122	@ 0x7a
 8000e24:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        Robot_Move(data, Mot1);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	210c      	movs	r1, #12
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fd84 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot4);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fd7f 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot3);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2104      	movs	r1, #4
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fd7a 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot2);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2108      	movs	r1, #8
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fd75 	bl	8000940 <Robot_Move>
        break;
 8000e56:	e0ab      	b.n	8000fb0 <Robot_move_point+0x35c>
    case 7:
        data->move_j4 = 0x80;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2280      	movs	r2, #128	@ 0x80
 8000e5c:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0xA8;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	22a8      	movs	r2, #168	@ 0xa8
 8000e62:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x76;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2276      	movs	r2, #118	@ 0x76
 8000e68:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x9B;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	229b      	movs	r2, #155	@ 0x9b
 8000e6e:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        Robot_Move(data, Mot1);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	210c      	movs	r1, #12
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fd5f 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot4);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fd5a 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot3);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fd55 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot2);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2108      	movs	r1, #8
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fd50 	bl	8000940 <Robot_Move>
        break;
 8000ea0:	e086      	b.n	8000fb0 <Robot_move_point+0x35c>
    case 8:
        data->move_j4 = 0x80;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0xAA;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	22aa      	movs	r2, #170	@ 0xaa
 8000eac:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x76;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2276      	movs	r2, #118	@ 0x76
 8000eb2:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x86;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2286      	movs	r2, #134	@ 0x86
 8000eb8:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        Robot_Move(data, Mot1);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	210c      	movs	r1, #12
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fd3a 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot4);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fd35 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot3);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2104      	movs	r1, #4
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fd30 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot2);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fd2b 	bl	8000940 <Robot_Move>
        break;
 8000eea:	e061      	b.n	8000fb0 <Robot_move_point+0x35c>
    case 9:
        data->move_j4 = 0x80;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2280      	movs	r2, #128	@ 0x80
 8000ef0:	70da      	strb	r2, [r3, #3]
        data->move_j3 = 0xA8;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	22a8      	movs	r2, #168	@ 0xa8
 8000ef6:	709a      	strb	r2, [r3, #2]
        data->move_j2 = 0x78;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2278      	movs	r2, #120	@ 0x78
 8000efc:	705a      	strb	r2, [r3, #1]
        data->move_j1 = 0x72;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2272      	movs	r2, #114	@ 0x72
 8000f02:	701a      	strb	r2, [r3, #0]
        data->mod = 0x00;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        Robot_Move(data, Mot1);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	210c      	movs	r1, #12
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fd15 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot4);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fd10 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot3);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2104      	movs	r1, #4
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fd0b 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot2);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fd06 	bl	8000940 <Robot_Move>
        break;
 8000f34:	e03c      	b.n	8000fb0 <Robot_move_point+0x35c>
    case 10:
        Stack_pop(&whiteStack, &data);
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481f      	ldr	r0, [pc, #124]	@ (8000fb8 <Robot_move_point+0x364>)
 8000f3c:	f7ff fcbf 	bl	80008be <Stack_pop>
        data->mod = 0x00;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        Robot_Move(data, Mot1);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	210c      	movs	r1, #12
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fcf7 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot4);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fcf2 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot3);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fced 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot2);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fce8 	bl	8000940 <Robot_Move>
        break;
 8000f70:	e01e      	b.n	8000fb0 <Robot_move_point+0x35c>
    case 11:
        Stack_pop(&blackStack, &data);
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4811      	ldr	r0, [pc, #68]	@ (8000fbc <Robot_move_point+0x368>)
 8000f78:	f7ff fca1 	bl	80008be <Stack_pop>
        data->mod = 0x00;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        Robot_Move(data, Mot1);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	210c      	movs	r1, #12
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fcd9 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot4);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fcd4 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot3);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fccf 	bl	8000940 <Robot_Move>
        Robot_Move(data, Mot2);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fcca 	bl	8000940 <Robot_Move>
        break;
 8000fac:	e000      	b.n	8000fb0 <Robot_move_point+0x35c>
    //     Robot_Move(data, Mot2);
    //     Robot_Move(data, Mot3);
    //     Robot_Move(data, Mot4);
    //     break;
    default:
        break;
 8000fae:	bf00      	nop
    }
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000144 	.word	0x20000144
 8000fbc:	200001ec 	.word	0x200001ec

08000fc0 <HAL_UART_RxCpltCallback>:
UART_DATA Usr_UART;
// 定义机器人坐标数据集
ROBOT_DATA Robot_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    // HAL_UART_Transmit_IT(&huart1,receiveData,2);
    // 返回函数应该仅用作测试接口使用，当接口测试没问题应将其关闭，否则将会出现中断占用
    HAL_UART_Receive_DMA(&huart1, (uint8_t *)&Usr_UART, UART_READ_NUM);
 8000fc8:	220a      	movs	r2, #10
 8000fca:	490c      	ldr	r1, [pc, #48]	@ (8000ffc <HAL_UART_RxCpltCallback+0x3c>)
 8000fcc:	480c      	ldr	r0, [pc, #48]	@ (8001000 <HAL_UART_RxCpltCallback+0x40>)
 8000fce:	f003 f873 	bl	80040b8 <HAL_UART_Receive_DMA>
    Usr_chessman.read_head = Usr_UART.head;
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_UART_RxCpltCallback+0x3c>)
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_UART_RxCpltCallback+0x44>)
 8000fd8:	701a      	strb	r2, [r3, #0]
    Usr_UART.head = 0xB0; // 停止openmv发送数据
 8000fda:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <HAL_UART_RxCpltCallback+0x3c>)
 8000fdc:	22b0      	movs	r2, #176	@ 0xb0
 8000fde:	701a      	strb	r2, [r3, #0]
    // 如果这里使用低延迟的执行函数，请使用阻塞式发送
    HAL_UART_Transmit(&huart1, (uint8_t *)&Usr_UART, UART_TRAN_NUM, 1);
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4905      	ldr	r1, [pc, #20]	@ (8000ffc <HAL_UART_RxCpltCallback+0x3c>)
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <HAL_UART_RxCpltCallback+0x40>)
 8000fe8:	f002 ff72 	bl	8003ed0 <HAL_UART_Transmit>
    Usr_UART.ok = 1; // 可以开始进行数据处理标志
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <HAL_UART_RxCpltCallback+0x3c>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	729a      	strb	r2, [r3, #10]
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200002a0 	.word	0x200002a0
 8001000:	20000074 	.word	0x20000074
 8001004:	20000294 	.word	0x20000294

08001008 <Usr_main>:
// Robot_Move(Usr_chessman.calcu_data.pwm_j1, 146, Mot1);
// HAL_Delay(1000);
// }

void Usr_main()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    // 启动PWM定时器
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800100c:	210c      	movs	r1, #12
 800100e:	480e      	ldr	r0, [pc, #56]	@ (8001048 <Usr_main+0x40>)
 8001010:	f002 f89a 	bl	8003148 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001014:	2108      	movs	r1, #8
 8001016:	480c      	ldr	r0, [pc, #48]	@ (8001048 <Usr_main+0x40>)
 8001018:	f002 f896 	bl	8003148 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800101c:	2104      	movs	r1, #4
 800101e:	480a      	ldr	r0, [pc, #40]	@ (8001048 <Usr_main+0x40>)
 8001020:	f002 f892 	bl	8003148 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001024:	2100      	movs	r1, #0
 8001026:	4808      	ldr	r0, [pc, #32]	@ (8001048 <Usr_main+0x40>)
 8001028:	f002 f88e 	bl	8003148 <HAL_TIM_PWM_Start>
    // 重置ok位为0
    Usr_UART.ok = 0;
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <Usr_main+0x44>)
 800102e:	2200      	movs	r2, #0
 8001030:	729a      	strb	r2, [r3, #10]
    // 开启DMA UART接受中断
    HAL_UART_Receive_DMA(&huart1, (uint8_t *)&Usr_UART, UART_READ_NUM);
 8001032:	220a      	movs	r2, #10
 8001034:	4905      	ldr	r1, [pc, #20]	@ (800104c <Usr_main+0x44>)
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <Usr_main+0x48>)
 8001038:	f003 f83e 	bl	80040b8 <HAL_UART_Receive_DMA>
    Robot_Move_Start(&Robot_data, &Usr_UART);
 800103c:	4903      	ldr	r1, [pc, #12]	@ (800104c <Usr_main+0x44>)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <Usr_main+0x4c>)
 8001040:	f7ff fd4c 	bl	8000adc <Robot_Move_Start>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000002c 	.word	0x2000002c
 800104c:	200002a0 	.word	0x200002a0
 8001050:	20000074 	.word	0x20000074
 8001054:	200002b0 	.word	0x200002b0

08001058 <Usr_whilemain>:

void Usr_whilemain()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
    // 接收完成标志
    if (Usr_UART.ok == 1)
 800105e:	4bba      	ldr	r3, [pc, #744]	@ (8001348 <Usr_whilemain+0x2f0>)
 8001060:	7a9b      	ldrb	r3, [r3, #10]
 8001062:	2b01      	cmp	r3, #1
 8001064:	f040 81b7 	bne.w	80013d6 <Usr_whilemain+0x37e>
    {
        // 这里的delay记得删除，我目前留在程序是为了测试串口收发使用
        HAL_Delay(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f000 fe45 	bl	8001cf8 <HAL_Delay>
        // 根据不同的头选择不同的对数据的处理方式
        switch (Usr_chessman.read_head)
 800106e:	4bb7      	ldr	r3, [pc, #732]	@ (800134c <Usr_whilemain+0x2f4>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2bff      	cmp	r3, #255	@ 0xff
 8001074:	f000 813d 	beq.w	80012f2 <Usr_whilemain+0x29a>
 8001078:	2bff      	cmp	r3, #255	@ 0xff
 800107a:	f300 81a8 	bgt.w	80013ce <Usr_whilemain+0x376>
 800107e:	2bae      	cmp	r3, #174	@ 0xae
 8001080:	dc66      	bgt.n	8001150 <Usr_whilemain+0xf8>
 8001082:	2b81      	cmp	r3, #129	@ 0x81
 8001084:	f2c0 81a3 	blt.w	80013ce <Usr_whilemain+0x376>
 8001088:	3b81      	subs	r3, #129	@ 0x81
 800108a:	2b2d      	cmp	r3, #45	@ 0x2d
 800108c:	f200 819f 	bhi.w	80013ce <Usr_whilemain+0x376>
 8001090:	a201      	add	r2, pc, #4	@ (adr r2, 8001098 <Usr_whilemain+0x40>)
 8001092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001096:	bf00      	nop
 8001098:	08001159 	.word	0x08001159
 800109c:	08001175 	.word	0x08001175
 80010a0:	080013cf 	.word	0x080013cf
 80010a4:	08001201 	.word	0x08001201
 80010a8:	080011eb 	.word	0x080011eb
 80010ac:	080013cf 	.word	0x080013cf
 80010b0:	080013cf 	.word	0x080013cf
 80010b4:	080013cf 	.word	0x080013cf
 80010b8:	080013cf 	.word	0x080013cf
 80010bc:	080013cf 	.word	0x080013cf
 80010c0:	080013cf 	.word	0x080013cf
 80010c4:	080013cf 	.word	0x080013cf
 80010c8:	080013cf 	.word	0x080013cf
 80010cc:	080013cf 	.word	0x080013cf
 80010d0:	080013cf 	.word	0x080013cf
 80010d4:	080013cf 	.word	0x080013cf
 80010d8:	080013cf 	.word	0x080013cf
 80010dc:	080013cf 	.word	0x080013cf
 80010e0:	080013cf 	.word	0x080013cf
 80010e4:	080013cf 	.word	0x080013cf
 80010e8:	080013cf 	.word	0x080013cf
 80010ec:	080013cf 	.word	0x080013cf
 80010f0:	080013cf 	.word	0x080013cf
 80010f4:	080013cf 	.word	0x080013cf
 80010f8:	080013cf 	.word	0x080013cf
 80010fc:	080013cf 	.word	0x080013cf
 8001100:	080013cf 	.word	0x080013cf
 8001104:	080013cf 	.word	0x080013cf
 8001108:	080013cf 	.word	0x080013cf
 800110c:	080013cf 	.word	0x080013cf
 8001110:	080013cf 	.word	0x080013cf
 8001114:	080013cf 	.word	0x080013cf
 8001118:	080013cf 	.word	0x080013cf
 800111c:	080013cf 	.word	0x080013cf
 8001120:	080013cf 	.word	0x080013cf
 8001124:	080013cf 	.word	0x080013cf
 8001128:	080013cf 	.word	0x080013cf
 800112c:	080013cf 	.word	0x080013cf
 8001130:	080013cf 	.word	0x080013cf
 8001134:	080013cf 	.word	0x080013cf
 8001138:	080013cf 	.word	0x080013cf
 800113c:	08001217 	.word	0x08001217
 8001140:	0800124d 	.word	0x0800124d
 8001144:	08001271 	.word	0x08001271
 8001148:	080013cf 	.word	0x080013cf
 800114c:	080013cf 	.word	0x080013cf
 8001150:	2bfe      	cmp	r3, #254	@ 0xfe
 8001152:	f000 80a3 	beq.w	800129c <Usr_whilemain+0x244>
            HAL_Delay(1000);
            Usr_UART.head = 0xFF;
            HAL_UART_Transmit(&huart1, (uint8_t *)&Usr_UART, UART_TRAN_NUM, 1);
            break;
        default:
            break;
 8001156:	e13a      	b.n	80013ce <Usr_whilemain+0x376>
            Board_init(&opeBoard, 1, 1);
 8001158:	2201      	movs	r2, #1
 800115a:	2101      	movs	r1, #1
 800115c:	487c      	ldr	r0, [pc, #496]	@ (8001350 <Usr_whilemain+0x2f8>)
 800115e:	f000 fb63 	bl	8001828 <Board_init>
            opeBoard.turn = BLACK;
 8001162:	4b7b      	ldr	r3, [pc, #492]	@ (8001350 <Usr_whilemain+0x2f8>)
 8001164:	2201      	movs	r2, #1
 8001166:	60da      	str	r2, [r3, #12]
            Board_moveBoard(&opeBoard, 5, &Robot_data);
 8001168:	4a7a      	ldr	r2, [pc, #488]	@ (8001354 <Usr_whilemain+0x2fc>)
 800116a:	2105      	movs	r1, #5
 800116c:	4878      	ldr	r0, [pc, #480]	@ (8001350 <Usr_whilemain+0x2f8>)
 800116e:	f000 fbdf 	bl	8001930 <Board_moveBoard>
            break;
 8001172:	e12d      	b.n	80013d0 <Usr_whilemain+0x378>
            Board_init(&opeBoard, 2, 2);
 8001174:	2202      	movs	r2, #2
 8001176:	2102      	movs	r1, #2
 8001178:	4875      	ldr	r0, [pc, #468]	@ (8001350 <Usr_whilemain+0x2f8>)
 800117a:	f000 fb55 	bl	8001828 <Board_init>
            opeBoard.turn = WHITE;
 800117e:	4b74      	ldr	r3, [pc, #464]	@ (8001350 <Usr_whilemain+0x2f8>)
 8001180:	2202      	movs	r2, #2
 8001182:	60da      	str	r2, [r3, #12]
            HAL_UART_Receive_DMA(&huart1, &buffer, 1);
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	2201      	movs	r2, #1
 8001188:	4619      	mov	r1, r3
 800118a:	4873      	ldr	r0, [pc, #460]	@ (8001358 <Usr_whilemain+0x300>)
 800118c:	f002 ff94 	bl	80040b8 <HAL_UART_Receive_DMA>
            Board_moveBoard(&opeBoard, buffer, &Robot_data);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4a70      	ldr	r2, [pc, #448]	@ (8001354 <Usr_whilemain+0x2fc>)
 8001194:	4619      	mov	r1, r3
 8001196:	486e      	ldr	r0, [pc, #440]	@ (8001350 <Usr_whilemain+0x2f8>)
 8001198:	f000 fbca 	bl	8001930 <Board_moveBoard>
            HAL_UART_Receive_DMA(&huart1, &buffer, 1);
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	2201      	movs	r2, #1
 80011a0:	4619      	mov	r1, r3
 80011a2:	486d      	ldr	r0, [pc, #436]	@ (8001358 <Usr_whilemain+0x300>)
 80011a4:	f002 ff88 	bl	80040b8 <HAL_UART_Receive_DMA>
            Board_moveBoard(&opeBoard, buffer, &Robot_data);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4a6a      	ldr	r2, [pc, #424]	@ (8001354 <Usr_whilemain+0x2fc>)
 80011ac:	4619      	mov	r1, r3
 80011ae:	4868      	ldr	r0, [pc, #416]	@ (8001350 <Usr_whilemain+0x2f8>)
 80011b0:	f000 fbbe 	bl	8001930 <Board_moveBoard>
            opeBoard.turn = BLACK;
 80011b4:	4b66      	ldr	r3, [pc, #408]	@ (8001350 <Usr_whilemain+0x2f8>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	60da      	str	r2, [r3, #12]
            HAL_UART_Receive_DMA(&huart1, &buffer, 1);
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	2201      	movs	r2, #1
 80011be:	4619      	mov	r1, r3
 80011c0:	4865      	ldr	r0, [pc, #404]	@ (8001358 <Usr_whilemain+0x300>)
 80011c2:	f002 ff79 	bl	80040b8 <HAL_UART_Receive_DMA>
            Board_moveBoard(&opeBoard, buffer, &Robot_data);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4a62      	ldr	r2, [pc, #392]	@ (8001354 <Usr_whilemain+0x2fc>)
 80011ca:	4619      	mov	r1, r3
 80011cc:	4860      	ldr	r0, [pc, #384]	@ (8001350 <Usr_whilemain+0x2f8>)
 80011ce:	f000 fbaf 	bl	8001930 <Board_moveBoard>
            HAL_UART_Receive_DMA(&huart1, &buffer, 1);
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	2201      	movs	r2, #1
 80011d6:	4619      	mov	r1, r3
 80011d8:	485f      	ldr	r0, [pc, #380]	@ (8001358 <Usr_whilemain+0x300>)
 80011da:	f002 ff6d 	bl	80040b8 <HAL_UART_Receive_DMA>
            Board_moveBoard(&opeBoard, buffer, &Robot_data);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a5c      	ldr	r2, [pc, #368]	@ (8001354 <Usr_whilemain+0x2fc>)
 80011e2:	4619      	mov	r1, r3
 80011e4:	485a      	ldr	r0, [pc, #360]	@ (8001350 <Usr_whilemain+0x2f8>)
 80011e6:	f000 fba3 	bl	8001930 <Board_moveBoard>
            Board_init(&opeBoard, 1, 2);
 80011ea:	2202      	movs	r2, #2
 80011ec:	2101      	movs	r1, #1
 80011ee:	4858      	ldr	r0, [pc, #352]	@ (8001350 <Usr_whilemain+0x2f8>)
 80011f0:	f000 fb1a 	bl	8001828 <Board_init>
            Board_play(&opeBoard, &huart1, &Robot_data);
 80011f4:	4a57      	ldr	r2, [pc, #348]	@ (8001354 <Usr_whilemain+0x2fc>)
 80011f6:	4958      	ldr	r1, [pc, #352]	@ (8001358 <Usr_whilemain+0x300>)
 80011f8:	4855      	ldr	r0, [pc, #340]	@ (8001350 <Usr_whilemain+0x2f8>)
 80011fa:	f000 fcb3 	bl	8001b64 <Board_play>
            break;
 80011fe:	e0e7      	b.n	80013d0 <Usr_whilemain+0x378>
            Board_init(&opeBoard, 2, 1);
 8001200:	2201      	movs	r2, #1
 8001202:	2102      	movs	r1, #2
 8001204:	4852      	ldr	r0, [pc, #328]	@ (8001350 <Usr_whilemain+0x2f8>)
 8001206:	f000 fb0f 	bl	8001828 <Board_init>
            Board_play(&opeBoard, &huart1, &Robot_data);
 800120a:	4a52      	ldr	r2, [pc, #328]	@ (8001354 <Usr_whilemain+0x2fc>)
 800120c:	4952      	ldr	r1, [pc, #328]	@ (8001358 <Usr_whilemain+0x300>)
 800120e:	4850      	ldr	r0, [pc, #320]	@ (8001350 <Usr_whilemain+0x2f8>)
 8001210:	f000 fca8 	bl	8001b64 <Board_play>
            break;
 8001214:	e0dc      	b.n	80013d0 <Usr_whilemain+0x378>
            for (unsigned char i = 0; i < 9; i++)
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	e00b      	b.n	8001234 <Usr_whilemain+0x1dc>
                Usr_chessman.color[i] = Usr_UART.data[i];
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	4949      	ldr	r1, [pc, #292]	@ (8001348 <Usr_whilemain+0x2f0>)
 8001222:	440a      	add	r2, r1
 8001224:	7851      	ldrb	r1, [r2, #1]
 8001226:	4a49      	ldr	r2, [pc, #292]	@ (800134c <Usr_whilemain+0x2f4>)
 8001228:	4413      	add	r3, r2
 800122a:	460a      	mov	r2, r1
 800122c:	705a      	strb	r2, [r3, #1]
            for (unsigned char i = 0; i < 9; i++)
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	3301      	adds	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	2b08      	cmp	r3, #8
 8001238:	d9f0      	bls.n	800121c <Usr_whilemain+0x1c4>
            Usr_UART.head = 0xB2; // 0xB2 stm32准备继续接收
 800123a:	4b43      	ldr	r3, [pc, #268]	@ (8001348 <Usr_whilemain+0x2f0>)
 800123c:	22b2      	movs	r2, #178	@ 0xb2
 800123e:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&Usr_UART, UART_TRAN_NUM);
 8001240:	2201      	movs	r2, #1
 8001242:	4941      	ldr	r1, [pc, #260]	@ (8001348 <Usr_whilemain+0x2f0>)
 8001244:	4844      	ldr	r0, [pc, #272]	@ (8001358 <Usr_whilemain+0x300>)
 8001246:	f002 fec7 	bl	8003fd8 <HAL_UART_Transmit_DMA>
            break;
 800124a:	e0c1      	b.n	80013d0 <Usr_whilemain+0x378>
            for (unsigned char i = 0; i < 9; i++)
 800124c:	2300      	movs	r3, #0
 800124e:	73bb      	strb	r3, [r7, #14]
 8001250:	e002      	b.n	8001258 <Usr_whilemain+0x200>
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	3301      	adds	r3, #1
 8001256:	73bb      	strb	r3, [r7, #14]
 8001258:	7bbb      	ldrb	r3, [r7, #14]
 800125a:	2b08      	cmp	r3, #8
 800125c:	d9f9      	bls.n	8001252 <Usr_whilemain+0x1fa>
            Usr_UART.head = 0xB3; // 0xB3 stm32准备继续接收
 800125e:	4b3a      	ldr	r3, [pc, #232]	@ (8001348 <Usr_whilemain+0x2f0>)
 8001260:	22b3      	movs	r2, #179	@ 0xb3
 8001262:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&Usr_UART, UART_TRAN_NUM);
 8001264:	2201      	movs	r2, #1
 8001266:	4938      	ldr	r1, [pc, #224]	@ (8001348 <Usr_whilemain+0x2f0>)
 8001268:	483b      	ldr	r0, [pc, #236]	@ (8001358 <Usr_whilemain+0x300>)
 800126a:	f002 feb5 	bl	8003fd8 <HAL_UART_Transmit_DMA>
            break;
 800126e:	e0af      	b.n	80013d0 <Usr_whilemain+0x378>
            for (unsigned char i = 0; i < 9; i++)
 8001270:	2300      	movs	r3, #0
 8001272:	737b      	strb	r3, [r7, #13]
 8001274:	e002      	b.n	800127c <Usr_whilemain+0x224>
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	3301      	adds	r3, #1
 800127a:	737b      	strb	r3, [r7, #13]
 800127c:	7b7b      	ldrb	r3, [r7, #13]
 800127e:	2b08      	cmp	r3, #8
 8001280:	d9f9      	bls.n	8001276 <Usr_whilemain+0x21e>
            HAL_Delay(1000);
 8001282:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001286:	f000 fd37 	bl	8001cf8 <HAL_Delay>
            Usr_UART.head = 0xB1; // 重新循环
 800128a:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <Usr_whilemain+0x2f0>)
 800128c:	22b1      	movs	r2, #177	@ 0xb1
 800128e:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&Usr_UART, UART_TRAN_NUM);
 8001290:	2201      	movs	r2, #1
 8001292:	492d      	ldr	r1, [pc, #180]	@ (8001348 <Usr_whilemain+0x2f0>)
 8001294:	4830      	ldr	r0, [pc, #192]	@ (8001358 <Usr_whilemain+0x300>)
 8001296:	f002 fe9f 	bl	8003fd8 <HAL_UART_Transmit_DMA>
            break;
 800129a:	e099      	b.n	80013d0 <Usr_whilemain+0x378>
            for (int i = 0; i < 9; i++)
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	e01a      	b.n	80012d8 <Usr_whilemain+0x280>
                Robot_move_point(&Robot_data, i + 10);
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	330a      	adds	r3, #10
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	4829      	ldr	r0, [pc, #164]	@ (8001354 <Usr_whilemain+0x2fc>)
 80012ae:	f7ff fcd1 	bl	8000c54 <Robot_move_point>
                Robot_move_point(&Robot_data, 0);
 80012b2:	2100      	movs	r1, #0
 80012b4:	4827      	ldr	r0, [pc, #156]	@ (8001354 <Usr_whilemain+0x2fc>)
 80012b6:	f7ff fccd 	bl	8000c54 <Robot_move_point>
                Robot_move_point(&Robot_data, i + 1);
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	3301      	adds	r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	4823      	ldr	r0, [pc, #140]	@ (8001354 <Usr_whilemain+0x2fc>)
 80012c6:	f7ff fcc5 	bl	8000c54 <Robot_move_point>
                Robot_move_point(&Robot_data, 0);
 80012ca:	2100      	movs	r1, #0
 80012cc:	4821      	ldr	r0, [pc, #132]	@ (8001354 <Usr_whilemain+0x2fc>)
 80012ce:	f7ff fcc1 	bl	8000c54 <Robot_move_point>
            for (int i = 0; i < 9; i++)
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3301      	adds	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	2b08      	cmp	r3, #8
 80012dc:	dde1      	ble.n	80012a2 <Usr_whilemain+0x24a>
            Usr_UART.head = 0xFE;
 80012de:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <Usr_whilemain+0x2f0>)
 80012e0:	22fe      	movs	r2, #254	@ 0xfe
 80012e2:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)&Usr_UART, UART_READ_NUM, 1);
 80012e4:	2301      	movs	r3, #1
 80012e6:	220a      	movs	r2, #10
 80012e8:	4917      	ldr	r1, [pc, #92]	@ (8001348 <Usr_whilemain+0x2f0>)
 80012ea:	481b      	ldr	r0, [pc, #108]	@ (8001358 <Usr_whilemain+0x300>)
 80012ec:	f002 fdf0 	bl	8003ed0 <HAL_UART_Transmit>
            break;
 80012f0:	e06e      	b.n	80013d0 <Usr_whilemain+0x378>
            Robot_data.move_j4 = Usr_UART.data[0];
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <Usr_whilemain+0x2f0>)
 80012f4:	785a      	ldrb	r2, [r3, #1]
 80012f6:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <Usr_whilemain+0x2fc>)
 80012f8:	70da      	strb	r2, [r3, #3]
            Robot_data.move_j3 = Usr_UART.data[1];
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <Usr_whilemain+0x2f0>)
 80012fc:	789a      	ldrb	r2, [r3, #2]
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <Usr_whilemain+0x2fc>)
 8001300:	709a      	strb	r2, [r3, #2]
            Robot_data.move_j2 = Usr_UART.data[2];
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <Usr_whilemain+0x2f0>)
 8001304:	78da      	ldrb	r2, [r3, #3]
 8001306:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <Usr_whilemain+0x2fc>)
 8001308:	705a      	strb	r2, [r3, #1]
            Robot_data.move_j1 = Usr_UART.data[3];
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <Usr_whilemain+0x2f0>)
 800130c:	791a      	ldrb	r2, [r3, #4]
 800130e:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <Usr_whilemain+0x2fc>)
 8001310:	701a      	strb	r2, [r3, #0]
            Robot_data.mod = Usr_UART.data[4];
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <Usr_whilemain+0x2f0>)
 8001314:	795a      	ldrb	r2, [r3, #5]
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <Usr_whilemain+0x2fc>)
 8001318:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            if (Robot_data.mod == 0x00)
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <Usr_whilemain+0x2fc>)
 800131e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001322:	2b00      	cmp	r3, #0
 8001324:	d11a      	bne.n	800135c <Usr_whilemain+0x304>
                Robot_Move(&Robot_data, Mot1);
 8001326:	210c      	movs	r1, #12
 8001328:	480a      	ldr	r0, [pc, #40]	@ (8001354 <Usr_whilemain+0x2fc>)
 800132a:	f7ff fb09 	bl	8000940 <Robot_Move>
                Robot_Move(&Robot_data, Mot4);
 800132e:	2100      	movs	r1, #0
 8001330:	4808      	ldr	r0, [pc, #32]	@ (8001354 <Usr_whilemain+0x2fc>)
 8001332:	f7ff fb05 	bl	8000940 <Robot_Move>
                Robot_Move(&Robot_data, Mot3);
 8001336:	2104      	movs	r1, #4
 8001338:	4806      	ldr	r0, [pc, #24]	@ (8001354 <Usr_whilemain+0x2fc>)
 800133a:	f7ff fb01 	bl	8000940 <Robot_Move>
                Robot_Move(&Robot_data, Mot2);
 800133e:	2108      	movs	r1, #8
 8001340:	4804      	ldr	r0, [pc, #16]	@ (8001354 <Usr_whilemain+0x2fc>)
 8001342:	f7ff fafd 	bl	8000940 <Robot_Move>
 8001346:	e034      	b.n	80013b2 <Usr_whilemain+0x35a>
 8001348:	200002a0 	.word	0x200002a0
 800134c:	20000294 	.word	0x20000294
 8001350:	200002f0 	.word	0x200002f0
 8001354:	200002b0 	.word	0x200002b0
 8001358:	20000074 	.word	0x20000074
            else if (Robot_data.mod == 0x01)
 800135c:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <Usr_whilemain+0x388>)
 800135e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001362:	2b01      	cmp	r3, #1
 8001364:	d110      	bne.n	8001388 <Usr_whilemain+0x330>
                Robot_Move(&Robot_data, Mot2);
 8001366:	2108      	movs	r1, #8
 8001368:	481d      	ldr	r0, [pc, #116]	@ (80013e0 <Usr_whilemain+0x388>)
 800136a:	f7ff fae9 	bl	8000940 <Robot_Move>
                Robot_Move(&Robot_data, Mot3);
 800136e:	2104      	movs	r1, #4
 8001370:	481b      	ldr	r0, [pc, #108]	@ (80013e0 <Usr_whilemain+0x388>)
 8001372:	f7ff fae5 	bl	8000940 <Robot_Move>
                Robot_Move(&Robot_data, Mot4);
 8001376:	2100      	movs	r1, #0
 8001378:	4819      	ldr	r0, [pc, #100]	@ (80013e0 <Usr_whilemain+0x388>)
 800137a:	f7ff fae1 	bl	8000940 <Robot_Move>
                Robot_Move(&Robot_data, Mot1);
 800137e:	210c      	movs	r1, #12
 8001380:	4817      	ldr	r0, [pc, #92]	@ (80013e0 <Usr_whilemain+0x388>)
 8001382:	f7ff fadd 	bl	8000940 <Robot_Move>
 8001386:	e014      	b.n	80013b2 <Usr_whilemain+0x35a>
            else if (Robot_data.mod == 0x02)
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <Usr_whilemain+0x388>)
 800138a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800138e:	2b02      	cmp	r3, #2
 8001390:	d10f      	bne.n	80013b2 <Usr_whilemain+0x35a>
                Robot_Move(&Robot_data, Mot1);
 8001392:	210c      	movs	r1, #12
 8001394:	4812      	ldr	r0, [pc, #72]	@ (80013e0 <Usr_whilemain+0x388>)
 8001396:	f7ff fad3 	bl	8000940 <Robot_Move>
                Robot_Move(&Robot_data, Mot2);
 800139a:	2108      	movs	r1, #8
 800139c:	4810      	ldr	r0, [pc, #64]	@ (80013e0 <Usr_whilemain+0x388>)
 800139e:	f7ff facf 	bl	8000940 <Robot_Move>
                Robot_Move(&Robot_data, Mot3);
 80013a2:	2104      	movs	r1, #4
 80013a4:	480e      	ldr	r0, [pc, #56]	@ (80013e0 <Usr_whilemain+0x388>)
 80013a6:	f7ff facb 	bl	8000940 <Robot_Move>
                Robot_Move(&Robot_data, Mot4);
 80013aa:	2100      	movs	r1, #0
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <Usr_whilemain+0x388>)
 80013ae:	f7ff fac7 	bl	8000940 <Robot_Move>
            HAL_Delay(1000);
 80013b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013b6:	f000 fc9f 	bl	8001cf8 <HAL_Delay>
            Usr_UART.head = 0xFF;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <Usr_whilemain+0x38c>)
 80013bc:	22ff      	movs	r2, #255	@ 0xff
 80013be:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart1, (uint8_t *)&Usr_UART, UART_TRAN_NUM, 1);
 80013c0:	2301      	movs	r3, #1
 80013c2:	2201      	movs	r2, #1
 80013c4:	4907      	ldr	r1, [pc, #28]	@ (80013e4 <Usr_whilemain+0x38c>)
 80013c6:	4808      	ldr	r0, [pc, #32]	@ (80013e8 <Usr_whilemain+0x390>)
 80013c8:	f002 fd82 	bl	8003ed0 <HAL_UART_Transmit>
            break;
 80013cc:	e000      	b.n	80013d0 <Usr_whilemain+0x378>
            break;
 80013ce:	bf00      	nop
        }
        Usr_UART.ok = 0; // 完成数据的处理
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <Usr_whilemain+0x38c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	729a      	strb	r2, [r3, #10]
    //     // 数据处理完成，返回标志位并返回处理数据结果
    //     Usr_UART.ok = 0;
    //     // 如果这里使用低延迟的执行函数，请使用阻塞式发送
    //     HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&Usr_UART, UART_DATA_NUM);
    // }
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002b0 	.word	0x200002b0
 80013e4:	200002a0 	.word	0x200002a0
 80013e8:	20000074 	.word	0x20000074

080013ec <evaluate>:
#include "alpha_beta.h"

// 评估函数，判断当前局面的得分
int evaluate(int board[3][3]) {
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    // 检查行
    for (int row = 0; row < 3; row++) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e045      	b.n	8001486 <evaluate+0x9a>
        if (board[row][0] == board[row][1] && board[row][1] == board[row][2]) {
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	461a      	mov	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	6819      	ldr	r1, [r3, #0]
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4299      	cmp	r1, r3
 8001420:	d12e      	bne.n	8001480 <evaluate+0x94>
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	461a      	mov	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	461a      	mov	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	4299      	cmp	r1, r3
 8001448:	d11a      	bne.n	8001480 <evaluate+0x94>
            if (board[row][0] == 1) {
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	461a      	mov	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <evaluate+0x78>
                return 1;
 8001460:	2301      	movs	r3, #1
 8001462:	e07d      	b.n	8001560 <evaluate+0x174>
            } else if (board[row][0] == 2) {
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	461a      	mov	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d102      	bne.n	8001480 <evaluate+0x94>
                return -1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e06f      	b.n	8001560 <evaluate+0x174>
    for (int row = 0; row < 3; row++) {
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3301      	adds	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b02      	cmp	r3, #2
 800148a:	ddb6      	ble.n	80013fa <evaluate+0xe>
            }
        }
    }

    // 检查列
    for (int col = 0; col < 3; col++) {
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	e02a      	b.n	80014e8 <evaluate+0xfc>
        if (board[0][col] == board[1][col] && board[1][col] == board[2][col]) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	330c      	adds	r3, #12
 800149e:	68b9      	ldr	r1, [r7, #8]
 80014a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d11c      	bne.n	80014e2 <evaluate+0xf6>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	330c      	adds	r3, #12
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3318      	adds	r3, #24
 80014b6:	68b9      	ldr	r1, [r7, #8]
 80014b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d110      	bne.n	80014e2 <evaluate+0xf6>
            if (board[0][col] == 1) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <evaluate+0xe4>
                return 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e047      	b.n	8001560 <evaluate+0x174>
            } else if (board[0][col] == 2) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d102      	bne.n	80014e2 <evaluate+0xf6>
                return -1;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	e03e      	b.n	8001560 <evaluate+0x174>
    for (int col = 0; col < 3; col++) {
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3301      	adds	r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	ddd1      	ble.n	8001492 <evaluate+0xa6>
            }
        }
    }

    // 检查对角线
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	330c      	adds	r3, #12
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d114      	bne.n	8001526 <evaluate+0x13a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	330c      	adds	r3, #12
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3318      	adds	r3, #24
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	429a      	cmp	r2, r3
 800150a:	d10c      	bne.n	8001526 <evaluate+0x13a>
        if (board[0][0] == 1) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <evaluate+0x12c>
            return 1;
 8001514:	2301      	movs	r3, #1
 8001516:	e023      	b.n	8001560 <evaluate+0x174>
        } else if (board[0][0] == 2) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d102      	bne.n	8001526 <evaluate+0x13a>
            return -1;
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	e01c      	b.n	8001560 <evaluate+0x174>
        }
    }

    if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	330c      	adds	r3, #12
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	d114      	bne.n	800155e <evaluate+0x172>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	330c      	adds	r3, #12
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3318      	adds	r3, #24
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d10c      	bne.n	800155e <evaluate+0x172>
        if (board[0][2] == 1) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <evaluate+0x164>
            return 1;
 800154c:	2301      	movs	r3, #1
 800154e:	e007      	b.n	8001560 <evaluate+0x174>
        } else if (board[0][2] == 2) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d102      	bne.n	800155e <evaluate+0x172>
            return -1;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
 800155c:	e000      	b.n	8001560 <evaluate+0x174>
        }
    }

    // 如果没有获胜者，返回 0
    return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <alphaBeta>:

// Alpha-Beta 算法核心函数
int alphaBeta(int board[3][3], int depth, int alpha, int beta, int isMaximizing, int cnt) {
 800156a:	b580      	push	{r7, lr}
 800156c:	b090      	sub	sp, #64	@ 0x40
 800156e:	af02      	add	r7, sp, #8
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
    int score = evaluate(board);
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7ff ff37 	bl	80013ec <evaluate>
 800157e:	61f8      	str	r0, [r7, #28]

    // 如果游戏结束或达到最大深度，返回得分
    if (score == 1 || score == -1 || depth == cnt) {
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d007      	beq.n	8001596 <alphaBeta+0x2c>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d003      	beq.n	8001596 <alphaBeta+0x2c>
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001592:	429a      	cmp	r2, r3
 8001594:	d101      	bne.n	800159a <alphaBeta+0x30>
        return score;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	e0b5      	b.n	8001706 <alphaBeta+0x19c>
    }

    if (isMaximizing) {
 800159a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800159c:	2b00      	cmp	r3, #0
 800159e:	d059      	beq.n	8001654 <alphaBeta+0xea>
        int bestScore = INT_MIN;
 80015a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80015a4:	637b      	str	r3, [r7, #52]	@ 0x34
        for (int row = 0; row < 3; row++) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80015aa:	e04e      	b.n	800164a <alphaBeta+0xe0>
            for (int col = 0; col < 3; col++) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015b0:	e043      	b.n	800163a <alphaBeta+0xd0>
                if (board[row][col] == 0) {
 80015b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	461a      	mov	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d133      	bne.n	8001634 <alphaBeta+0xca>
                    board[row][col] = 1;
 80015cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015ce:	4613      	mov	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015de:	2101      	movs	r1, #1
 80015e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    int score = alphaBeta(board, depth + 1, alpha, beta, 0, cnt);
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1c59      	adds	r1, r3, #1
 80015e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2300      	movs	r3, #0
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f7ff ffb8 	bl	800156a <alphaBeta>
 80015fa:	6178      	str	r0, [r7, #20]
                    board[row][col] = 0;
 80015fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800160e:	2100      	movs	r1, #0
 8001610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    bestScore = (score > bestScore)? score : bestScore;
 8001614:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	4293      	cmp	r3, r2
 800161a:	bfb8      	it	lt
 800161c:	4613      	movlt	r3, r2
 800161e:	637b      	str	r3, [r7, #52]	@ 0x34
                    alpha = (alpha > bestScore)? alpha : bestScore;
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001624:	4293      	cmp	r3, r2
 8001626:	bfb8      	it	lt
 8001628:	4613      	movlt	r3, r2
 800162a:	607b      	str	r3, [r7, #4]
                    if (beta <= alpha) {
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	dd06      	ble.n	8001642 <alphaBeta+0xd8>
            for (int col = 0; col < 3; col++) {
 8001634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001636:	3301      	adds	r3, #1
 8001638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800163a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800163c:	2b02      	cmp	r3, #2
 800163e:	ddb8      	ble.n	80015b2 <alphaBeta+0x48>
 8001640:	e000      	b.n	8001644 <alphaBeta+0xda>
                        break;  // 剪枝
 8001642:	bf00      	nop
        for (int row = 0; row < 3; row++) {
 8001644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001646:	3301      	adds	r3, #1
 8001648:	633b      	str	r3, [r7, #48]	@ 0x30
 800164a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800164c:	2b02      	cmp	r3, #2
 800164e:	ddad      	ble.n	80015ac <alphaBeta+0x42>
                    }
                }
            }
        }
        return bestScore;
 8001650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001652:	e058      	b.n	8001706 <alphaBeta+0x19c>
    } else {
        int bestScore = INT_MAX;
 8001654:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (int row = 0; row < 3; row++) {
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
 800165e:	e04e      	b.n	80016fe <alphaBeta+0x194>
            for (int col = 0; col < 3; col++) {
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
 8001664:	e043      	b.n	80016ee <alphaBeta+0x184>
                if (board[row][col] == 0) {
 8001666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	461a      	mov	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4413      	add	r3, r2
 8001676:	6a3a      	ldr	r2, [r7, #32]
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d133      	bne.n	80016e8 <alphaBeta+0x17e>
                    board[row][col] = 2;
 8001680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	6a3a      	ldr	r2, [r7, #32]
 8001692:	2102      	movs	r1, #2
 8001694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    int score = alphaBeta(board, depth + 1, alpha, beta, 1, cnt);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c59      	adds	r1, r3, #1
 800169c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	2301      	movs	r3, #1
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff ff5e 	bl	800156a <alphaBeta>
 80016ae:	61b8      	str	r0, [r7, #24]
                    board[row][col] = 0;
 80016b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	6a3a      	ldr	r2, [r7, #32]
 80016c2:	2100      	movs	r1, #0
 80016c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    bestScore = (score < bestScore)? score : bestScore;
 80016c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4293      	cmp	r3, r2
 80016ce:	bfa8      	it	ge
 80016d0:	4613      	movge	r3, r2
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
                    beta = (beta < bestScore)? beta : bestScore;
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d8:	4293      	cmp	r3, r2
 80016da:	bfa8      	it	ge
 80016dc:	4613      	movge	r3, r2
 80016de:	603b      	str	r3, [r7, #0]
                    if (beta <= alpha) {
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dd06      	ble.n	80016f6 <alphaBeta+0x18c>
            for (int col = 0; col < 3; col++) {
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	3301      	adds	r3, #1
 80016ec:	623b      	str	r3, [r7, #32]
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	ddb8      	ble.n	8001666 <alphaBeta+0xfc>
 80016f4:	e000      	b.n	80016f8 <alphaBeta+0x18e>
                        break;  // 剪枝
 80016f6:	bf00      	nop
        for (int row = 0; row < 3; row++) {
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	3301      	adds	r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	2b02      	cmp	r3, #2
 8001702:	ddad      	ble.n	8001660 <alphaBeta+0xf6>
                    }
                }
            }
        }
        return bestScore;
 8001704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
}
 8001706:	4618      	mov	r0, r3
 8001708:	3738      	adds	r7, #56	@ 0x38
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <findBestMove>:

// 找到最优的下一步
void findBestMove(int board[3][3], int *row, int *col, int cnt) {
 800170e:	b580      	push	{r7, lr}
 8001710:	b08a      	sub	sp, #40	@ 0x28
 8001712:	af02      	add	r7, sp, #8
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	603b      	str	r3, [r7, #0]
    int bestScore = INT_MIN;
 800171c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001720:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 3; i++) {
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	e049      	b.n	80017bc <findBestMove+0xae>
        for (int j = 0; j < 3; j++) {
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e040      	b.n	80017b0 <findBestMove+0xa2>
            if (board[i][j] == 0) {
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	461a      	mov	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4413      	add	r3, r2
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d130      	bne.n	80017aa <findBestMove+0x9c>
                board[i][j] = 1;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	2101      	movs	r1, #1
 800175c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                int score = alphaBeta(board, 1, INT_MIN, INT_MAX, 0, cnt);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	2300      	movs	r3, #0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800176c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001770:	2101      	movs	r1, #1
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f7ff fef9 	bl	800156a <alphaBeta>
 8001778:	6138      	str	r0, [r7, #16]
                board[i][j] = 0;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	461a      	mov	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4413      	add	r3, r2
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	2100      	movs	r1, #0
 800178e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                if (score > bestScore) {
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	429a      	cmp	r2, r3
 8001798:	dd07      	ble.n	80017aa <findBestMove+0x9c>
                    bestScore = score;
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	61fb      	str	r3, [r7, #28]
                    *row = i;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	601a      	str	r2, [r3, #0]
                    *col = j;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	ddbb      	ble.n	800172e <findBestMove+0x20>
    for (int i = 0; i < 3; i++) {
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	ddb2      	ble.n	8001728 <findBestMove+0x1a>
                }
            }
        }
    }
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <count>:
        }
        printf("\n");
    }
}

int count(int board[3][3]) {
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    int res = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 3; i++) {
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	e01b      	b.n	8001816 <count+0x4a>
        for (int j = 0; j < 3; j++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	e012      	b.n	800180a <count+0x3e>
            if (board[i][j] == 0) {
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <count+0x38>
                res++;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
        for (int j = 0; j < 3; j++) {
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3301      	adds	r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b02      	cmp	r3, #2
 800180e:	dde9      	ble.n	80017e4 <count+0x18>
    for (int i = 0; i < 3; i++) {
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	3301      	adds	r3, #1
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2b02      	cmp	r3, #2
 800181a:	dde0      	ble.n	80017de <count+0x12>
            }
        }
    }
    return res;
 800181c:	697b      	ldr	r3, [r7, #20]
}
 800181e:	4618      	mov	r0, r3
 8001820:	371c      	adds	r7, #28
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <Board_init>:
#define BLACK 1
#define WHITE 2
#endif

// 初始化 Board 结构体
void Board_init(Board *board, int player, int computer) {
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
    board->WAKE = (uint8_t)0x70;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2270      	movs	r2, #112	@ 0x70
 8001838:	775a      	strb	r2, [r3, #29]
    board->cnt = 0;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
    board->player = player;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	605a      	str	r2, [r3, #4]
    board->computer = computer;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
    board->turn = 1;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2201      	movs	r2, #1
 8001850:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 3; i++) {
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e022      	b.n	800189e <Board_init+0x76>
        for (int j = 0; j < 3; j++) {
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	e019      	b.n	8001892 <Board_init+0x6a>
            board->new_board[i][j] = 0;
 800185e:	68f9      	ldr	r1, [r7, #12]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4413      	add	r3, r2
 800186c:	3314      	adds	r3, #20
 800186e:	2200      	movs	r2, #0
 8001870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            board->old_board[i][j] = 0;
 8001874:	68f9      	ldr	r1, [r7, #12]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4413      	add	r3, r2
 8001882:	330a      	adds	r3, #10
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
        for (int j = 0; j < 3; j++) {
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	3301      	adds	r3, #1
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b02      	cmp	r3, #2
 8001896:	dde2      	ble.n	800185e <Board_init+0x36>
    for (int i = 0; i < 3; i++) {
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	ddd9      	ble.n	8001858 <Board_init+0x30>
        }
    }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <Board_next_turn>:
    board->player = player;
    board->computer = computer;
}

// 交换轮次
void Board_next_turn(Board *board) {
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    board->turn = 3 ^ board->turn;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f083 0203 	eor.w	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60da      	str	r2, [r3, #12]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <Board_update_board>:

// 更新棋盘
void Board_update_board(Board *board) {
 80018ce:	b480      	push	{r7}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e020      	b.n	800191e <Board_update_board+0x50>
        for (int j = 0; j < 3; j++) {
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	e017      	b.n	8001912 <Board_update_board+0x44>
            board->old_board[i][j] = board->new_board[i][j];
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	4413      	add	r3, r2
 80018f0:	3314      	adds	r3, #20
 80018f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	4413      	add	r3, r2
 8001904:	330a      	adds	r3, #10
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4403      	add	r3, r0
 800190a:	6059      	str	r1, [r3, #4]
        for (int j = 0; j < 3; j++) {
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	3301      	adds	r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b02      	cmp	r3, #2
 8001916:	dde4      	ble.n	80018e2 <Board_update_board+0x14>
    for (int i = 0; i < 3; i++) {
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	3301      	adds	r3, #1
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2b02      	cmp	r3, #2
 8001922:	dddb      	ble.n	80018dc <Board_update_board+0xe>
        }
    }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <Board_moveBoard>:

// 棋盘移动函数（需实现）
int Board_moveBoard(Board *board, int id, ROBOT_DATA *data) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
    // 实现棋盘移动逻辑
    if(board->turn == BLACK)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d104      	bne.n	800194e <Board_moveBoard+0x1e>
        Robot_move_point(data, 11);
 8001944:	210b      	movs	r1, #11
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff f984 	bl	8000c54 <Robot_move_point>
 800194c:	e003      	b.n	8001956 <Board_moveBoard+0x26>
    else
        Robot_move_point(data, 10);
 800194e:	210a      	movs	r1, #10
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff f97f 	bl	8000c54 <Robot_move_point>
    //吸
    Robot_move_point(data, id);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff f979 	bl	8000c54 <Robot_move_point>
    //放
    
    return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <Board_currentMove>:

// 当前移动函数（需实现）
int Board_currentMove(Board *board, int x, int y, ROBOT_DATA *data) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
    if (board->new_board[x / 3][x % 3] == 0) {
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	4a1b      	ldr	r2, [pc, #108]	@ (80019ec <Board_currentMove+0x80>)
 800197e:	fb82 1203 	smull	r1, r2, r2, r3
 8001982:	17db      	asrs	r3, r3, #31
 8001984:	1ad0      	subs	r0, r2, r3
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <Board_currentMove+0x80>)
 800198a:	fb83 3201 	smull	r3, r2, r3, r1
 800198e:	17cb      	asrs	r3, r1, #31
 8001990:	1ad2      	subs	r2, r2, r3
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	1aca      	subs	r2, r1, r3
 800199a:	68f9      	ldr	r1, [r7, #12]
 800199c:	4603      	mov	r3, r0
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4403      	add	r3, r0
 80019a2:	4413      	add	r3, r2
 80019a4:	3314      	adds	r3, #20
 80019a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <Board_currentMove+0x5c>
        // 先移动到y
        Robot_move_point(data, y);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4619      	mov	r1, r3
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f7ff f94d 	bl	8000c54 <Robot_move_point>
        //吸函数
        Robot_move_point(data, x);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	4619      	mov	r1, r3
 80019c0:	6838      	ldr	r0, [r7, #0]
 80019c2:	f7ff f947 	bl	8000c54 <Robot_move_point>
 80019c6:	e00b      	b.n	80019e0 <Board_currentMove+0x74>
        //放
    } else {
        // 先移动到x
        Robot_move_point(data, x);
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	4619      	mov	r1, r3
 80019ce:	6838      	ldr	r0, [r7, #0]
 80019d0:	f7ff f940 	bl	8000c54 <Robot_move_point>
        //吸函数
        Robot_move_point(data, y);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	6838      	ldr	r0, [r7, #0]
 80019dc:	f7ff f93a 	bl	8000c54 <Robot_move_point>
        //放
    }
    return 0;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	55555556 	.word	0x55555556

080019f0 <Board_check>:

// 检查棋盘是否改变
int Board_check(Board *board, int *x, int *y) {
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
    int cnt = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 3; i++) {
 8001a00:	2300      	movs	r3, #0
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	e047      	b.n	8001a96 <Board_check+0xa6>
        for (int j = 0; j < 3; j++) {
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e03e      	b.n	8001a8a <Board_check+0x9a>
            if (board->old_board[i][j] && board->old_board[i][j] != board->new_board[i][j]) {
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4413      	add	r3, r2
 8001a1a:	330a      	adds	r3, #10
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d02e      	beq.n	8001a84 <Board_check+0x94>
 8001a26:	68f9      	ldr	r1, [r7, #12]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4413      	add	r3, r2
 8001a34:	330a      	adds	r3, #10
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4413      	add	r3, r2
 8001a4a:	3314      	adds	r3, #20
 8001a4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001a50:	4299      	cmp	r1, r3
 8001a52:	d017      	beq.n	8001a84 <Board_check+0x94>
                if (cnt++) {
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	61fa      	str	r2, [r7, #28]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <Board_check+0x82>
                    *y = i * 3 + j + 1;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	441a      	add	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	4413      	add	r3, r2
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e008      	b.n	8001a84 <Board_check+0x94>
                } else {
                    *x = i * 3 + j + 1;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	441a      	add	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	ddbd      	ble.n	8001a0c <Board_check+0x1c>
    for (int i = 0; i < 3; i++) {
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	3301      	adds	r3, #1
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	ddb4      	ble.n	8001a06 <Board_check+0x16>
                }
            }
        }
    }
    return cnt;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	@ 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <Board_receiveBoard>:

// 接收棋盘数据
void Board_receiveBoard(Board *board, UART_HandleTypeDef *huart, ROBOT_DATA *data) {
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
    board->send = (uint8_t)0xB1;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	22b1      	movs	r2, #177	@ 0xb1
 8001ab8:	779a      	strb	r2, [r3, #30]
    HAL_UART_Transmit_DMA(huart, &board->send, 1);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	331e      	adds	r3, #30
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	68b8      	ldr	r0, [r7, #8]
 8001ac4:	f002 fa88 	bl	8003fd8 <HAL_UART_Transmit_DMA>
    HAL_UART_Receive_DMA(huart, board->buffer, 10);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	331f      	adds	r3, #31
 8001acc:	220a      	movs	r2, #10
 8001ace:	4619      	mov	r1, r3
 8001ad0:	68b8      	ldr	r0, [r7, #8]
 8001ad2:	f002 faf1 	bl	80040b8 <HAL_UART_Receive_DMA>
    for (int i = 0; i < 9; i++) {
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e01f      	b.n	8001b1c <Board_receiveBoard+0x74>
        board->new_board[i / 3][i % 3] = board->buffer[i];
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	331f      	adds	r3, #31
 8001ae4:	781c      	ldrb	r4, [r3, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b60 <Board_receiveBoard+0xb8>)
 8001aea:	fb82 1203 	smull	r1, r2, r2, r3
 8001aee:	17db      	asrs	r3, r3, #31
 8001af0:	1ad0      	subs	r0, r2, r3
 8001af2:	6979      	ldr	r1, [r7, #20]
 8001af4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <Board_receiveBoard+0xb8>)
 8001af6:	fb83 3201 	smull	r3, r2, r3, r1
 8001afa:	17cb      	asrs	r3, r1, #31
 8001afc:	1ad2      	subs	r2, r2, r3
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	1aca      	subs	r2, r1, r3
 8001b06:	68f9      	ldr	r1, [r7, #12]
 8001b08:	4603      	mov	r3, r0
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4403      	add	r3, r0
 8001b0e:	4413      	add	r3, r2
 8001b10:	3314      	adds	r3, #20
 8001b12:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
    for (int i = 0; i < 9; i++) {
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	dddc      	ble.n	8001adc <Board_receiveBoard+0x34>
    }
    if (Board_check(board, &board->id1, &board->id2) == 2) {
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f103 0114 	add.w	r1, r3, #20
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3318      	adds	r3, #24
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f7ff ff5e 	bl	80019f0 <Board_check>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d10a      	bne.n	8001b50 <Board_receiveBoard+0xa8>
        Board_currentMove(board, board->id1, board->id2, data);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6959      	ldr	r1, [r3, #20]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff ff11 	bl	800196c <Board_currentMove>
        Board_next_turn(board);
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff feb0 	bl	80018b0 <Board_next_turn>
    }
    Board_update_board(board);
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f7ff febc 	bl	80018ce <Board_update_board>
}
 8001b56:	bf00      	nop
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd90      	pop	{r4, r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	55555556 	.word	0x55555556

08001b64 <Board_play>:


// 游戏主循环
int Board_play(Board *board, UART_HandleTypeDef *huart, ROBOT_DATA *data) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
    while (board->cnt < 9 && !(board->end = evaluate(board->new_board))) {
 8001b70:	e04a      	b.n	8001c08 <Board_play+0xa4>
        if (board->turn == board->player) {
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d10d      	bne.n	8001b9a <Board_play+0x36>
            do {
                HAL_UART_Receive_DMA(huart, &board->recv, 1);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	331c      	adds	r3, #28
 8001b82:	2201      	movs	r2, #1
 8001b84:	4619      	mov	r1, r3
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	f002 fa96 	bl	80040b8 <HAL_UART_Receive_DMA>
            } while (board->recv != board->WAKE);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	7f1a      	ldrb	r2, [r3, #28]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	7f5b      	ldrb	r3, [r3, #29]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1f2      	bne.n	8001b7e <Board_play+0x1a>
 8001b98:	e026      	b.n	8001be8 <Board_play+0x84>
        } else {
            if (board->cnt == 0) {
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <Board_play+0x4a>
                Board_moveBoard(board, 5, data);
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff fec2 	bl	8001930 <Board_moveBoard>
 8001bac:	e01c      	b.n	8001be8 <Board_play+0x84>
            } else {
                findBestMove(board->new_board, &board->id1, &board->id2, 9-board->cnt);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f103 0114 	add.w	r1, r3, #20
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f103 0218 	add.w	r2, r3, #24
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1c3 0309 	rsb	r3, r3, #9
 8001bc8:	f7ff fda1 	bl	800170e <findBestMove>
                Board_moveBoard(board, board->id1 * 3 + board->id2 + 1, data);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	441a      	add	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	4413      	add	r3, r2
 8001bdc:	3301      	adds	r3, #1
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4619      	mov	r1, r3
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f7ff fea4 	bl	8001930 <Board_moveBoard>
            }
        }
        Board_receiveBoard(board, huart, data);
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f7ff ff5b 	bl	8001aa8 <Board_receiveBoard>
        board->cnt=count(board->new_board);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3350      	adds	r3, #80	@ 0x50
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fde8 	bl	80017cc <count>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	601a      	str	r2, [r3, #0]
        Board_next_turn(board);
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7ff fe54 	bl	80018b0 <Board_next_turn>
    while (board->cnt < 9 && !(board->end = evaluate(board->new_board))) {
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	dc0b      	bgt.n	8001c28 <Board_play+0xc4>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3350      	adds	r3, #80	@ 0x50
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fbe9 	bl	80013ec <evaluate>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0a4      	beq.n	8001b72 <Board_play+0xe>
    }
    return board->end;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	691b      	ldr	r3, [r3, #16]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_Init+0x28>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	@ (8001c5c <HAL_Init+0x28>)
 8001c3e:	f043 0310 	orr.w	r3, r3, #16
 8001c42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c44:	2003      	movs	r0, #3
 8001c46:	f000 f947 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 f808 	bl	8001c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c50:	f7fe fb58 	bl	8000304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40022000 	.word	0x40022000

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <HAL_InitTick+0x54>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_InitTick+0x58>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f95f 	bl	8001f42 <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00e      	b.n	8001cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d80a      	bhi.n	8001caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f000 f927 	bl	8001eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca0:	4a06      	ldr	r2, [pc, #24]	@ (8001cbc <HAL_InitTick+0x5c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_IncTick+0x1c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <HAL_IncTick+0x20>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a03      	ldr	r2, [pc, #12]	@ (8001ce0 <HAL_IncTick+0x20>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	20000364 	.word	0x20000364

08001ce4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b02      	ldr	r3, [pc, #8]	@ (8001cf4 <HAL_GetTick+0x10>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	20000364 	.word	0x20000364

08001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff fff0 	bl	8001ce4 <HAL_GetTick>
 8001d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d005      	beq.n	8001d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_Delay+0x44>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1e:	bf00      	nop
 8001d20:	f7ff ffe0 	bl	8001ce4 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8f7      	bhi.n	8001d20 <HAL_Delay+0x28>
  {
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d72:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	60d3      	str	r3, [r2, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4906      	ldr	r1, [pc, #24]	@ (8001dd8 <__NVIC_EnableIRQ+0x34>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db0a      	blt.n	8001e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	490c      	ldr	r1, [pc, #48]	@ (8001e28 <__NVIC_SetPriority+0x4c>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e04:	e00a      	b.n	8001e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4908      	ldr	r1, [pc, #32]	@ (8001e2c <__NVIC_SetPriority+0x50>)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3b04      	subs	r3, #4
 8001e14:	0112      	lsls	r2, r2, #4
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	761a      	strb	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	@ 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f1c3 0307 	rsb	r3, r3, #7
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	bf28      	it	cs
 8001e4e:	2304      	movcs	r3, #4
 8001e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d902      	bls.n	8001e60 <NVIC_EncodePriority+0x30>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3b03      	subs	r3, #3
 8001e5e:	e000      	b.n	8001e62 <NVIC_EncodePriority+0x32>
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	401a      	ands	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43d9      	mvns	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	4313      	orrs	r3, r2
         );
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	@ 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ea4:	d301      	bcc.n	8001eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00f      	b.n	8001eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <SysTick_Config+0x40>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f7ff ff90 	bl	8001ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <SysTick_Config+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <SysTick_Config+0x40>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff2d 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f00:	f7ff ff42 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f7ff ff90 	bl	8001e30 <NVIC_EncodePriority>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff5f 	bl	8001ddc <__NVIC_SetPriority>
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff35 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ffa2 	bl	8001e94 <SysTick_Config>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e043      	b.n	8001ffa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b22      	ldr	r3, [pc, #136]	@ (8002004 <HAL_DMA_Init+0xa8>)
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a22      	ldr	r2, [pc, #136]	@ (8002008 <HAL_DMA_Init+0xac>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	009a      	lsls	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800200c <HAL_DMA_Init+0xb0>)
 8001f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001fa6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001faa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	bffdfff8 	.word	0xbffdfff8
 8002008:	cccccccd 	.word	0xcccccccd
 800200c:	40020000 	.word	0x40020000

08002010 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_DMA_Start_IT+0x20>
 800202c:	2302      	movs	r3, #2
 800202e:	e04b      	b.n	80020c8 <HAL_DMA_Start_IT+0xb8>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d13a      	bne.n	80020ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0201 	bic.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f9eb 	bl	8002444 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 020e 	orr.w	r2, r2, #14
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e00f      	b.n	80020a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0204 	bic.w	r2, r2, #4
 8002096:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 020a 	orr.w	r2, r2, #10
 80020a6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e005      	b.n	80020c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
 80020c4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d008      	beq.n	80020fa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2204      	movs	r2, #4
 80020ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e020      	b.n	800213c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 020e 	bic.w	r2, r2, #14
 8002108:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0201 	bic.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
	...

08002148 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d005      	beq.n	800216c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2204      	movs	r2, #4
 8002164:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
 800216a:	e051      	b.n	8002210 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 020e 	bic.w	r2, r2, #14
 800217a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a22      	ldr	r2, [pc, #136]	@ (800221c <HAL_DMA_Abort_IT+0xd4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d029      	beq.n	80021ea <HAL_DMA_Abort_IT+0xa2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a21      	ldr	r2, [pc, #132]	@ (8002220 <HAL_DMA_Abort_IT+0xd8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <HAL_DMA_Abort_IT+0x9e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002224 <HAL_DMA_Abort_IT+0xdc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01a      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x98>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002228 <HAL_DMA_Abort_IT+0xe0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d012      	beq.n	80021da <HAL_DMA_Abort_IT+0x92>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <HAL_DMA_Abort_IT+0xe4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00a      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x8c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002230 <HAL_DMA_Abort_IT+0xe8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d102      	bne.n	80021ce <HAL_DMA_Abort_IT+0x86>
 80021c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021cc:	e00e      	b.n	80021ec <HAL_DMA_Abort_IT+0xa4>
 80021ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021d2:	e00b      	b.n	80021ec <HAL_DMA_Abort_IT+0xa4>
 80021d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021d8:	e008      	b.n	80021ec <HAL_DMA_Abort_IT+0xa4>
 80021da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021de:	e005      	b.n	80021ec <HAL_DMA_Abort_IT+0xa4>
 80021e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021e4:	e002      	b.n	80021ec <HAL_DMA_Abort_IT+0xa4>
 80021e6:	2310      	movs	r3, #16
 80021e8:	e000      	b.n	80021ec <HAL_DMA_Abort_IT+0xa4>
 80021ea:	2301      	movs	r3, #1
 80021ec:	4a11      	ldr	r2, [pc, #68]	@ (8002234 <HAL_DMA_Abort_IT+0xec>)
 80021ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
    } 
  }
  return status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40020008 	.word	0x40020008
 8002220:	4002001c 	.word	0x4002001c
 8002224:	40020030 	.word	0x40020030
 8002228:	40020044 	.word	0x40020044
 800222c:	40020058 	.word	0x40020058
 8002230:	4002006c 	.word	0x4002006c
 8002234:	40020000 	.word	0x40020000

08002238 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002254:	2204      	movs	r2, #4
 8002256:	409a      	lsls	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d04f      	beq.n	8002300 <HAL_DMA_IRQHandler+0xc8>
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d04a      	beq.n	8002300 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d107      	bne.n	8002288 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0204 	bic.w	r2, r2, #4
 8002286:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a66      	ldr	r2, [pc, #408]	@ (8002428 <HAL_DMA_IRQHandler+0x1f0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d029      	beq.n	80022e6 <HAL_DMA_IRQHandler+0xae>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a65      	ldr	r2, [pc, #404]	@ (800242c <HAL_DMA_IRQHandler+0x1f4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d022      	beq.n	80022e2 <HAL_DMA_IRQHandler+0xaa>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a63      	ldr	r2, [pc, #396]	@ (8002430 <HAL_DMA_IRQHandler+0x1f8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01a      	beq.n	80022dc <HAL_DMA_IRQHandler+0xa4>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a62      	ldr	r2, [pc, #392]	@ (8002434 <HAL_DMA_IRQHandler+0x1fc>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d012      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x9e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a60      	ldr	r2, [pc, #384]	@ (8002438 <HAL_DMA_IRQHandler+0x200>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00a      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x98>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a5f      	ldr	r2, [pc, #380]	@ (800243c <HAL_DMA_IRQHandler+0x204>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d102      	bne.n	80022ca <HAL_DMA_IRQHandler+0x92>
 80022c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022c8:	e00e      	b.n	80022e8 <HAL_DMA_IRQHandler+0xb0>
 80022ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80022ce:	e00b      	b.n	80022e8 <HAL_DMA_IRQHandler+0xb0>
 80022d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80022d4:	e008      	b.n	80022e8 <HAL_DMA_IRQHandler+0xb0>
 80022d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022da:	e005      	b.n	80022e8 <HAL_DMA_IRQHandler+0xb0>
 80022dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022e0:	e002      	b.n	80022e8 <HAL_DMA_IRQHandler+0xb0>
 80022e2:	2340      	movs	r3, #64	@ 0x40
 80022e4:	e000      	b.n	80022e8 <HAL_DMA_IRQHandler+0xb0>
 80022e6:	2304      	movs	r3, #4
 80022e8:	4a55      	ldr	r2, [pc, #340]	@ (8002440 <HAL_DMA_IRQHandler+0x208>)
 80022ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8094 	beq.w	800241e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022fe:	e08e      	b.n	800241e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	2202      	movs	r2, #2
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d056      	beq.n	80023be <HAL_DMA_IRQHandler+0x186>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d051      	beq.n	80023be <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10b      	bne.n	8002340 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 020a 	bic.w	r2, r2, #10
 8002336:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a38      	ldr	r2, [pc, #224]	@ (8002428 <HAL_DMA_IRQHandler+0x1f0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d029      	beq.n	800239e <HAL_DMA_IRQHandler+0x166>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a37      	ldr	r2, [pc, #220]	@ (800242c <HAL_DMA_IRQHandler+0x1f4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d022      	beq.n	800239a <HAL_DMA_IRQHandler+0x162>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a35      	ldr	r2, [pc, #212]	@ (8002430 <HAL_DMA_IRQHandler+0x1f8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01a      	beq.n	8002394 <HAL_DMA_IRQHandler+0x15c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a34      	ldr	r2, [pc, #208]	@ (8002434 <HAL_DMA_IRQHandler+0x1fc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d012      	beq.n	800238e <HAL_DMA_IRQHandler+0x156>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a32      	ldr	r2, [pc, #200]	@ (8002438 <HAL_DMA_IRQHandler+0x200>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00a      	beq.n	8002388 <HAL_DMA_IRQHandler+0x150>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a31      	ldr	r2, [pc, #196]	@ (800243c <HAL_DMA_IRQHandler+0x204>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d102      	bne.n	8002382 <HAL_DMA_IRQHandler+0x14a>
 800237c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002380:	e00e      	b.n	80023a0 <HAL_DMA_IRQHandler+0x168>
 8002382:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002386:	e00b      	b.n	80023a0 <HAL_DMA_IRQHandler+0x168>
 8002388:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800238c:	e008      	b.n	80023a0 <HAL_DMA_IRQHandler+0x168>
 800238e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002392:	e005      	b.n	80023a0 <HAL_DMA_IRQHandler+0x168>
 8002394:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002398:	e002      	b.n	80023a0 <HAL_DMA_IRQHandler+0x168>
 800239a:	2320      	movs	r3, #32
 800239c:	e000      	b.n	80023a0 <HAL_DMA_IRQHandler+0x168>
 800239e:	2302      	movs	r3, #2
 80023a0:	4a27      	ldr	r2, [pc, #156]	@ (8002440 <HAL_DMA_IRQHandler+0x208>)
 80023a2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d034      	beq.n	800241e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023bc:	e02f      	b.n	800241e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	2208      	movs	r2, #8
 80023c4:	409a      	lsls	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d028      	beq.n	8002420 <HAL_DMA_IRQHandler+0x1e8>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d023      	beq.n	8002420 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 020e 	bic.w	r2, r2, #14
 80023e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f202 	lsl.w	r2, r1, r2
 80023f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	4798      	blx	r3
    }
  }
  return;
 800241e:	bf00      	nop
 8002420:	bf00      	nop
}
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40020008 	.word	0x40020008
 800242c:	4002001c 	.word	0x4002001c
 8002430:	40020030 	.word	0x40020030
 8002434:	40020044 	.word	0x40020044
 8002438:	40020058 	.word	0x40020058
 800243c:	4002006c 	.word	0x4002006c
 8002440:	40020000 	.word	0x40020000

08002444 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245a:	2101      	movs	r1, #1
 800245c:	fa01 f202 	lsl.w	r2, r1, r2
 8002460:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b10      	cmp	r3, #16
 8002470:	d108      	bne.n	8002484 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002482:	e007      	b.n	8002494 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	60da      	str	r2, [r3, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b08b      	sub	sp, #44	@ 0x2c
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b2:	e169      	b.n	8002788 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024b4:	2201      	movs	r2, #1
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	f040 8158 	bne.w	8002782 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a9a      	ldr	r2, [pc, #616]	@ (8002740 <HAL_GPIO_Init+0x2a0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d05e      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 80024dc:	4a98      	ldr	r2, [pc, #608]	@ (8002740 <HAL_GPIO_Init+0x2a0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d875      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 80024e2:	4a98      	ldr	r2, [pc, #608]	@ (8002744 <HAL_GPIO_Init+0x2a4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d058      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 80024e8:	4a96      	ldr	r2, [pc, #600]	@ (8002744 <HAL_GPIO_Init+0x2a4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d86f      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 80024ee:	4a96      	ldr	r2, [pc, #600]	@ (8002748 <HAL_GPIO_Init+0x2a8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d052      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 80024f4:	4a94      	ldr	r2, [pc, #592]	@ (8002748 <HAL_GPIO_Init+0x2a8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d869      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 80024fa:	4a94      	ldr	r2, [pc, #592]	@ (800274c <HAL_GPIO_Init+0x2ac>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d04c      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 8002500:	4a92      	ldr	r2, [pc, #584]	@ (800274c <HAL_GPIO_Init+0x2ac>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d863      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 8002506:	4a92      	ldr	r2, [pc, #584]	@ (8002750 <HAL_GPIO_Init+0x2b0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d046      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 800250c:	4a90      	ldr	r2, [pc, #576]	@ (8002750 <HAL_GPIO_Init+0x2b0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d85d      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 8002512:	2b12      	cmp	r3, #18
 8002514:	d82a      	bhi.n	800256c <HAL_GPIO_Init+0xcc>
 8002516:	2b12      	cmp	r3, #18
 8002518:	d859      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 800251a:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <HAL_GPIO_Init+0x80>)
 800251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002520:	0800259b 	.word	0x0800259b
 8002524:	08002575 	.word	0x08002575
 8002528:	08002587 	.word	0x08002587
 800252c:	080025c9 	.word	0x080025c9
 8002530:	080025cf 	.word	0x080025cf
 8002534:	080025cf 	.word	0x080025cf
 8002538:	080025cf 	.word	0x080025cf
 800253c:	080025cf 	.word	0x080025cf
 8002540:	080025cf 	.word	0x080025cf
 8002544:	080025cf 	.word	0x080025cf
 8002548:	080025cf 	.word	0x080025cf
 800254c:	080025cf 	.word	0x080025cf
 8002550:	080025cf 	.word	0x080025cf
 8002554:	080025cf 	.word	0x080025cf
 8002558:	080025cf 	.word	0x080025cf
 800255c:	080025cf 	.word	0x080025cf
 8002560:	080025cf 	.word	0x080025cf
 8002564:	0800257d 	.word	0x0800257d
 8002568:	08002591 	.word	0x08002591
 800256c:	4a79      	ldr	r2, [pc, #484]	@ (8002754 <HAL_GPIO_Init+0x2b4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002572:	e02c      	b.n	80025ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	623b      	str	r3, [r7, #32]
          break;
 800257a:	e029      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	3304      	adds	r3, #4
 8002582:	623b      	str	r3, [r7, #32]
          break;
 8002584:	e024      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	3308      	adds	r3, #8
 800258c:	623b      	str	r3, [r7, #32]
          break;
 800258e:	e01f      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	330c      	adds	r3, #12
 8002596:	623b      	str	r3, [r7, #32]
          break;
 8002598:	e01a      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025a2:	2304      	movs	r3, #4
 80025a4:	623b      	str	r3, [r7, #32]
          break;
 80025a6:	e013      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b0:	2308      	movs	r3, #8
 80025b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	611a      	str	r2, [r3, #16]
          break;
 80025ba:	e009      	b.n	80025d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025bc:	2308      	movs	r3, #8
 80025be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	615a      	str	r2, [r3, #20]
          break;
 80025c6:	e003      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
          break;
 80025cc:	e000      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          break;
 80025ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2bff      	cmp	r3, #255	@ 0xff
 80025d4:	d801      	bhi.n	80025da <HAL_GPIO_Init+0x13a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	e001      	b.n	80025de <HAL_GPIO_Init+0x13e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3304      	adds	r3, #4
 80025de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2bff      	cmp	r3, #255	@ 0xff
 80025e4:	d802      	bhi.n	80025ec <HAL_GPIO_Init+0x14c>
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	e002      	b.n	80025f2 <HAL_GPIO_Init+0x152>
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	3b08      	subs	r3, #8
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	210f      	movs	r1, #15
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	401a      	ands	r2, r3
 8002604:	6a39      	ldr	r1, [r7, #32]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	431a      	orrs	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80b1 	beq.w	8002782 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002620:	4b4d      	ldr	r3, [pc, #308]	@ (8002758 <HAL_GPIO_Init+0x2b8>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	4a4c      	ldr	r2, [pc, #304]	@ (8002758 <HAL_GPIO_Init+0x2b8>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6193      	str	r3, [r2, #24]
 800262c:	4b4a      	ldr	r3, [pc, #296]	@ (8002758 <HAL_GPIO_Init+0x2b8>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002638:	4a48      	ldr	r2, [pc, #288]	@ (800275c <HAL_GPIO_Init+0x2bc>)
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3302      	adds	r3, #2
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4013      	ands	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a40      	ldr	r2, [pc, #256]	@ (8002760 <HAL_GPIO_Init+0x2c0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d013      	beq.n	800268c <HAL_GPIO_Init+0x1ec>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a3f      	ldr	r2, [pc, #252]	@ (8002764 <HAL_GPIO_Init+0x2c4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00d      	beq.n	8002688 <HAL_GPIO_Init+0x1e8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a3e      	ldr	r2, [pc, #248]	@ (8002768 <HAL_GPIO_Init+0x2c8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d007      	beq.n	8002684 <HAL_GPIO_Init+0x1e4>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a3d      	ldr	r2, [pc, #244]	@ (800276c <HAL_GPIO_Init+0x2cc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_GPIO_Init+0x1e0>
 800267c:	2303      	movs	r3, #3
 800267e:	e006      	b.n	800268e <HAL_GPIO_Init+0x1ee>
 8002680:	2304      	movs	r3, #4
 8002682:	e004      	b.n	800268e <HAL_GPIO_Init+0x1ee>
 8002684:	2302      	movs	r3, #2
 8002686:	e002      	b.n	800268e <HAL_GPIO_Init+0x1ee>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_GPIO_Init+0x1ee>
 800268c:	2300      	movs	r3, #0
 800268e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002690:	f002 0203 	and.w	r2, r2, #3
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	4093      	lsls	r3, r2
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800269e:	492f      	ldr	r1, [pc, #188]	@ (800275c <HAL_GPIO_Init+0x2bc>)
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3302      	adds	r3, #2
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d006      	beq.n	80026c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	492c      	ldr	r1, [pc, #176]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]
 80026c4:	e006      	b.n	80026d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	4928      	ldr	r1, [pc, #160]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026e0:	4b23      	ldr	r3, [pc, #140]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	4922      	ldr	r1, [pc, #136]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60cb      	str	r3, [r1, #12]
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026ee:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	491e      	ldr	r1, [pc, #120]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002708:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	4918      	ldr	r1, [pc, #96]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002716:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	43db      	mvns	r3, r3
 800271e:	4914      	ldr	r1, [pc, #80]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 8002720:	4013      	ands	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d021      	beq.n	8002774 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002730:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	490e      	ldr	r1, [pc, #56]	@ (8002770 <HAL_GPIO_Init+0x2d0>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]
 800273c:	e021      	b.n	8002782 <HAL_GPIO_Init+0x2e2>
 800273e:	bf00      	nop
 8002740:	10320000 	.word	0x10320000
 8002744:	10310000 	.word	0x10310000
 8002748:	10220000 	.word	0x10220000
 800274c:	10210000 	.word	0x10210000
 8002750:	10120000 	.word	0x10120000
 8002754:	10110000 	.word	0x10110000
 8002758:	40021000 	.word	0x40021000
 800275c:	40010000 	.word	0x40010000
 8002760:	40010800 	.word	0x40010800
 8002764:	40010c00 	.word	0x40010c00
 8002768:	40011000 	.word	0x40011000
 800276c:	40011400 	.word	0x40011400
 8002770:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_GPIO_Init+0x304>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	43db      	mvns	r3, r3
 800277c:	4909      	ldr	r1, [pc, #36]	@ (80027a4 <HAL_GPIO_Init+0x304>)
 800277e:	4013      	ands	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	3301      	adds	r3, #1
 8002786:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	f47f ae8e 	bne.w	80024b4 <HAL_GPIO_Init+0x14>
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	372c      	adds	r7, #44	@ 0x2c
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40010400 	.word	0x40010400

080027a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
 80027b4:	4613      	mov	r3, r2
 80027b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027b8:	787b      	ldrb	r3, [r7, #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027c4:	e003      	b.n	80027ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	041a      	lsls	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	611a      	str	r2, [r3, #16]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e272      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8087 	beq.w	8002906 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f8:	4b92      	ldr	r3, [pc, #584]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b04      	cmp	r3, #4
 8002802:	d00c      	beq.n	800281e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002804:	4b8f      	ldr	r3, [pc, #572]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b08      	cmp	r3, #8
 800280e:	d112      	bne.n	8002836 <HAL_RCC_OscConfig+0x5e>
 8002810:	4b8c      	ldr	r3, [pc, #560]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800281c:	d10b      	bne.n	8002836 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281e:	4b89      	ldr	r3, [pc, #548]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d06c      	beq.n	8002904 <HAL_RCC_OscConfig+0x12c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d168      	bne.n	8002904 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e24c      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x76>
 8002840:	4b80      	ldr	r3, [pc, #512]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a7f      	ldr	r2, [pc, #508]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	e02e      	b.n	80028ac <HAL_RCC_OscConfig+0xd4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x98>
 8002856:	4b7b      	ldr	r3, [pc, #492]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a7a      	ldr	r2, [pc, #488]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800285c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b78      	ldr	r3, [pc, #480]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a77      	ldr	r2, [pc, #476]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002868:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e01d      	b.n	80028ac <HAL_RCC_OscConfig+0xd4>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0xbc>
 800287a:	4b72      	ldr	r3, [pc, #456]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a71      	ldr	r2, [pc, #452]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b6f      	ldr	r3, [pc, #444]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0xd4>
 8002894:	4b6b      	ldr	r3, [pc, #428]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a6a      	ldr	r2, [pc, #424]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b68      	ldr	r3, [pc, #416]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a67      	ldr	r2, [pc, #412]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7ff fa16 	bl	8001ce4 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff fa12 	bl	8001ce4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	@ 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e200      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0xe4>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7ff fa02 	bl	8001ce4 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7ff f9fe 	bl	8001ce4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	@ 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e1ec      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f6:	4b53      	ldr	r3, [pc, #332]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x10c>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d063      	beq.n	80029da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002912:	4b4c      	ldr	r3, [pc, #304]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800291e:	4b49      	ldr	r3, [pc, #292]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b08      	cmp	r3, #8
 8002928:	d11c      	bne.n	8002964 <HAL_RCC_OscConfig+0x18c>
 800292a:	4b46      	ldr	r3, [pc, #280]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d116      	bne.n	8002964 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	4b43      	ldr	r3, [pc, #268]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_RCC_OscConfig+0x176>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d001      	beq.n	800294e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e1c0      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4939      	ldr	r1, [pc, #228]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	e03a      	b.n	80029da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800296c:	4b36      	ldr	r3, [pc, #216]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002972:	f7ff f9b7 	bl	8001ce4 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297a:	f7ff f9b3 	bl	8001ce4 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e1a1      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002998:	4b2a      	ldr	r3, [pc, #168]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4927      	ldr	r1, [pc, #156]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	600b      	str	r3, [r1, #0]
 80029ac:	e015      	b.n	80029da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ae:	4b26      	ldr	r3, [pc, #152]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff f996 	bl	8001ce4 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029bc:	f7ff f992 	bl	8001ce4 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e180      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d03a      	beq.n	8002a5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d019      	beq.n	8002a22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ee:	4b17      	ldr	r3, [pc, #92]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f4:	f7ff f976 	bl	8001ce4 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fc:	f7ff f972 	bl	8001ce4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e160      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f000 face 	bl	8002fbc <RCC_Delay>
 8002a20:	e01c      	b.n	8002a5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a28:	f7ff f95c 	bl	8001ce4 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2e:	e00f      	b.n	8002a50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a30:	f7ff f958 	bl	8001ce4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d908      	bls.n	8002a50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e146      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	42420000 	.word	0x42420000
 8002a4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a50:	4b92      	ldr	r3, [pc, #584]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e9      	bne.n	8002a30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80a6 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b88      	ldr	r3, [pc, #544]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4a87      	ldr	r2, [pc, #540]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a84:	61d3      	str	r3, [r2, #28]
 8002a86:	4b85      	ldr	r3, [pc, #532]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b82      	ldr	r3, [pc, #520]	@ (8002ca0 <HAL_RCC_OscConfig+0x4c8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca0 <HAL_RCC_OscConfig+0x4c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ca0 <HAL_RCC_OscConfig+0x4c8>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7ff f919 	bl	8001ce4 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7ff f915 	bl	8001ce4 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	@ 0x64
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e103      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b75      	ldr	r3, [pc, #468]	@ (8002ca0 <HAL_RCC_OscConfig+0x4c8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x312>
 8002adc:	4b6f      	ldr	r3, [pc, #444]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a6e      	ldr	r2, [pc, #440]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6213      	str	r3, [r2, #32]
 8002ae8:	e02d      	b.n	8002b46 <HAL_RCC_OscConfig+0x36e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x334>
 8002af2:	4b6a      	ldr	r3, [pc, #424]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4a69      	ldr	r2, [pc, #420]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6213      	str	r3, [r2, #32]
 8002afe:	4b67      	ldr	r3, [pc, #412]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4a66      	ldr	r2, [pc, #408]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	6213      	str	r3, [r2, #32]
 8002b0a:	e01c      	b.n	8002b46 <HAL_RCC_OscConfig+0x36e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d10c      	bne.n	8002b2e <HAL_RCC_OscConfig+0x356>
 8002b14:	4b61      	ldr	r3, [pc, #388]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4a60      	ldr	r2, [pc, #384]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6213      	str	r3, [r2, #32]
 8002b20:	4b5e      	ldr	r3, [pc, #376]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4a5d      	ldr	r2, [pc, #372]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6213      	str	r3, [r2, #32]
 8002b2c:	e00b      	b.n	8002b46 <HAL_RCC_OscConfig+0x36e>
 8002b2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a5a      	ldr	r2, [pc, #360]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	4b58      	ldr	r3, [pc, #352]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4a57      	ldr	r2, [pc, #348]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d015      	beq.n	8002b7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7ff f8c9 	bl	8001ce4 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7ff f8c5 	bl	8001ce4 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0b1      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ee      	beq.n	8002b56 <HAL_RCC_OscConfig+0x37e>
 8002b78:	e014      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7a:	f7ff f8b3 	bl	8001ce4 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7ff f8af 	bl	8001ce4 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e09b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	4b40      	ldr	r3, [pc, #256]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ee      	bne.n	8002b82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d105      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4b3c      	ldr	r3, [pc, #240]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4a3b      	ldr	r2, [pc, #236]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8087 	beq.w	8002cce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc0:	4b36      	ldr	r3, [pc, #216]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d061      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d146      	bne.n	8002c62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd4:	4b33      	ldr	r3, [pc, #204]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7ff f883 	bl	8001ce4 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be2:	f7ff f87f 	bl	8001ce4 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e06d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf4:	4b29      	ldr	r3, [pc, #164]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c08:	d108      	bne.n	8002c1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c0a:	4b24      	ldr	r3, [pc, #144]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4921      	ldr	r1, [pc, #132]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a19      	ldr	r1, [r3, #32]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	491b      	ldr	r1, [pc, #108]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7ff f853 	bl	8001ce4 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c42:	f7ff f84f 	bl	8001ce4 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e03d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c54:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x46a>
 8002c60:	e035      	b.n	8002cce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b10      	ldr	r3, [pc, #64]	@ (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff f83c 	bl	8001ce4 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7ff f838 	bl	8001ce4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e026      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c82:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x498>
 8002c8e:	e01e      	b.n	8002cce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d107      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e019      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_RCC_OscConfig+0x500>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000

08002cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0d0      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d910      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b67      	ldr	r3, [pc, #412]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 0207 	bic.w	r2, r3, #7
 8002d06:	4965      	ldr	r1, [pc, #404]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b63      	ldr	r3, [pc, #396]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0b8      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d38:	4b59      	ldr	r3, [pc, #356]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a58      	ldr	r2, [pc, #352]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d50:	4b53      	ldr	r3, [pc, #332]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a52      	ldr	r2, [pc, #328]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b50      	ldr	r3, [pc, #320]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	494d      	ldr	r1, [pc, #308]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d040      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b47      	ldr	r3, [pc, #284]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d115      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e07f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e073      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e06b      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b39      	ldr	r3, [pc, #228]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4936      	ldr	r1, [pc, #216]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7fe ff8a 	bl	8001ce4 <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7fe ff86 	bl	8001ce4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e053      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b27      	ldr	r3, [pc, #156]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d210      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b24      	ldr	r3, [pc, #144]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 0207 	bic.w	r2, r3, #7
 8002e12:	4922      	ldr	r1, [pc, #136]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e032      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e38:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4916      	ldr	r1, [pc, #88]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e56:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	490e      	ldr	r1, [pc, #56]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e6a:	f000 f821 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	490a      	ldr	r1, [pc, #40]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7c:	5ccb      	ldrb	r3, [r1, r3]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	4a09      	ldr	r2, [pc, #36]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8002e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e86:	4b09      	ldr	r3, [pc, #36]	@ (8002eac <HAL_RCC_ClockConfig+0x1d0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fee8 	bl	8001c60 <HAL_InitTick>

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40022000 	.word	0x40022000
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08005058 	.word	0x08005058
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eca:	4b1e      	ldr	r3, [pc, #120]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d002      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x30>
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ede:	e027      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ee0:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ee2:	613b      	str	r3, [r7, #16]
      break;
 8002ee4:	e027      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	0c9b      	lsrs	r3, r3, #18
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	4a17      	ldr	r2, [pc, #92]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ef0:	5cd3      	ldrb	r3, [r2, r3]
 8002ef2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002efe:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	0c5b      	lsrs	r3, r3, #17
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	4a11      	ldr	r2, [pc, #68]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a0d      	ldr	r2, [pc, #52]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f12:	fb03 f202 	mul.w	r2, r3, r2
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e004      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a0c      	ldr	r2, [pc, #48]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	613b      	str	r3, [r7, #16]
      break;
 8002f2e:	e002      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f30:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f32:	613b      	str	r3, [r7, #16]
      break;
 8002f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f36:	693b      	ldr	r3, [r7, #16]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	007a1200 	.word	0x007a1200
 8002f4c:	08005070 	.word	0x08005070
 8002f50:	08005080 	.word	0x08005080
 8002f54:	003d0900 	.word	0x003d0900

08002f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f5c:	4b02      	ldr	r3, [pc, #8]	@ (8002f68 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	20000000 	.word	0x20000000

08002f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f70:	f7ff fff2 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4903      	ldr	r1, [pc, #12]	@ (8002f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08005068 	.word	0x08005068

08002f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f98:	f7ff ffde 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	0adb      	lsrs	r3, r3, #11
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	@ (8002fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08005068 	.word	0x08005068

08002fbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <RCC_Delay+0x34>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff4 <RCC_Delay+0x38>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0a5b      	lsrs	r3, r3, #9
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fd8:	bf00      	nop
  }
  while (Delay --);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1e5a      	subs	r2, r3, #1
 8002fde:	60fa      	str	r2, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f9      	bne.n	8002fd8 <RCC_Delay+0x1c>
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	10624dd3 	.word	0x10624dd3

08002ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e041      	b.n	800308e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fa94 	bl	800054c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 fbe6 	bl	8003808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e041      	b.n	800312c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d106      	bne.n	80030c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f839 	bl	8003134 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2202      	movs	r2, #2
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f000 fb97 	bl	8003808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
	...

08003148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <HAL_TIM_PWM_Start+0x24>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e022      	b.n	80031b2 <HAL_TIM_PWM_Start+0x6a>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b04      	cmp	r3, #4
 8003170:	d109      	bne.n	8003186 <HAL_TIM_PWM_Start+0x3e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	e015      	b.n	80031b2 <HAL_TIM_PWM_Start+0x6a>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d109      	bne.n	80031a0 <HAL_TIM_PWM_Start+0x58>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e008      	b.n	80031b2 <HAL_TIM_PWM_Start+0x6a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e05e      	b.n	8003278 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d104      	bne.n	80031ca <HAL_TIM_PWM_Start+0x82>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c8:	e013      	b.n	80031f2 <HAL_TIM_PWM_Start+0xaa>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d104      	bne.n	80031da <HAL_TIM_PWM_Start+0x92>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031d8:	e00b      	b.n	80031f2 <HAL_TIM_PWM_Start+0xaa>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d104      	bne.n	80031ea <HAL_TIM_PWM_Start+0xa2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031e8:	e003      	b.n	80031f2 <HAL_TIM_PWM_Start+0xaa>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2201      	movs	r2, #1
 80031f8:	6839      	ldr	r1, [r7, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fd84 	bl	8003d08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1e      	ldr	r2, [pc, #120]	@ (8003280 <HAL_TIM_PWM_Start+0x138>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d107      	bne.n	800321a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003218:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a18      	ldr	r2, [pc, #96]	@ (8003280 <HAL_TIM_PWM_Start+0x138>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00e      	beq.n	8003242 <HAL_TIM_PWM_Start+0xfa>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800322c:	d009      	beq.n	8003242 <HAL_TIM_PWM_Start+0xfa>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a14      	ldr	r2, [pc, #80]	@ (8003284 <HAL_TIM_PWM_Start+0x13c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_TIM_PWM_Start+0xfa>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a12      	ldr	r2, [pc, #72]	@ (8003288 <HAL_TIM_PWM_Start+0x140>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d111      	bne.n	8003266 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b06      	cmp	r3, #6
 8003252:	d010      	beq.n	8003276 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003264:	e007      	b.n	8003276 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40012c00 	.word	0x40012c00
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800

0800328c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d122      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d11b      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0202 	mvn.w	r2, #2
 80032b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fa7f 	bl	80037d2 <HAL_TIM_IC_CaptureCallback>
 80032d4:	e005      	b.n	80032e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fa72 	bl	80037c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fa81 	bl	80037e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d122      	bne.n	800333c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b04      	cmp	r3, #4
 8003302:	d11b      	bne.n	800333c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0204 	mvn.w	r2, #4
 800330c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fa55 	bl	80037d2 <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fa48 	bl	80037c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fa57 	bl	80037e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b08      	cmp	r3, #8
 8003348:	d122      	bne.n	8003390 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b08      	cmp	r3, #8
 8003356:	d11b      	bne.n	8003390 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0208 	mvn.w	r2, #8
 8003360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2204      	movs	r2, #4
 8003366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fa2b 	bl	80037d2 <HAL_TIM_IC_CaptureCallback>
 800337c:	e005      	b.n	800338a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fa1e 	bl	80037c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fa2d 	bl	80037e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b10      	cmp	r3, #16
 800339c:	d122      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d11b      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0210 	mvn.w	r2, #16
 80033b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2208      	movs	r2, #8
 80033ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fa01 	bl	80037d2 <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f9f4 	bl	80037c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fa03 	bl	80037e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d10e      	bne.n	8003410 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d107      	bne.n	8003410 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0201 	mvn.w	r2, #1
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f9cf 	bl	80037ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b80      	cmp	r3, #128	@ 0x80
 800341c:	d10e      	bne.n	800343c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003428:	2b80      	cmp	r3, #128	@ 0x80
 800342a:	d107      	bne.n	800343c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fcf1 	bl	8003e1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003446:	2b40      	cmp	r3, #64	@ 0x40
 8003448:	d10e      	bne.n	8003468 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003454:	2b40      	cmp	r3, #64	@ 0x40
 8003456:	d107      	bne.n	8003468 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f9c7 	bl	80037f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b20      	cmp	r3, #32
 8003474:	d10e      	bne.n	8003494 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b20      	cmp	r3, #32
 8003482:	d107      	bne.n	8003494 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0220 	mvn.w	r2, #32
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fcbc 	bl	8003e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e0ae      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	f200 809f 	bhi.w	8003608 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034ca:	a201      	add	r2, pc, #4	@ (adr r2, 80034d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	08003505 	.word	0x08003505
 80034d4:	08003609 	.word	0x08003609
 80034d8:	08003609 	.word	0x08003609
 80034dc:	08003609 	.word	0x08003609
 80034e0:	08003545 	.word	0x08003545
 80034e4:	08003609 	.word	0x08003609
 80034e8:	08003609 	.word	0x08003609
 80034ec:	08003609 	.word	0x08003609
 80034f0:	08003587 	.word	0x08003587
 80034f4:	08003609 	.word	0x08003609
 80034f8:	08003609 	.word	0x08003609
 80034fc:	08003609 	.word	0x08003609
 8003500:	080035c7 	.word	0x080035c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f9de 	bl	80038cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0208 	orr.w	r2, r2, #8
 800351e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0204 	bic.w	r2, r2, #4
 800352e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6999      	ldr	r1, [r3, #24]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	619a      	str	r2, [r3, #24]
      break;
 8003542:	e064      	b.n	800360e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fa24 	bl	8003998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800355e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800356e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6999      	ldr	r1, [r3, #24]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	021a      	lsls	r2, r3, #8
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	619a      	str	r2, [r3, #24]
      break;
 8003584:	e043      	b.n	800360e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fa6d 	bl	8003a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0208 	orr.w	r2, r2, #8
 80035a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0204 	bic.w	r2, r2, #4
 80035b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69d9      	ldr	r1, [r3, #28]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	61da      	str	r2, [r3, #28]
      break;
 80035c4:	e023      	b.n	800360e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fab7 	bl	8003b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69d9      	ldr	r1, [r3, #28]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	021a      	lsls	r2, r3, #8
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	61da      	str	r2, [r3, #28]
      break;
 8003606:	e002      	b.n	800360e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	75fb      	strb	r3, [r7, #23]
      break;
 800360c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003616:	7dfb      	ldrb	r3, [r7, #23]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIM_ConfigClockSource+0x1c>
 8003638:	2302      	movs	r3, #2
 800363a:	e0b4      	b.n	80037a6 <HAL_TIM_ConfigClockSource+0x186>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800365a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003662:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003674:	d03e      	beq.n	80036f4 <HAL_TIM_ConfigClockSource+0xd4>
 8003676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800367a:	f200 8087 	bhi.w	800378c <HAL_TIM_ConfigClockSource+0x16c>
 800367e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003682:	f000 8086 	beq.w	8003792 <HAL_TIM_ConfigClockSource+0x172>
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800368a:	d87f      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b70      	cmp	r3, #112	@ 0x70
 800368e:	d01a      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0xa6>
 8003690:	2b70      	cmp	r3, #112	@ 0x70
 8003692:	d87b      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b60      	cmp	r3, #96	@ 0x60
 8003696:	d050      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x11a>
 8003698:	2b60      	cmp	r3, #96	@ 0x60
 800369a:	d877      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x16c>
 800369c:	2b50      	cmp	r3, #80	@ 0x50
 800369e:	d03c      	beq.n	800371a <HAL_TIM_ConfigClockSource+0xfa>
 80036a0:	2b50      	cmp	r3, #80	@ 0x50
 80036a2:	d873      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x16c>
 80036a4:	2b40      	cmp	r3, #64	@ 0x40
 80036a6:	d058      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x13a>
 80036a8:	2b40      	cmp	r3, #64	@ 0x40
 80036aa:	d86f      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x16c>
 80036ac:	2b30      	cmp	r3, #48	@ 0x30
 80036ae:	d064      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x15a>
 80036b0:	2b30      	cmp	r3, #48	@ 0x30
 80036b2:	d86b      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x16c>
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d060      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x15a>
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d867      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x16c>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d05c      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x15a>
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d05a      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x15a>
 80036c4:	e062      	b.n	800378c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036d6:	f000 faf8 	bl	8003cca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	609a      	str	r2, [r3, #8]
      break;
 80036f2:	e04f      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003704:	f000 fae1 	bl	8003cca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003716:	609a      	str	r2, [r3, #8]
      break;
 8003718:	e03c      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003726:	461a      	mov	r2, r3
 8003728:	f000 fa58 	bl	8003bdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2150      	movs	r1, #80	@ 0x50
 8003732:	4618      	mov	r0, r3
 8003734:	f000 faaf 	bl	8003c96 <TIM_ITRx_SetConfig>
      break;
 8003738:	e02c      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003746:	461a      	mov	r2, r3
 8003748:	f000 fa76 	bl	8003c38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2160      	movs	r1, #96	@ 0x60
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fa9f 	bl	8003c96 <TIM_ITRx_SetConfig>
      break;
 8003758:	e01c      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003766:	461a      	mov	r2, r3
 8003768:	f000 fa38 	bl	8003bdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2140      	movs	r1, #64	@ 0x40
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fa8f 	bl	8003c96 <TIM_ITRx_SetConfig>
      break;
 8003778:	e00c      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4619      	mov	r1, r3
 8003784:	4610      	mov	r0, r2
 8003786:	f000 fa86 	bl	8003c96 <TIM_ITRx_SetConfig>
      break;
 800378a:	e003      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      break;
 8003790:	e000      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr

080037c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr

080037d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a29      	ldr	r2, [pc, #164]	@ (80038c0 <TIM_Base_SetConfig+0xb8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00b      	beq.n	8003838 <TIM_Base_SetConfig+0x30>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003826:	d007      	beq.n	8003838 <TIM_Base_SetConfig+0x30>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a26      	ldr	r2, [pc, #152]	@ (80038c4 <TIM_Base_SetConfig+0xbc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_Base_SetConfig+0x30>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a25      	ldr	r2, [pc, #148]	@ (80038c8 <TIM_Base_SetConfig+0xc0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d108      	bne.n	800384a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800383e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a1c      	ldr	r2, [pc, #112]	@ (80038c0 <TIM_Base_SetConfig+0xb8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00b      	beq.n	800386a <TIM_Base_SetConfig+0x62>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003858:	d007      	beq.n	800386a <TIM_Base_SetConfig+0x62>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a19      	ldr	r2, [pc, #100]	@ (80038c4 <TIM_Base_SetConfig+0xbc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d003      	beq.n	800386a <TIM_Base_SetConfig+0x62>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a18      	ldr	r2, [pc, #96]	@ (80038c8 <TIM_Base_SetConfig+0xc0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d108      	bne.n	800387c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a07      	ldr	r2, [pc, #28]	@ (80038c0 <TIM_Base_SetConfig+0xb8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d103      	bne.n	80038b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	615a      	str	r2, [r3, #20]
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40000800 	.word	0x40000800

080038cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f023 0201 	bic.w	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0303 	bic.w	r3, r3, #3
 8003902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f023 0302 	bic.w	r3, r3, #2
 8003914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a1c      	ldr	r2, [pc, #112]	@ (8003994 <TIM_OC1_SetConfig+0xc8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d10c      	bne.n	8003942 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f023 0308 	bic.w	r3, r3, #8
 800392e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f023 0304 	bic.w	r3, r3, #4
 8003940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a13      	ldr	r2, [pc, #76]	@ (8003994 <TIM_OC1_SetConfig+0xc8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d111      	bne.n	800396e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	621a      	str	r2, [r3, #32]
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40012c00 	.word	0x40012c00

08003998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f023 0210 	bic.w	r2, r3, #16
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0320 	bic.w	r3, r3, #32
 80039e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a68 <TIM_OC2_SetConfig+0xd0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d10d      	bne.n	8003a14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a14      	ldr	r2, [pc, #80]	@ (8003a68 <TIM_OC2_SetConfig+0xd0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d113      	bne.n	8003a44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	40012c00 	.word	0x40012c00

08003a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0303 	bic.w	r3, r3, #3
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b3c <TIM_OC3_SetConfig+0xd0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d10d      	bne.n	8003ae6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a14      	ldr	r2, [pc, #80]	@ (8003b3c <TIM_OC3_SetConfig+0xd0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d113      	bne.n	8003b16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	621a      	str	r2, [r3, #32]
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40012c00 	.word	0x40012c00

08003b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	031b      	lsls	r3, r3, #12
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8003bd8 <TIM_OC4_SetConfig+0x98>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d109      	bne.n	8003bb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	019b      	lsls	r3, r3, #6
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr
 8003bd8:	40012c00 	.word	0x40012c00

08003bdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f023 0201 	bic.w	r2, r3, #1
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f023 030a 	bic.w	r3, r3, #10
 8003c18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f023 0210 	bic.w	r2, r3, #16
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	031b      	lsls	r3, r3, #12
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	621a      	str	r2, [r3, #32]
}
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr

08003c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b085      	sub	sp, #20
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f043 0307 	orr.w	r3, r3, #7
 8003cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	609a      	str	r2, [r3, #8]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b087      	sub	sp, #28
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	021a      	lsls	r2, r3, #8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	431a      	orrs	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	609a      	str	r2, [r3, #8]
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1a      	ldr	r2, [r3, #32]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1a      	ldr	r2, [r3, #32]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d40:	431a      	orrs	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e046      	b.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a16      	ldr	r2, [pc, #88]	@ (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db4:	d009      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a12      	ldr	r2, [pc, #72]	@ (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a10      	ldr	r2, [pc, #64]	@ (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d10c      	bne.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800

08003e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e042      	b.n	8003ec8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fc fbfc 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	@ 0x24
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f001 f829 	bl	8004ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	@ 0x28
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d16d      	bne.n	8003fcc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_UART_Transmit+0x2c>
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e066      	b.n	8003fce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2221      	movs	r2, #33	@ 0x21
 8003f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f0e:	f7fd fee9 	bl	8001ce4 <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	88fa      	ldrh	r2, [r7, #6]
 8003f18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	88fa      	ldrh	r2, [r7, #6]
 8003f1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f28:	d108      	bne.n	8003f3c <HAL_UART_Transmit+0x6c>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e003      	b.n	8003f44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f44:	e02a      	b.n	8003f9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2180      	movs	r1, #128	@ 0x80
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fcf1 	bl	8004938 <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e036      	b.n	8003fce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	3302      	adds	r3, #2
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	e007      	b.n	8003f8e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1cf      	bne.n	8003f46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2200      	movs	r2, #0
 8003fae:	2140      	movs	r1, #64	@ 0x40
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fcc1 	bl	8004938 <UART_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e006      	b.n	8003fce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08c      	sub	sp, #48	@ 0x30
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d156      	bne.n	80040a0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_UART_Transmit_DMA+0x26>
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e04f      	b.n	80040a2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	88fa      	ldrh	r2, [r7, #6]
 8004012:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2221      	movs	r2, #33	@ 0x21
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004026:	4a21      	ldr	r2, [pc, #132]	@ (80040ac <HAL_UART_Transmit_DMA+0xd4>)
 8004028:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402e:	4a20      	ldr	r2, [pc, #128]	@ (80040b0 <HAL_UART_Transmit_DMA+0xd8>)
 8004030:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004036:	4a1f      	ldr	r2, [pc, #124]	@ (80040b4 <HAL_UART_Transmit_DMA+0xdc>)
 8004038:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403e:	2200      	movs	r2, #0
 8004040:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004042:	f107 0308 	add.w	r3, r7, #8
 8004046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800404c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3304      	adds	r3, #4
 8004056:	461a      	mov	r2, r3
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	f7fd ffd9 	bl	8002010 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004066:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3314      	adds	r3, #20
 800406e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	617b      	str	r3, [r7, #20]
   return(result);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800407e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3314      	adds	r3, #20
 8004086:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004088:	627a      	str	r2, [r7, #36]	@ 0x24
 800408a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6a39      	ldr	r1, [r7, #32]
 800408e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	61fb      	str	r3, [r7, #28]
   return(result);
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e5      	bne.n	8004068 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	e000      	b.n	80040a2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
  }
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3730      	adds	r7, #48	@ 0x30
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	08004687 	.word	0x08004687
 80040b0:	08004721 	.word	0x08004721
 80040b4:	080048a5 	.word	0x080048a5

080040b8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	4613      	mov	r3, r2
 80040c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d112      	bne.n	80040f8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_UART_Receive_DMA+0x26>
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e00b      	b.n	80040fa <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fc90 	bl	8004a14 <UART_Start_Receive_DMA>
 80040f4:	4603      	mov	r3, r0
 80040f6:	e000      	b.n	80040fa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b0ba      	sub	sp, #232	@ 0xe8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004130:	2300      	movs	r3, #0
 8004132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800414a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_UART_IRQHandler+0x66>
 8004156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fdf4 	bl	8004d50 <UART_Receive_IT>
      return;
 8004168:	e25b      	b.n	8004622 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800416a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80de 	beq.w	8004330 <HAL_UART_IRQHandler+0x22c>
 8004174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d106      	bne.n	800418e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004184:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80d1 	beq.w	8004330 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800418e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00b      	beq.n	80041b2 <HAL_UART_IRQHandler+0xae>
 800419a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800419e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	f043 0201 	orr.w	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <HAL_UART_IRQHandler+0xd2>
 80041be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	f043 0202 	orr.w	r2, r3, #2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_UART_IRQHandler+0xf6>
 80041e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	f043 0204 	orr.w	r2, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d011      	beq.n	800422a <HAL_UART_IRQHandler+0x126>
 8004206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d105      	bne.n	800421e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	f043 0208 	orr.w	r2, r3, #8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 81f2 	beq.w	8004618 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_UART_IRQHandler+0x14e>
 8004240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fd7f 	bl	8004d50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d103      	bne.n	800427e <HAL_UART_IRQHandler+0x17a>
 8004276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d04f      	beq.n	800431e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fc89 	bl	8004b96 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d041      	beq.n	8004316 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3314      	adds	r3, #20
 8004298:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3314      	adds	r3, #20
 80042ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1d9      	bne.n	8004292 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d013      	beq.n	800430e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ea:	4a7e      	ldr	r2, [pc, #504]	@ (80044e4 <HAL_UART_IRQHandler+0x3e0>)
 80042ec:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fd ff28 	bl	8002148 <HAL_DMA_Abort_IT>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d016      	beq.n	800432c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004308:	4610      	mov	r0, r2
 800430a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	e00e      	b.n	800432c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f9a5 	bl	800465e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004314:	e00a      	b.n	800432c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f9a1 	bl	800465e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	e006      	b.n	800432c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f99d 	bl	800465e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800432a:	e175      	b.n	8004618 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432c:	bf00      	nop
    return;
 800432e:	e173      	b.n	8004618 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	2b01      	cmp	r3, #1
 8004336:	f040 814f 	bne.w	80045d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800433a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8148 	beq.w	80045d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8141 	beq.w	80045d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80b6 	beq.w	80044e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004388:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 8145 	beq.w	800461c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800439a:	429a      	cmp	r2, r3
 800439c:	f080 813e 	bcs.w	800461c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	f000 8088 	beq.w	80044c4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	330c      	adds	r3, #12
 80043dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043e0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1d9      	bne.n	80043b4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004410:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3314      	adds	r3, #20
 8004420:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004424:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004428:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800442c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004436:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e1      	bne.n	8004400 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3314      	adds	r3, #20
 8004442:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800444c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800444e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004452:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3314      	adds	r3, #20
 800445c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004460:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004462:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004466:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800446e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e3      	bne.n	800443c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004494:	f023 0310 	bic.w	r3, r3, #16
 8004498:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80044a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044a8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e3      	bne.n	8004482 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fd fe06 	bl	80020d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8c8 	bl	8004670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044e0:	e09c      	b.n	800461c <HAL_UART_IRQHandler+0x518>
 80044e2:	bf00      	nop
 80044e4:	08004c5b 	.word	0x08004c5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 808e 	beq.w	8004620 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8089 	beq.w	8004620 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800451e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004520:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004524:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	330c      	adds	r3, #12
 800452e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004532:	647a      	str	r2, [r7, #68]	@ 0x44
 8004534:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004538:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e3      	bne.n	800450e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	623b      	str	r3, [r7, #32]
   return(result);
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3314      	adds	r3, #20
 8004566:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800456a:	633a      	str	r2, [r7, #48]	@ 0x30
 800456c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e3      	bne.n	8004546 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	330c      	adds	r3, #12
 8004592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	60fb      	str	r3, [r7, #12]
   return(result);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0310 	bic.w	r3, r3, #16
 80045a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80045b0:	61fa      	str	r2, [r7, #28]
 80045b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	69b9      	ldr	r1, [r7, #24]
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	617b      	str	r3, [r7, #20]
   return(result);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e3      	bne.n	800458c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045ce:	4619      	mov	r1, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f84d 	bl	8004670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045d6:	e023      	b.n	8004620 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d009      	beq.n	80045f8 <HAL_UART_IRQHandler+0x4f4>
 80045e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fb46 	bl	8004c82 <UART_Transmit_IT>
    return;
 80045f6:	e014      	b.n	8004622 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00e      	beq.n	8004622 <HAL_UART_IRQHandler+0x51e>
 8004604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fb85 	bl	8004d20 <UART_EndTransmit_IT>
    return;
 8004616:	e004      	b.n	8004622 <HAL_UART_IRQHandler+0x51e>
    return;
 8004618:	bf00      	nop
 800461a:	e002      	b.n	8004622 <HAL_UART_IRQHandler+0x51e>
      return;
 800461c:	bf00      	nop
 800461e:	e000      	b.n	8004622 <HAL_UART_IRQHandler+0x51e>
      return;
 8004620:	bf00      	nop
  }
}
 8004622:	37e8      	adds	r7, #232	@ 0xe8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr

0800463a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr

0800464c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr

0800465e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b090      	sub	sp, #64	@ 0x40
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d137      	bne.n	8004712 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80046a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a4:	2200      	movs	r2, #0
 80046a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3314      	adds	r3, #20
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	623b      	str	r3, [r7, #32]
   return(result);
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3314      	adds	r3, #20
 80046c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80046ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046d0:	e841 2300 	strex	r3, r2, [r1]
 80046d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e5      	bne.n	80046a8 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	330c      	adds	r3, #12
 80046fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046fc:	61fa      	str	r2, [r7, #28]
 80046fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	69b9      	ldr	r1, [r7, #24]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	617b      	str	r3, [r7, #20]
   return(result);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e5      	bne.n	80046dc <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004710:	e002      	b.n	8004718 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004712:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004714:	f7ff ff88 	bl	8004628 <HAL_UART_TxCpltCallback>
}
 8004718:	bf00      	nop
 800471a:	3740      	adds	r7, #64	@ 0x40
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff ff83 	bl	800463a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b09c      	sub	sp, #112	@ 0x70
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b00      	cmp	r3, #0
 8004756:	d172      	bne.n	800483e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800475a:	2200      	movs	r2, #0
 800475c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800475e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	330c      	adds	r3, #12
 8004764:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800476e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800477e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004780:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004784:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800478c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e5      	bne.n	800475e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80047aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3314      	adds	r3, #20
 80047b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80047b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80047b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e5      	bne.n	8004792 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3314      	adds	r3, #20
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	623b      	str	r3, [r7, #32]
   return(result);
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80047de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3314      	adds	r3, #20
 80047e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80047e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e5      	bne.n	80047c6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004806:	2b01      	cmp	r3, #1
 8004808:	d119      	bne.n	800483e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	330c      	adds	r3, #12
 8004810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	60fb      	str	r3, [r7, #12]
   return(result);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f023 0310 	bic.w	r3, r3, #16
 8004820:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	330c      	adds	r3, #12
 8004828:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800482a:	61fa      	str	r2, [r7, #28]
 800482c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	69b9      	ldr	r1, [r7, #24]
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	617b      	str	r3, [r7, #20]
   return(result);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e5      	bne.n	800480a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800483e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004840:	2200      	movs	r2, #0
 8004842:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	2b01      	cmp	r3, #1
 800484a:	d106      	bne.n	800485a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800484c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800484e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004850:	4619      	mov	r1, r3
 8004852:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004854:	f7ff ff0c 	bl	8004670 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004858:	e002      	b.n	8004860 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800485a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800485c:	f7fc fbb0 	bl	8000fc0 <HAL_UART_RxCpltCallback>
}
 8004860:	bf00      	nop
 8004862:	3770      	adds	r7, #112	@ 0x70
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004880:	2b01      	cmp	r3, #1
 8004882:	d108      	bne.n	8004896 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	b29b      	uxth	r3, r3
 800488c:	4619      	mov	r1, r3
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f7ff feee 	bl	8004670 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004894:	e002      	b.n	800489c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff fed8 	bl	800464c <HAL_UART_RxHalfCpltCallback>
}
 800489c:	bf00      	nop
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b21      	cmp	r3, #33	@ 0x21
 80048d6:	d108      	bne.n	80048ea <UART_DMAError+0x46>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2200      	movs	r2, #0
 80048e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80048e4:	68b8      	ldr	r0, [r7, #8]
 80048e6:	f000 f92f 	bl	8004b48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b22      	cmp	r3, #34	@ 0x22
 800490a:	d108      	bne.n	800491e <UART_DMAError+0x7a>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2200      	movs	r2, #0
 8004916:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004918:	68b8      	ldr	r0, [r7, #8]
 800491a:	f000 f93c 	bl	8004b96 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	f043 0210 	orr.w	r2, r3, #16
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800492a:	68b8      	ldr	r0, [r7, #8]
 800492c:	f7ff fe97 	bl	800465e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b090      	sub	sp, #64	@ 0x40
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	4613      	mov	r3, r2
 8004946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004948:	e050      	b.n	80049ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d04c      	beq.n	80049ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <UART_WaitOnFlagUntilTimeout+0x30>
 8004958:	f7fd f9c4 	bl	8001ce4 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004964:	429a      	cmp	r2, r3
 8004966:	d241      	bcs.n	80049ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800497e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004988:	637a      	str	r2, [r7, #52]	@ 0x34
 800498a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800498e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e5      	bne.n	8004968 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3314      	adds	r3, #20
 80049a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	613b      	str	r3, [r7, #16]
   return(result);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3314      	adds	r3, #20
 80049ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049bc:	623a      	str	r2, [r7, #32]
 80049be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	69f9      	ldr	r1, [r7, #28]
 80049c2:	6a3a      	ldr	r2, [r7, #32]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e00f      	b.n	8004a0c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4013      	ands	r3, r2
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d09f      	beq.n	800494a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3740      	adds	r7, #64	@ 0x40
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b098      	sub	sp, #96	@ 0x60
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2222      	movs	r2, #34	@ 0x22
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a40:	4a3e      	ldr	r2, [pc, #248]	@ (8004b3c <UART_Start_Receive_DMA+0x128>)
 8004a42:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a48:	4a3d      	ldr	r2, [pc, #244]	@ (8004b40 <UART_Start_Receive_DMA+0x12c>)
 8004a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a50:	4a3c      	ldr	r2, [pc, #240]	@ (8004b44 <UART_Start_Receive_DMA+0x130>)
 8004a52:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a58:	2200      	movs	r2, #0
 8004a5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004a5c:	f107 0308 	add.w	r3, r7, #8
 8004a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	f7fd facc 	bl	8002010 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004a78:	2300      	movs	r3, #0
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d019      	beq.n	8004aca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ab6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004abc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e5      	bne.n	8004a96 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3314      	adds	r3, #20
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3314      	adds	r3, #20
 8004ae8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004aea:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004aec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004af0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004af2:	e841 2300 	strex	r3, r2, [r1]
 8004af6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e5      	bne.n	8004aca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3314      	adds	r3, #20
 8004b04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b14:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3314      	adds	r3, #20
 8004b1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6a39      	ldr	r1, [r7, #32]
 8004b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e5      	bne.n	8004afe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3760      	adds	r7, #96	@ 0x60
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	0800473d 	.word	0x0800473d
 8004b40:	08004869 	.word	0x08004869
 8004b44:	080048a5 	.word	0x080048a5

08004b48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b089      	sub	sp, #36	@ 0x24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	61ba      	str	r2, [r7, #24]
 8004b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6979      	ldr	r1, [r7, #20]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e5      	bne.n	8004b50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004b8c:	bf00      	nop
 8004b8e:	3724      	adds	r7, #36	@ 0x24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b095      	sub	sp, #84	@ 0x54
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	330c      	adds	r3, #12
 8004bbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bbe:	643a      	str	r2, [r7, #64]	@ 0x40
 8004bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e5      	bne.n	8004b9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3314      	adds	r3, #20
 8004bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	e853 3f00 	ldrex	r3, [r3]
 8004be0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f023 0301 	bic.w	r3, r3, #1
 8004be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3314      	adds	r3, #20
 8004bf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e5      	bne.n	8004bd2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d119      	bne.n	8004c42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f023 0310 	bic.w	r3, r3, #16
 8004c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c2e:	61ba      	str	r2, [r7, #24]
 8004c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e5      	bne.n	8004c0e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c50:	bf00      	nop
 8004c52:	3754      	adds	r7, #84	@ 0x54
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr

08004c5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7ff fcf2 	bl	800465e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c7a:	bf00      	nop
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b085      	sub	sp, #20
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b21      	cmp	r3, #33	@ 0x21
 8004c94:	d13e      	bne.n	8004d14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9e:	d114      	bne.n	8004cca <UART_Transmit_IT+0x48>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d110      	bne.n	8004cca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	1c9a      	adds	r2, r3, #2
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	621a      	str	r2, [r3, #32]
 8004cc8:	e008      	b.n	8004cdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6211      	str	r1, [r2, #32]
 8004cd4:	781a      	ldrb	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10f      	bne.n	8004d10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e000      	b.n	8004d16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d14:	2302      	movs	r3, #2
  }
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff fc71 	bl	8004628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08c      	sub	sp, #48	@ 0x30
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b22      	cmp	r3, #34	@ 0x22
 8004d62:	f040 80ae 	bne.w	8004ec2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6e:	d117      	bne.n	8004da0 <UART_Receive_IT+0x50>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d113      	bne.n	8004da0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d98:	1c9a      	adds	r2, r3, #2
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d9e:	e026      	b.n	8004dee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db2:	d007      	beq.n	8004dc4 <UART_Receive_IT+0x74>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <UART_Receive_IT+0x82>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dce:	701a      	strb	r2, [r3, #0]
 8004dd0:	e008      	b.n	8004de4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d15d      	bne.n	8004ebe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0220 	bic.w	r2, r2, #32
 8004e10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695a      	ldr	r2, [r3, #20]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0201 	bic.w	r2, r2, #1
 8004e30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d135      	bne.n	8004eb4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f023 0310 	bic.w	r3, r3, #16
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6e:	623a      	str	r2, [r7, #32]
 8004e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	69f9      	ldr	r1, [r7, #28]
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d10a      	bne.n	8004ea6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff fbdf 	bl	8004670 <HAL_UARTEx_RxEventCallback>
 8004eb2:	e002      	b.n	8004eba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7fc f883 	bl	8000fc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e002      	b.n	8004ec4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3730      	adds	r7, #48	@ 0x30
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f06:	f023 030c 	bic.w	r3, r3, #12
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	430b      	orrs	r3, r1
 8004f12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe0 <UART_SetConfig+0x114>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d103      	bne.n	8004f3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f34:	f7fe f82e 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	e002      	b.n	8004f42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f3c:	f7fe f816 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8004f40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009a      	lsls	r2, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f58:	4a22      	ldr	r2, [pc, #136]	@ (8004fe4 <UART_SetConfig+0x118>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	0119      	lsls	r1, r3, #4
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009a      	lsls	r2, r3, #2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f78:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe4 <UART_SetConfig+0x118>)
 8004f7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	2064      	movs	r0, #100	@ 0x64
 8004f82:	fb00 f303 	mul.w	r3, r0, r3
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	3332      	adds	r3, #50	@ 0x32
 8004f8c:	4a15      	ldr	r2, [pc, #84]	@ (8004fe4 <UART_SetConfig+0x118>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f98:	4419      	add	r1, r3
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009a      	lsls	r2, r3, #2
 8004fa4:	441a      	add	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <UART_SetConfig+0x118>)
 8004fb2:	fba3 0302 	umull	r0, r3, r3, r2
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	2064      	movs	r0, #100	@ 0x64
 8004fba:	fb00 f303 	mul.w	r3, r0, r3
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	3332      	adds	r3, #50	@ 0x32
 8004fc4:	4a07      	ldr	r2, [pc, #28]	@ (8004fe4 <UART_SetConfig+0x118>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	f003 020f 	and.w	r2, r3, #15
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40013800 	.word	0x40013800
 8004fe4:	51eb851f 	.word	0x51eb851f

08004fe8 <memset>:
 8004fe8:	4603      	mov	r3, r0
 8004fea:	4402      	add	r2, r0
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d100      	bne.n	8004ff2 <memset+0xa>
 8004ff0:	4770      	bx	lr
 8004ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff6:	e7f9      	b.n	8004fec <memset+0x4>

08004ff8 <__libc_init_array>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	2600      	movs	r6, #0
 8004ffc:	4d0c      	ldr	r5, [pc, #48]	@ (8005030 <__libc_init_array+0x38>)
 8004ffe:	4c0d      	ldr	r4, [pc, #52]	@ (8005034 <__libc_init_array+0x3c>)
 8005000:	1b64      	subs	r4, r4, r5
 8005002:	10a4      	asrs	r4, r4, #2
 8005004:	42a6      	cmp	r6, r4
 8005006:	d109      	bne.n	800501c <__libc_init_array+0x24>
 8005008:	f000 f81a 	bl	8005040 <_init>
 800500c:	2600      	movs	r6, #0
 800500e:	4d0a      	ldr	r5, [pc, #40]	@ (8005038 <__libc_init_array+0x40>)
 8005010:	4c0a      	ldr	r4, [pc, #40]	@ (800503c <__libc_init_array+0x44>)
 8005012:	1b64      	subs	r4, r4, r5
 8005014:	10a4      	asrs	r4, r4, #2
 8005016:	42a6      	cmp	r6, r4
 8005018:	d105      	bne.n	8005026 <__libc_init_array+0x2e>
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005020:	4798      	blx	r3
 8005022:	3601      	adds	r6, #1
 8005024:	e7ee      	b.n	8005004 <__libc_init_array+0xc>
 8005026:	f855 3b04 	ldr.w	r3, [r5], #4
 800502a:	4798      	blx	r3
 800502c:	3601      	adds	r6, #1
 800502e:	e7f2      	b.n	8005016 <__libc_init_array+0x1e>
 8005030:	08005084 	.word	0x08005084
 8005034:	08005084 	.word	0x08005084
 8005038:	08005084 	.word	0x08005084
 800503c:	08005088 	.word	0x08005088

08005040 <_init>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr

0800504c <_fini>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	bf00      	nop
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr
